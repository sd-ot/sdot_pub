Rq: 97% des faces ont nb_nodes <= 8 (en 3D)
Rq: 66% des cellules ont nb_nodes <= 8 dans toutes les faces (en 3D)

Assignation des nouveaux noeuds.

Prop 1: on fait une liste de correspondances ancien numéro => nouveau numéro.

Prenant une liste de bits, on veut une liste d'offsets.


Prop: pour savoir où seront placés les nouveaux noeuds, on se base sur ou.

Avec `ou`, on alloue des numéros pour le remplacement des noeuds.
  Si `ou != 0`, on met le nouveau noeud dans une zone temporaire (partant de la fin).


* bornages
  Pb: on veut éviter de faire des undo... 
    Dans handle_intersected_face, on peut créer de nouveaux noeuds et dépasser la limite. On peut aussi créer des faces avec trop de noeuds et dépasser la limite.
    Lors de la création de la nouvelle face, on peut aussi dépasser la limite.

  Prop: on fait des listes de noeuds supplémentaires
* Optimisations dans le code généré.
  => création du masque avec update si c'est plus rapide comme ça.

* Gestion du cas où il y a moins de noeuds à la fin (déplacement des noeuds puis réécriture dans les faces)

LT64 c0;
int s = c0.plane_cut( ..., nb_cuts );
if ( s < nb_cuts ) {
  MT64 c1( c0 );
  s = c1.plane_cut( ..., nb_cuts. );
}

* Cas tests
* ré-ecriture de la version 2D

Prop: on appelle fu sur le type final. Lorsque c'est le même type qu'initialement.


__m256 _mm256_set_m128 (__m128 hi, __m128 lo) => ...
_mm256_unpackhi_pd(__m256d a, __m256d b) => récupère les 64 bits haut (index impairs)
__m256d _mm256_blend_pd (__m256d a, __m256d b, const int imm8)

__m256d _mm256_permute_pd      ( __m256d a, int imm8 ) => switch entre indices pair/impair. vpermilpd. 16 possibilités
__m256d _mm256_permute2f128_pd ( __m256d a, __m256d b, int imm8) => 16 possibilités
__m256d _mm256_permute4x64_pd  ( __m256d a, const int imm8 ) => prend les double qu'on veut

__m256i _mm256_srli_si256 (__m256i a, const int imm8) pour déplacer des octets (et on peut mettre des 0)

__m256d _mm256_insertf128_pd( __m256d a, __m128d b, int imm8 ) => pourrait
__m256i _mm256_insert_epi64 ( __m256i a, __int64 i, const int index ) => mettre 64 bits
__m512d _mm512_insertf64x2  ( __m512d a, __m128d b, int imm8 )
__m512d _mm512_insertf64x4  ( __m512d a, __m256d b, int imm8 )
   => on pourrait mettre les x et les y des coupes dans des m128, puis 
      * les coller avec _insert_
      * ou l'étendre
          Ex: // size=5 outside=00000100 mod=3,4,0,1,[ 2, 1 ],[ 2, 3 ], 
          Ex: // size=5 outside=00000100 mod=0,1,[ 2, 1 ],[ 2, 3 ],3,4,
            _mm256_set_m128 pour 0,1 et [2,1],[2,3]
        En 256:
          =>  pour la première partie
          => 


   => pour le reste, en 



En 512,  
  __m512d _mm512_permutex2var_pd (__m512d a, __m512i idx, __m512d b) => on prend ce qu'on veut de a et b 


Prop: partant d'un graph de 
   0  1  2  3
   |  \
   x     y

Le top serait de simuler le temps d'exécution

Point de départ:
    SimdVec<TF,2> dxm = dx0 - m * ( dx1 - dx0 );
    SimdVec<TF,2> dym = dy0 - m * ( dy1 - dy0 );
    px => 0 1 2 3  4 5 6 7
    py => 0 1 2 3  4 5 6 7
Il faut ensuite les coller dans px et py
    Ex: // size=5 outside=00000100 mod=0,1,[ 2, 1 ],[ 2, 3 ],3,4,
        => 

Prop: on calcule une borne de temps à partir de _mm25 6_extract_epi64

Prop: on propose un set de graph, et on cherche celui qui produit le meilleur code.
  => 

Pourquoi faire de l'assembleur ?
  => pour faire un saut avec un shift
  => pour s'assurer que tout est dans les registres (?)

Rq: ça serait bien d'avoir une version C++ pour le cas général. Ça permettra aussi de faire des bench.

Pb: c'est important de considérer le temps de calcul des distances. => les bench doivent intégrer le test

Du coup, on pourrait faire plusieurs cut_bench

Calcul de l'overhead...
  => pour tomber toujours sur le même cas, on a besoin de mettre à jour px.
  => une façon de faire serait d'utiliser le cas "complétement dehors" pour réinitialiser.


Prop: on génère un code particulier pour chaque architecture. En principe, le choix final de l'archi se fait de façon globale, mais il faut bien qu'on écrive le code généré sans le savoir.
  => écriture de .h et .cpp pour tous les cas.

* version gen-gen 
* version float
* espaces de nom




