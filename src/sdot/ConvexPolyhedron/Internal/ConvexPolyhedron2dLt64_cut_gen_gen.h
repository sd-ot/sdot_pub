#include "../../Support/SimdVec.h"
namespace sdot {
namespace internal {
template<class TF>
bool ConvexPolyhedron2dLt64_cut( int &num_cut, TF *px, TF *py, std::size_t *pi, int &nodes_size, const TF *cut_x, const TF *cut_y, const TF *cut_s, const std::size_t *cut_i, int cut_n ) {
    using namespace sdot;
    using TC = std::size_t;
    using VF = SimdVec<TF,1>;
    using VC = SimdVec<TC,1>;
    VF px_0 = VF::load_aligned( px + 0 );
    VF px_1 = VF::load_aligned( px + 1 );
    VF px_2 = VF::load_aligned( px + 2 );
    VF px_3 = VF::load_aligned( px + 3 );
    VF px_4 = VF::load_aligned( px + 4 );
    VF px_5 = VF::load_aligned( px + 5 );
    VF px_6 = VF::load_aligned( px + 6 );
    VF px_7 = VF::load_aligned( px + 7 );
    VF px_8 = VF::load_aligned( px + 8 );
    VF px_9 = VF::load_aligned( px + 9 );
    VF py_0 = VF::load_aligned( py + 0 );
    VF py_1 = VF::load_aligned( py + 1 );
    VF py_2 = VF::load_aligned( py + 2 );
    VF py_3 = VF::load_aligned( py + 3 );
    VF py_4 = VF::load_aligned( py + 4 );
    VF py_5 = VF::load_aligned( py + 5 );
    VF py_6 = VF::load_aligned( py + 6 );
    VF py_7 = VF::load_aligned( py + 7 );
    VF py_8 = VF::load_aligned( py + 8 );
    VF py_9 = VF::load_aligned( py + 9 );
    VC pi_0 = VC::load_aligned( pi + 0 );
    VC pi_1 = VC::load_aligned( pi + 1 );
    VC pi_2 = VC::load_aligned( pi + 2 );
    VC pi_3 = VC::load_aligned( pi + 3 );
    VC pi_4 = VC::load_aligned( pi + 4 );
    VC pi_5 = VC::load_aligned( pi + 5 );
    VC pi_6 = VC::load_aligned( pi + 6 );
    VC pi_7 = VC::load_aligned( pi + 7 );
    VC pi_8 = VC::load_aligned( pi + 8 );
    VC pi_9 = VC::load_aligned( pi + 9 );
    for( ; num_cut < cut_n; ++num_cut ) {
        int nmsk = 1 << nodes_size;
        VF cx = cut_x[ num_cut ];
        VF cy = cut_y[ num_cut ];
        VF cs = cut_s[ num_cut ];
        
        VF bi_0 = px_0 * cx + py_0 * cy;
        VF bi_1 = px_1 * cx + py_1 * cy;
        VF bi_2 = px_2 * cx + py_2 * cy;
        VF bi_3 = px_3 * cx + py_3 * cy;
        VF bi_4 = px_4 * cx + py_4 * cy;
        VF bi_5 = px_5 * cx + py_5 * cy;
        VF bi_6 = px_6 * cx + py_6 * cy;
        VF bi_7 = px_7 * cx + py_7 * cy;
        VF bi_8 = px_8 * cx + py_8 * cy;
        int outside_nodes = ( ( bi_0 > cs ) << 0 ) | ( ( bi_1 > cs ) << 1 ) | ( ( bi_2 > cs ) << 2 ) | ( ( bi_3 > cs ) << 3 ) | ( ( bi_4 > cs ) << 4 ) | ( ( bi_5 > cs ) << 5 ) | ( ( bi_6 > cs ) << 6 ) | ( ( bi_7 > cs ) << 7 ) | ( ( bi_8 > cs ) << 8 );
        int case_code = ( outside_nodes & ( nmsk - 1 ) ) | nmsk;
        VF di_0 = bi_0 - cs;
        VF di_1 = bi_1 - cs;
        VF di_2 = bi_2 - cs;
        VF di_3 = bi_3 - cs;
        VF di_4 = bi_4 - cs;
        VF di_5 = bi_5 - cs;
        VF di_6 = bi_6 - cs;
        VF di_7 = bi_7 - cs;
        VF di_8 = bi_8 - cs;
        
        // if nothing has changed => go to the next cut
        if ( outside_nodes == 0 )
            continue;
        P( nodes_size );
        P( case_code );
        static void *dispatch_table[] = { &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_1, &&case_2, &&case_3, &&case_4, &&case_5, &&case_6, &&case_7, &&case_8, &&case_1, &&case_9, &&case_10, &&case_11, &&case_12, &&case_not_handled, &&case_13, &&case_14, &&case_15, &&case_16, &&case_not_handled, &&case_17, &&case_18, &&case_19, &&case_20, &&case_8, &&case_1, &&case_21, &&case_22, &&case_23, &&case_24, &&case_not_handled, &&case_25, &&case_26, &&case_27, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_28, &&case_not_handled, &&case_29, &&case_30, &&case_31, &&case_32, &&case_not_handled, &&case_33, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_34, &&case_35, &&case_36, &&case_not_handled, &&case_37, &&case_38, &&case_39, &&case_40, &&case_8, &&case_1, &&case_41, &&case_42, &&case_43, &&case_44, &&case_not_handled, &&case_45, &&case_46, &&case_47, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_48, &&case_not_handled, &&case_49, &&case_50, &&case_51, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_52, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_53, &&case_not_handled, &&case_54, &&case_55, &&case_56, &&case_57, &&case_not_handled, &&case_58, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_59, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_60, &&case_61, &&case_62, &&case_not_handled, &&case_33, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_63, &&case_64, &&case_65, &&case_not_handled, &&case_66, &&case_67, &&case_68, &&case_69, &&case_8, &&case_1, &&case_70, &&case_71, &&case_72, &&case_73, &&case_not_handled, &&case_74, &&case_75, &&case_76, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_77, &&case_not_handled, &&case_78, &&case_79, &&case_80, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_81, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_82, &&case_not_handled, &&case_83, &&case_84, &&case_85, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_86, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_87, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_88, &&case_not_handled, &&case_89, &&case_90, &&case_91, &&case_92, &&case_not_handled, &&case_93, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_94, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_95, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_96, &&case_97, &&case_98, &&case_not_handled, &&case_99, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_100, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_101, &&case_102, &&case_103, &&case_not_handled, &&case_104, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_105, &&case_106, &&case_107, &&case_not_handled, &&case_108, &&case_109, &&case_110, &&case_111, &&case_8, &&case_1, &&case_112, &&case_113, &&case_114, &&case_115, &&case_not_handled, &&case_116, &&case_117, &&case_118, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_119, &&case_not_handled, &&case_120, &&case_121, &&case_122, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_123, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_124, &&case_not_handled, &&case_125, &&case_126, &&case_127, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_128, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_129, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_130, &&case_not_handled, &&case_131, &&case_132, &&case_133, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_134, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_135, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_136, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_137, &&case_not_handled, &&case_138, &&case_139, &&case_140, &&case_141, &&case_not_handled, &&case_142, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_143, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_144, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_145, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_146, &&case_147, &&case_148, &&case_not_handled, &&case_149, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_150, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_151, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_152, &&case_153, &&case_98, &&case_not_handled, &&case_154, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_155, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_156, &&case_157, &&case_158, &&case_not_handled, &&case_33, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_159, &&case_160, &&case_161, &&case_not_handled, &&case_108, &&case_162, &&case_163, &&case_164, &&case_8, &&case_1, &&case_165, &&case_166, &&case_167, &&case_168, &&case_not_handled, &&case_169, &&case_170, &&case_171, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_172, &&case_not_handled, &&case_173, &&case_174, &&case_175, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_176, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_177, &&case_not_handled, &&case_178, &&case_179, &&case_180, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_181, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_182, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_183, &&case_not_handled, &&case_184, &&case_185, &&case_186, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_187, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_188, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_189, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_190, &&case_not_handled, &&case_191, &&case_192, &&case_193, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_194, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_195, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_196, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_197, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_198, &&case_not_handled, &&case_199, &&case_200, &&case_201, &&case_202, &&case_not_handled, &&case_203, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_204, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_205, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_206, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_207, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_208, &&case_209, &&case_210, &&case_not_handled, &&case_211, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_212, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_213, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_214, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_146, &&case_215, &&case_216, &&case_not_handled, &&case_217, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_150, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_218, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_219, &&case_220, &&case_221, &&case_not_handled, &&case_154, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_222, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_223, &&case_224, &&case_225, &&case_not_handled, &&case_226, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_227, &&case_228, &&case_229, &&case_not_handled, &&case_37, &&case_230, &&case_231, &&case_232, &&case_8,  };
        goto *dispatch_table[ case_code ];
        case_not_handled: {
            break;
        }
        case_1: {
            // everything is inside
            continue;
        }
        case_8: {
            // everything is outside
            nodes_size = 0;
            return true;
        }
        case_35: {
            // mod=0,1,2,[2,3],[4,0], swith_cuts=1
            SimdVec<TC,1> R0{ cut_i[num_cut] };
            auto R1 = px_0[ 0 ];
            SimdVec<TF,1> R2{ R1 };
            auto R3 = py_0[ 0 ];
            SimdVec<TF,1> R4{ R3 };
            auto R5 = pi_0[ 0 ];
            SimdVec<TC,1> R6{ R5 };
            auto R7 = px_1[ 0 ];
            SimdVec<TF,1> R8{ R7 };
            auto R9 = py_1[ 0 ];
            SimdVec<TF,1> R10{ R9 };
            auto R11 = pi_1[ 0 ];
            SimdVec<TC,1> R12{ R11 };
            auto R13 = px_2[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = py_2[ 0 ];
            SimdVec<TF,1> R16{ R15 };
            auto R17 = pi_2[ 0 ];
            SimdVec<TC,1> R18{ R17 };
            auto R19 = px_4[ 0 ];
            SimdVec<TF,2> R20{ R19, R13 };
            auto R21 = di_4[ 0 ];
            auto R22 = py_3[ 0 ];
            SimdVec<TF,2> R23{ R3, R22 };
            auto R24 = py_4[ 0 ];
            SimdVec<TF,2> R25{ R24, R15 };
            auto R26 = R25 - R23;
            auto R27 = px_3[ 0 ];
            SimdVec<TF,2> R28{ R1, R27 };
            auto R29 = R20 - R28;
            auto R30 = di_3[ 0 ];
            auto R31 = di_0[ 0 ];
            SimdVec<TF,2> R32{ R31, R30 };
            auto R33 = di_2[ 0 ];
            SimdVec<TF,2> R34{ R21, R33 };
            auto R35 = R32 - R34;
            auto R36 = R34 / R35;
            auto R37 = R36 * R26;
            auto R38 = R25 + R37;
            auto R39 = R38[ 0 ];
            SimdVec<TF,1> R40{ R39 };
            auto R41 = R36 * R29;
            auto R42 = R20 + R41;
            auto R43 = R42[ 0 ];
            SimdVec<TF,1> R44{ R43 };
            auto R45 = R38[ 1 ];
            SimdVec<TF,1> R46{ R45 };
            auto R47 = R42[ 1 ];
            SimdVec<TF,1> R48{ R47 };
            px_3 = R48;
            py_3 = R46;
            px_4 = R44;
            py_4 = R40;
            pi_3 = R0;
            pi_2 = R18;
            py_2 = R16;
            px_2 = R14;
            pi_1 = R12;
            py_1 = R10;
            px_1 = R8;
            pi_0 = R6;
            py_0 = R4;
            px_0 = R2;
            pi_4 = R0;
            continue;
        }
        case_81: {
            // mod=0,1,2,[2,3],[4,5],5,6, swith_cuts=0
            auto R0 = pi_6[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_0[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_0[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_0[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_1[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = py_1[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = pi_1[ 0 ];
            SimdVec<TC,1> R13{ R12 };
            auto R14 = px_2[ 0 ];
            SimdVec<TF,1> R15{ R14 };
            auto R16 = py_2[ 0 ];
            SimdVec<TF,1> R17{ R16 };
            auto R18 = pi_2[ 0 ];
            SimdVec<TC,1> R19{ R18 };
            auto R20 = px_4[ 0 ];
            SimdVec<TF,2> R21{ R14, R20 };
            auto R22 = py_6[ 0 ];
            SimdVec<TF,1> R23{ R22 };
            auto R24 = di_2[ 0 ];
            auto R25 = px_6[ 0 ];
            SimdVec<TF,1> R26{ R25 };
            auto R27 = di_4[ 0 ];
            SimdVec<TF,2> R28{ R24, R27 };
            auto R29 = pi_5[ 0 ];
            SimdVec<TC,1> R30{ R29 };
            auto R31 = di_3[ 0 ];
            SimdVec<TC,1> R32{ cut_i[num_cut] };
            auto R33 = di_5[ 0 ];
            SimdVec<TF,2> R34{ R31, R33 };
            auto R35 = R34 - R28;
            auto R36 = R28 / R35;
            auto R37 = px_3[ 0 ];
            auto R38 = py_5[ 0 ];
            SimdVec<TF,1> R39{ R38 };
            auto R40 = px_5[ 0 ];
            SimdVec<TF,1> R41{ R40 };
            auto R42 = py_4[ 0 ];
            SimdVec<TF,2> R43{ R16, R42 };
            SimdVec<TF,2> R44{ R37, R40 };
            auto R45 = R21 - R44;
            auto R46 = R36 * R45;
            auto R47 = R21 + R46;
            auto R48 = R47[ 1 ];
            SimdVec<TF,1> R49{ R48 };
            auto R50 = py_3[ 0 ];
            SimdVec<TF,2> R51{ R50, R38 };
            auto R52 = R43 - R51;
            auto R53 = R36 * R52;
            auto R54 = R43 + R53;
            auto R55 = R54[ 1 ];
            SimdVec<TF,1> R56{ R55 };
            auto R57 = R47[ 0 ];
            SimdVec<TF,1> R58{ R57 };
            auto R59 = R54[ 0 ];
            SimdVec<TF,1> R60{ R59 };
            py_3 = R60;
            px_3 = R58;
            py_4 = R56;
            px_4 = R49;
            px_5 = R41;
            py_5 = R39;
            pi_3 = R32;
            pi_4 = R32;
            pi_5 = R30;
            px_6 = R26;
            py_6 = R23;
            pi_2 = R19;
            py_2 = R17;
            px_2 = R15;
            pi_1 = R13;
            py_1 = R11;
            px_1 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_6 = R1;
            continue;
        }
        case_123: {
            // mod=0,1,2,[2,3],[4,5],5,6,7, swith_cuts=0
            auto R0 = pi_7[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_0[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_0[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_0[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_1[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = py_1[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = pi_1[ 0 ];
            SimdVec<TC,1> R13{ R12 };
            auto R14 = px_2[ 0 ];
            SimdVec<TF,1> R15{ R14 };
            auto R16 = py_2[ 0 ];
            SimdVec<TF,1> R17{ R16 };
            auto R18 = pi_2[ 0 ];
            SimdVec<TC,1> R19{ R18 };
            auto R20 = px_4[ 0 ];
            SimdVec<TF,2> R21{ R14, R20 };
            auto R22 = py_7[ 0 ];
            SimdVec<TF,1> R23{ R22 };
            auto R24 = di_2[ 0 ];
            auto R25 = px_7[ 0 ];
            SimdVec<TF,1> R26{ R25 };
            auto R27 = di_4[ 0 ];
            SimdVec<TF,2> R28{ R24, R27 };
            auto R29 = pi_6[ 0 ];
            SimdVec<TC,1> R30{ R29 };
            auto R31 = di_3[ 0 ];
            auto R32 = py_6[ 0 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = di_5[ 0 ];
            SimdVec<TF,2> R35{ R31, R34 };
            auto R36 = R35 - R28;
            auto R37 = R28 / R36;
            auto R38 = px_6[ 0 ];
            SimdVec<TF,1> R39{ R38 };
            auto R40 = px_3[ 0 ];
            auto R41 = pi_5[ 0 ];
            SimdVec<TC,1> R42{ R41 };
            auto R43 = px_5[ 0 ];
            SimdVec<TF,1> R44{ R43 };
            auto R45 = py_4[ 0 ];
            SimdVec<TF,2> R46{ R16, R45 };
            SimdVec<TF,2> R47{ R40, R43 };
            auto R48 = R21 - R47;
            auto R49 = R37 * R48;
            auto R50 = R21 + R49;
            auto R51 = R50[ 1 ];
            SimdVec<TF,1> R52{ R51 };
            auto R53 = py_3[ 0 ];
            auto R54 = R50[ 0 ];
            SimdVec<TF,1> R55{ R54 };
            auto R56 = py_5[ 0 ];
            SimdVec<TF,1> R57{ R56 };
            SimdVec<TC,1> R58{ cut_i[num_cut] };
            SimdVec<TF,2> R59{ R53, R56 };
            auto R60 = R46 - R59;
            auto R61 = R37 * R60;
            auto R62 = R46 + R61;
            auto R63 = R62[ 1 ];
            SimdVec<TF,1> R64{ R63 };
            auto R65 = R62[ 0 ];
            SimdVec<TF,1> R66{ R65 };
            py_3 = R66;
            py_4 = R64;
            pi_3 = R58;
            pi_4 = R58;
            py_5 = R57;
            px_3 = R55;
            px_4 = R52;
            px_5 = R44;
            pi_5 = R42;
            px_6 = R39;
            py_6 = R33;
            pi_6 = R30;
            px_7 = R26;
            py_7 = R23;
            pi_2 = R19;
            py_2 = R17;
            px_2 = R15;
            pi_1 = R13;
            py_1 = R11;
            px_1 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_7 = R1;
            continue;
        }
        case_28: {
            // mod=0,1,[1,2],[3,4],4, swith_cuts=0
            auto R0 = pi_4[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_0[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_0[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_0[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_1[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = py_1[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = pi_1[ 0 ];
            SimdVec<TC,1> R13{ R12 };
            auto R14 = px_3[ 0 ];
            SimdVec<TF,2> R15{ R8, R14 };
            SimdVec<TC,1> R16{ cut_i[num_cut] };
            auto R17 = di_1[ 0 ];
            auto R18 = di_3[ 0 ];
            SimdVec<TF,2> R19{ R17, R18 };
            auto R20 = py_4[ 0 ];
            SimdVec<TF,1> R21{ R20 };
            auto R22 = di_2[ 0 ];
            auto R23 = py_2[ 0 ];
            SimdVec<TF,2> R24{ R23, R20 };
            auto R25 = py_3[ 0 ];
            SimdVec<TF,2> R26{ R10, R25 };
            auto R27 = R26 - R24;
            auto R28 = px_4[ 0 ];
            SimdVec<TF,1> R29{ R28 };
            auto R30 = di_4[ 0 ];
            SimdVec<TF,2> R31{ R22, R30 };
            auto R32 = R31 - R19;
            auto R33 = R19 / R32;
            auto R34 = R33 * R27;
            auto R35 = R26 + R34;
            auto R36 = R35[ 1 ];
            SimdVec<TF,1> R37{ R36 };
            auto R38 = px_2[ 0 ];
            SimdVec<TF,2> R39{ R38, R28 };
            auto R40 = R15 - R39;
            auto R41 = R33 * R40;
            auto R42 = R15 + R41;
            auto R43 = R42[ 1 ];
            SimdVec<TF,1> R44{ R43 };
            auto R45 = R35[ 0 ];
            SimdVec<TF,1> R46{ R45 };
            auto R47 = R42[ 0 ];
            SimdVec<TF,1> R48{ R47 };
            px_2 = R48;
            py_2 = R46;
            px_3 = R44;
            py_3 = R37;
            px_4 = R29;
            py_4 = R21;
            pi_2 = R16;
            pi_3 = R16;
            pi_1 = R13;
            py_1 = R11;
            px_1 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_4 = R1;
            continue;
        }
        case_48: {
            // mod=0,1,[1,2],[3,4],4,5, swith_cuts=0
            auto R0 = pi_5[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_0[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_0[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_0[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_1[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = py_1[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = pi_1[ 0 ];
            SimdVec<TC,1> R13{ R12 };
            auto R14 = px_3[ 0 ];
            SimdVec<TF,2> R15{ R8, R14 };
            auto R16 = py_5[ 0 ];
            SimdVec<TF,1> R17{ R16 };
            auto R18 = di_1[ 0 ];
            auto R19 = px_5[ 0 ];
            SimdVec<TF,1> R20{ R19 };
            auto R21 = di_3[ 0 ];
            SimdVec<TF,2> R22{ R18, R21 };
            auto R23 = pi_4[ 0 ];
            SimdVec<TC,1> R24{ R23 };
            auto R25 = di_2[ 0 ];
            SimdVec<TC,1> R26{ cut_i[num_cut] };
            auto R27 = di_4[ 0 ];
            SimdVec<TF,2> R28{ R25, R27 };
            auto R29 = R28 - R22;
            auto R30 = R22 / R29;
            auto R31 = px_2[ 0 ];
            auto R32 = py_4[ 0 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = px_4[ 0 ];
            SimdVec<TF,1> R35{ R34 };
            auto R36 = py_3[ 0 ];
            SimdVec<TF,2> R37{ R10, R36 };
            SimdVec<TF,2> R38{ R31, R34 };
            auto R39 = R15 - R38;
            auto R40 = R30 * R39;
            auto R41 = R15 + R40;
            auto R42 = R41[ 1 ];
            SimdVec<TF,1> R43{ R42 };
            auto R44 = py_2[ 0 ];
            SimdVec<TF,2> R45{ R44, R32 };
            auto R46 = R37 - R45;
            auto R47 = R30 * R46;
            auto R48 = R37 + R47;
            auto R49 = R48[ 1 ];
            SimdVec<TF,1> R50{ R49 };
            auto R51 = R41[ 0 ];
            SimdVec<TF,1> R52{ R51 };
            auto R53 = R48[ 0 ];
            SimdVec<TF,1> R54{ R53 };
            py_2 = R54;
            px_2 = R52;
            py_3 = R50;
            px_3 = R43;
            px_4 = R35;
            py_4 = R33;
            pi_2 = R26;
            pi_3 = R26;
            pi_4 = R24;
            px_5 = R20;
            py_5 = R17;
            pi_1 = R13;
            py_1 = R11;
            px_1 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_5 = R1;
            continue;
        }
        case_77: {
            // mod=0,1,[1,2],[3,4],4,5,6, swith_cuts=0
            auto R0 = pi_6[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_0[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_0[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_0[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_1[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = py_1[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = pi_1[ 0 ];
            SimdVec<TC,1> R13{ R12 };
            auto R14 = px_4[ 0 ];
            SimdVec<TF,1> R15{ R14 };
            auto R16 = di_1[ 0 ];
            SimdVec<TF,2> R17{ R8, R14 };
            auto R18 = py_6[ 0 ];
            SimdVec<TF,1> R19{ R18 };
            auto R20 = di_4[ 0 ];
            SimdVec<TF,2> R21{ R16, R20 };
            auto R22 = px_6[ 0 ];
            SimdVec<TF,1> R23{ R22 };
            auto R24 = di_2[ 0 ];
            auto R25 = pi_5[ 0 ];
            SimdVec<TC,1> R26{ R25 };
            auto R27 = di_3[ 0 ];
            SimdVec<TF,2> R28{ R24, R27 };
            auto R29 = R28 - R21;
            auto R30 = R21 / R29;
            auto R31 = py_5[ 0 ];
            SimdVec<TF,1> R32{ R31 };
            auto R33 = px_2[ 0 ];
            auto R34 = px_5[ 0 ];
            SimdVec<TF,1> R35{ R34 };
            auto R36 = px_3[ 0 ];
            SimdVec<TF,2> R37{ R33, R36 };
            auto R38 = R17 - R37;
            auto R39 = R30 * R38;
            auto R40 = R17 + R39;
            auto R41 = R40[ 1 ];
            SimdVec<TF,1> R42{ R41 };
            auto R43 = py_4[ 0 ];
            SimdVec<TF,1> R44{ R43 };
            auto R45 = py_2[ 0 ];
            SimdVec<TF,2> R46{ R10, R43 };
            auto R47 = R40[ 0 ];
            SimdVec<TF,1> R48{ R47 };
            auto R49 = py_3[ 0 ];
            SimdVec<TF,2> R50{ R45, R49 };
            auto R51 = R46 - R50;
            auto R52 = R30 * R51;
            auto R53 = R46 + R52;
            auto R54 = R53[ 1 ];
            SimdVec<TF,1> R55{ R54 };
            SimdVec<TC,1> R56{ cut_i[num_cut] };
            auto R57 = pi_4[ 0 ];
            SimdVec<TC,1> R58{ R57 };
            auto R59 = R53[ 0 ];
            SimdVec<TF,1> R60{ R59 };
            py_2 = R60;
            pi_2 = R56;
            pi_4 = R58;
            pi_3 = R56;
            py_3 = R55;
            px_2 = R48;
            py_4 = R44;
            px_3 = R42;
            px_5 = R35;
            py_5 = R32;
            pi_5 = R26;
            px_6 = R23;
            py_6 = R19;
            px_4 = R15;
            pi_1 = R13;
            py_1 = R11;
            px_1 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_6 = R1;
            continue;
        }
        case_13: {
            // mod=0,[0,1],[2,3],3, swith_cuts=1
            auto R0 = pi_3[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_0[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_0[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_0[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_3[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = px_1[ 0 ];
            SimdVec<TF,2> R11{ R8, R10 };
            SimdVec<TC,1> R12{ cut_i[num_cut] };
            auto R13 = di_3[ 0 ];
            auto R14 = di_1[ 0 ];
            SimdVec<TF,2> R15{ R13, R14 };
            auto R16 = py_2[ 0 ];
            SimdVec<TF,2> R17{ R16, R4 };
            auto R18 = py_1[ 0 ];
            auto R19 = py_3[ 0 ];
            SimdVec<TF,1> R20{ R19 };
            auto R21 = di_2[ 0 ];
            SimdVec<TF,2> R22{ R19, R18 };
            auto R23 = R22 - R17;
            auto R24 = px_2[ 0 ];
            SimdVec<TF,2> R25{ R24, R2 };
            auto R26 = R11 - R25;
            auto R27 = di_0[ 0 ];
            SimdVec<TF,2> R28{ R21, R27 };
            auto R29 = R28 - R15;
            auto R30 = R15 / R29;
            auto R31 = R30 * R23;
            auto R32 = R22 + R31;
            auto R33 = R32[ 0 ];
            SimdVec<TF,1> R34{ R33 };
            auto R35 = R30 * R26;
            auto R36 = R11 + R35;
            auto R37 = R36[ 0 ];
            SimdVec<TF,1> R38{ R37 };
            auto R39 = R32[ 1 ];
            SimdVec<TF,1> R40{ R39 };
            auto R41 = R36[ 1 ];
            SimdVec<TF,1> R42{ R41 };
            px_1 = R42;
            py_1 = R40;
            px_2 = R38;
            py_2 = R34;
            py_3 = R20;
            pi_1 = R12;
            pi_2 = R12;
            px_3 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_3 = R1;
            continue;
        }
        case_25: {
            // mod=0,[0,1],[2,3],3,4, swith_cuts=1
            auto R0 = pi_4[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_0[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_0[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_0[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_3[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = px_1[ 0 ];
            SimdVec<TF,2> R11{ R8, R10 };
            auto R12 = py_4[ 0 ];
            SimdVec<TF,1> R13{ R12 };
            auto R14 = di_3[ 0 ];
            auto R15 = px_4[ 0 ];
            SimdVec<TF,1> R16{ R15 };
            auto R17 = di_1[ 0 ];
            SimdVec<TF,2> R18{ R14, R17 };
            auto R19 = pi_3[ 0 ];
            SimdVec<TC,1> R20{ R19 };
            auto R21 = di_2[ 0 ];
            SimdVec<TC,1> R22{ cut_i[num_cut] };
            auto R23 = di_0[ 0 ];
            SimdVec<TF,2> R24{ R21, R23 };
            auto R25 = R24 - R18;
            auto R26 = R18 / R25;
            auto R27 = px_2[ 0 ];
            SimdVec<TF,2> R28{ R27, R2 };
            auto R29 = R11 - R28;
            auto R30 = R26 * R29;
            auto R31 = R11 + R30;
            auto R32 = R31[ 0 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = py_3[ 0 ];
            SimdVec<TF,1> R35{ R34 };
            auto R36 = py_1[ 0 ];
            SimdVec<TF,2> R37{ R34, R36 };
            auto R38 = R31[ 1 ];
            SimdVec<TF,1> R39{ R38 };
            auto R40 = py_2[ 0 ];
            SimdVec<TF,2> R41{ R40, R4 };
            auto R42 = R37 - R41;
            auto R43 = R26 * R42;
            auto R44 = R37 + R43;
            auto R45 = R44[ 0 ];
            SimdVec<TF,1> R46{ R45 };
            auto R47 = R44[ 1 ];
            SimdVec<TF,1> R48{ R47 };
            py_1 = R48;
            py_2 = R46;
            px_1 = R39;
            py_3 = R35;
            px_2 = R33;
            pi_1 = R22;
            pi_2 = R22;
            pi_3 = R20;
            px_4 = R16;
            py_4 = R13;
            px_3 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_4 = R1;
            continue;
        }
        case_45: {
            // mod=0,[0,1],[2,3],3,4,5, swith_cuts=1
            auto R0 = pi_5[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_0[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_0[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_0[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_2[ 0 ];
            auto R9 = py_5[ 0 ];
            SimdVec<TF,1> R10{ R9 };
            auto R11 = px_1[ 0 ];
            SimdVec<TF,2> R12{ R8, R11 };
            auto R13 = px_5[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = di_2[ 0 ];
            auto R16 = pi_4[ 0 ];
            SimdVec<TC,1> R17{ R16 };
            auto R18 = di_1[ 0 ];
            SimdVec<TF,2> R19{ R15, R18 };
            auto R20 = py_4[ 0 ];
            SimdVec<TF,1> R21{ R20 };
            auto R22 = di_3[ 0 ];
            auto R23 = px_4[ 0 ];
            SimdVec<TF,1> R24{ R23 };
            auto R25 = di_0[ 0 ];
            SimdVec<TF,2> R26{ R22, R25 };
            auto R27 = R26 - R19;
            auto R28 = R19 / R27;
            auto R29 = pi_3[ 0 ];
            SimdVec<TC,1> R30{ R29 };
            auto R31 = px_3[ 0 ];
            SimdVec<TF,1> R32{ R31 };
            auto R33 = py_2[ 0 ];
            SimdVec<TF,2> R34{ R31, R2 };
            auto R35 = R12 - R34;
            auto R36 = R28 * R35;
            auto R37 = R12 + R36;
            auto R38 = R37[ 0 ];
            SimdVec<TF,1> R39{ R38 };
            auto R40 = py_1[ 0 ];
            SimdVec<TF,2> R41{ R33, R40 };
            auto R42 = R37[ 1 ];
            SimdVec<TF,1> R43{ R42 };
            auto R44 = py_3[ 0 ];
            SimdVec<TF,1> R45{ R44 };
            SimdVec<TC,1> R46{ cut_i[num_cut] };
            SimdVec<TF,2> R47{ R44, R4 };
            auto R48 = R41 - R47;
            auto R49 = R28 * R48;
            auto R50 = R41 + R49;
            auto R51 = R50[ 0 ];
            SimdVec<TF,1> R52{ R51 };
            auto R53 = R50[ 1 ];
            SimdVec<TF,1> R54{ R53 };
            py_1 = R54;
            py_2 = R52;
            pi_1 = R46;
            pi_2 = R46;
            py_3 = R45;
            px_1 = R43;
            px_2 = R39;
            px_3 = R32;
            pi_3 = R30;
            px_4 = R24;
            py_4 = R21;
            pi_4 = R17;
            px_5 = R14;
            py_5 = R10;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_5 = R1;
            continue;
        }
        case_202: {
            // mod=1,2,3,4,5,6,7,[7,8],[0,1], swith_cuts=0
            SimdVec<TC,1> R0{ cut_i[num_cut] };
            auto R1 = px_1[ 0 ];
            SimdVec<TF,1> R2{ R1 };
            auto R3 = py_1[ 0 ];
            SimdVec<TF,1> R4{ R3 };
            auto R5 = pi_1[ 0 ];
            SimdVec<TC,1> R6{ R5 };
            auto R7 = px_2[ 0 ];
            SimdVec<TF,1> R8{ R7 };
            auto R9 = py_2[ 0 ];
            SimdVec<TF,1> R10{ R9 };
            auto R11 = pi_2[ 0 ];
            SimdVec<TC,1> R12{ R11 };
            auto R13 = px_3[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = py_3[ 0 ];
            SimdVec<TF,1> R16{ R15 };
            auto R17 = pi_3[ 0 ];
            SimdVec<TC,1> R18{ R17 };
            auto R19 = px_4[ 0 ];
            SimdVec<TF,1> R20{ R19 };
            auto R21 = py_4[ 0 ];
            SimdVec<TF,1> R22{ R21 };
            auto R23 = pi_4[ 0 ];
            SimdVec<TC,1> R24{ R23 };
            auto R25 = px_5[ 0 ];
            SimdVec<TF,1> R26{ R25 };
            auto R27 = py_5[ 0 ];
            SimdVec<TF,1> R28{ R27 };
            auto R29 = pi_5[ 0 ];
            SimdVec<TC,1> R30{ R29 };
            auto R31 = px_6[ 0 ];
            SimdVec<TF,1> R32{ R31 };
            auto R33 = py_6[ 0 ];
            SimdVec<TF,1> R34{ R33 };
            auto R35 = pi_6[ 0 ];
            SimdVec<TC,1> R36{ R35 };
            auto R37 = px_7[ 0 ];
            SimdVec<TF,1> R38{ R37 };
            auto R39 = py_7[ 0 ];
            SimdVec<TF,1> R40{ R39 };
            auto R41 = pi_7[ 0 ];
            SimdVec<TC,1> R42{ R41 };
            auto R43 = px_8[ 0 ];
            SimdVec<TF,2> R44{ R43, R1 };
            auto R45 = di_8[ 0 ];
            auto R46 = py_0[ 0 ];
            SimdVec<TF,2> R47{ R39, R46 };
            auto R48 = py_8[ 0 ];
            SimdVec<TF,2> R49{ R48, R3 };
            auto R50 = R49 - R47;
            auto R51 = px_0[ 0 ];
            SimdVec<TF,2> R52{ R37, R51 };
            auto R53 = R44 - R52;
            auto R54 = di_0[ 0 ];
            auto R55 = di_7[ 0 ];
            SimdVec<TF,2> R56{ R55, R54 };
            auto R57 = di_1[ 0 ];
            SimdVec<TF,2> R58{ R45, R57 };
            auto R59 = R56 - R58;
            auto R60 = R58 / R59;
            auto R61 = R60 * R50;
            auto R62 = R49 + R61;
            auto R63 = R62[ 1 ];
            SimdVec<TF,1> R64{ R63 };
            auto R65 = R60 * R53;
            auto R66 = R44 + R65;
            auto R67 = R66[ 1 ];
            SimdVec<TF,1> R68{ R67 };
            auto R69 = R62[ 0 ];
            SimdVec<TF,1> R70{ R69 };
            auto R71 = R66[ 0 ];
            SimdVec<TF,1> R72{ R71 };
            px_7 = R72;
            py_7 = R70;
            px_8 = R68;
            py_8 = R64;
            pi_7 = R0;
            pi_6 = R42;
            py_6 = R40;
            px_6 = R38;
            pi_5 = R36;
            py_5 = R34;
            px_5 = R32;
            pi_4 = R30;
            py_4 = R28;
            px_4 = R26;
            pi_3 = R24;
            py_3 = R22;
            px_3 = R20;
            pi_2 = R18;
            py_2 = R16;
            px_2 = R14;
            pi_1 = R12;
            py_1 = R10;
            px_1 = R8;
            pi_0 = R6;
            py_0 = R4;
            px_0 = R2;
            pi_8 = R0;
            continue;
        }
        case_141: {
            // mod=1,2,3,4,5,6,[6,7],[0,1], swith_cuts=0
            SimdVec<TC,1> R0{ cut_i[num_cut] };
            auto R1 = px_1[ 0 ];
            SimdVec<TF,1> R2{ R1 };
            auto R3 = py_1[ 0 ];
            SimdVec<TF,1> R4{ R3 };
            auto R5 = pi_1[ 0 ];
            SimdVec<TC,1> R6{ R5 };
            auto R7 = px_2[ 0 ];
            SimdVec<TF,1> R8{ R7 };
            auto R9 = py_2[ 0 ];
            SimdVec<TF,1> R10{ R9 };
            auto R11 = pi_2[ 0 ];
            SimdVec<TC,1> R12{ R11 };
            auto R13 = px_3[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = py_3[ 0 ];
            SimdVec<TF,1> R16{ R15 };
            auto R17 = pi_3[ 0 ];
            SimdVec<TC,1> R18{ R17 };
            auto R19 = px_4[ 0 ];
            SimdVec<TF,1> R20{ R19 };
            auto R21 = py_4[ 0 ];
            SimdVec<TF,1> R22{ R21 };
            auto R23 = pi_4[ 0 ];
            SimdVec<TC,1> R24{ R23 };
            auto R25 = px_5[ 0 ];
            SimdVec<TF,1> R26{ R25 };
            auto R27 = py_5[ 0 ];
            SimdVec<TF,1> R28{ R27 };
            auto R29 = pi_5[ 0 ];
            SimdVec<TC,1> R30{ R29 };
            auto R31 = px_6[ 0 ];
            SimdVec<TF,1> R32{ R31 };
            auto R33 = py_6[ 0 ];
            SimdVec<TF,1> R34{ R33 };
            auto R35 = pi_6[ 0 ];
            SimdVec<TC,1> R36{ R35 };
            auto R37 = px_0[ 0 ];
            SimdVec<TF,2> R38{ R31, R37 };
            auto R39 = di_6[ 0 ];
            auto R40 = py_7[ 0 ];
            SimdVec<TF,2> R41{ R40, R3 };
            auto R42 = py_0[ 0 ];
            SimdVec<TF,2> R43{ R33, R42 };
            auto R44 = R43 - R41;
            auto R45 = px_7[ 0 ];
            SimdVec<TF,2> R46{ R45, R1 };
            auto R47 = R38 - R46;
            auto R48 = di_1[ 0 ];
            auto R49 = di_7[ 0 ];
            SimdVec<TF,2> R50{ R49, R48 };
            auto R51 = di_0[ 0 ];
            SimdVec<TF,2> R52{ R39, R51 };
            auto R53 = R50 - R52;
            auto R54 = R52 / R53;
            auto R55 = R54 * R44;
            auto R56 = R43 + R55;
            auto R57 = R56[ 1 ];
            SimdVec<TF,1> R58{ R57 };
            auto R59 = R54 * R47;
            auto R60 = R38 + R59;
            auto R61 = R60[ 1 ];
            SimdVec<TF,1> R62{ R61 };
            auto R63 = R56[ 0 ];
            SimdVec<TF,1> R64{ R63 };
            auto R65 = R60[ 0 ];
            SimdVec<TF,1> R66{ R65 };
            px_6 = R66;
            py_6 = R64;
            px_7 = R62;
            py_7 = R58;
            pi_6 = R0;
            pi_5 = R36;
            py_5 = R34;
            px_5 = R32;
            pi_4 = R30;
            py_4 = R28;
            px_4 = R26;
            pi_3 = R24;
            py_3 = R22;
            px_3 = R20;
            pi_2 = R18;
            py_2 = R16;
            px_2 = R14;
            pi_1 = R12;
            py_1 = R10;
            px_1 = R8;
            pi_0 = R6;
            py_0 = R4;
            px_0 = R2;
            pi_7 = R0;
            continue;
        }
        case_92: {
            // mod=1,2,3,4,5,[5,6],[0,1], swith_cuts=0
            SimdVec<TC,1> R0{ cut_i[num_cut] };
            auto R1 = px_1[ 0 ];
            SimdVec<TF,1> R2{ R1 };
            auto R3 = py_1[ 0 ];
            SimdVec<TF,1> R4{ R3 };
            auto R5 = pi_1[ 0 ];
            SimdVec<TC,1> R6{ R5 };
            auto R7 = px_2[ 0 ];
            SimdVec<TF,1> R8{ R7 };
            auto R9 = py_2[ 0 ];
            SimdVec<TF,1> R10{ R9 };
            auto R11 = pi_2[ 0 ];
            SimdVec<TC,1> R12{ R11 };
            auto R13 = px_3[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = py_3[ 0 ];
            SimdVec<TF,1> R16{ R15 };
            auto R17 = pi_3[ 0 ];
            SimdVec<TC,1> R18{ R17 };
            auto R19 = px_4[ 0 ];
            SimdVec<TF,1> R20{ R19 };
            auto R21 = py_4[ 0 ];
            SimdVec<TF,1> R22{ R21 };
            auto R23 = pi_4[ 0 ];
            SimdVec<TC,1> R24{ R23 };
            auto R25 = px_5[ 0 ];
            SimdVec<TF,1> R26{ R25 };
            auto R27 = py_5[ 0 ];
            SimdVec<TF,1> R28{ R27 };
            auto R29 = pi_5[ 0 ];
            SimdVec<TC,1> R30{ R29 };
            auto R31 = px_0[ 0 ];
            SimdVec<TF,2> R32{ R25, R31 };
            auto R33 = di_5[ 0 ];
            auto R34 = py_6[ 0 ];
            SimdVec<TF,2> R35{ R34, R3 };
            auto R36 = py_0[ 0 ];
            SimdVec<TF,2> R37{ R27, R36 };
            auto R38 = R37 - R35;
            auto R39 = px_6[ 0 ];
            SimdVec<TF,2> R40{ R39, R1 };
            auto R41 = R32 - R40;
            auto R42 = di_1[ 0 ];
            auto R43 = di_6[ 0 ];
            SimdVec<TF,2> R44{ R43, R42 };
            auto R45 = di_0[ 0 ];
            SimdVec<TF,2> R46{ R33, R45 };
            auto R47 = R44 - R46;
            auto R48 = R46 / R47;
            auto R49 = R48 * R38;
            auto R50 = R37 + R49;
            auto R51 = R50[ 1 ];
            SimdVec<TF,1> R52{ R51 };
            auto R53 = R48 * R41;
            auto R54 = R32 + R53;
            auto R55 = R54[ 1 ];
            SimdVec<TF,1> R56{ R55 };
            auto R57 = R50[ 0 ];
            SimdVec<TF,1> R58{ R57 };
            auto R59 = R54[ 0 ];
            SimdVec<TF,1> R60{ R59 };
            px_5 = R60;
            py_5 = R58;
            px_6 = R56;
            py_6 = R52;
            pi_5 = R0;
            pi_4 = R30;
            py_4 = R28;
            px_4 = R26;
            pi_3 = R24;
            py_3 = R22;
            px_3 = R20;
            pi_2 = R18;
            py_2 = R16;
            px_2 = R14;
            pi_1 = R12;
            py_1 = R10;
            px_1 = R8;
            pi_0 = R6;
            py_0 = R4;
            px_0 = R2;
            pi_6 = R0;
            continue;
        }
        case_194: {
            // mod=1,2,3,4,5,[5,6],[7,8],8,0, swith_cuts=1
            auto R0 = pi_0[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_1[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_1[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_1[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_2[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = py_2[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = pi_2[ 0 ];
            SimdVec<TC,1> R13{ R12 };
            auto R14 = px_3[ 0 ];
            SimdVec<TF,1> R15{ R14 };
            auto R16 = py_3[ 0 ];
            SimdVec<TF,1> R17{ R16 };
            auto R18 = pi_3[ 0 ];
            SimdVec<TC,1> R19{ R18 };
            auto R20 = px_4[ 0 ];
            SimdVec<TF,1> R21{ R20 };
            auto R22 = py_4[ 0 ];
            SimdVec<TF,1> R23{ R22 };
            auto R24 = pi_4[ 0 ];
            SimdVec<TC,1> R25{ R24 };
            auto R26 = px_5[ 0 ];
            SimdVec<TF,1> R27{ R26 };
            auto R28 = py_5[ 0 ];
            SimdVec<TF,1> R29{ R28 };
            auto R30 = pi_5[ 0 ];
            SimdVec<TC,1> R31{ R30 };
            auto R32 = px_7[ 0 ];
            SimdVec<TF,2> R33{ R32, R26 };
            auto R34 = py_0[ 0 ];
            SimdVec<TF,1> R35{ R34 };
            auto R36 = di_7[ 0 ];
            auto R37 = px_0[ 0 ];
            SimdVec<TF,1> R38{ R37 };
            auto R39 = di_5[ 0 ];
            SimdVec<TF,2> R40{ R36, R39 };
            auto R41 = pi_8[ 0 ];
            SimdVec<TC,1> R42{ R41 };
            auto R43 = di_8[ 0 ];
            SimdVec<TC,1> R44{ cut_i[num_cut] };
            auto R45 = di_6[ 0 ];
            SimdVec<TF,2> R46{ R43, R45 };
            auto R47 = R46 - R40;
            auto R48 = R40 / R47;
            auto R49 = px_8[ 0 ];
            SimdVec<TF,1> R50{ R49 };
            auto R51 = px_6[ 0 ];
            SimdVec<TF,2> R52{ R49, R51 };
            auto R53 = R33 - R52;
            auto R54 = R48 * R53;
            auto R55 = R33 + R54;
            auto R56 = R55[ 0 ];
            SimdVec<TF,1> R57{ R56 };
            auto R58 = py_7[ 0 ];
            SimdVec<TF,2> R59{ R58, R28 };
            auto R60 = R55[ 1 ];
            SimdVec<TF,1> R61{ R60 };
            auto R62 = py_8[ 0 ];
            SimdVec<TF,1> R63{ R62 };
            auto R64 = py_6[ 0 ];
            SimdVec<TF,2> R65{ R62, R64 };
            auto R66 = R59 - R65;
            auto R67 = R48 * R66;
            auto R68 = R59 + R67;
            auto R69 = R68[ 0 ];
            SimdVec<TF,1> R70{ R69 };
            auto R71 = R68[ 1 ];
            SimdVec<TF,1> R72{ R71 };
            py_5 = R72;
            py_6 = R70;
            py_7 = R63;
            px_5 = R61;
            px_6 = R57;
            px_7 = R50;
            pi_5 = R44;
            pi_6 = R44;
            pi_7 = R42;
            px_8 = R38;
            py_8 = R35;
            pi_4 = R31;
            py_4 = R29;
            px_4 = R27;
            pi_3 = R25;
            py_3 = R23;
            px_3 = R21;
            pi_2 = R19;
            py_2 = R17;
            px_2 = R15;
            pi_1 = R13;
            py_1 = R11;
            px_1 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_8 = R1;
            continue;
        }
        case_32: {
            // mod=1,2,3,[3,4],[0,1], swith_cuts=0
            SimdVec<TC,1> R0{ cut_i[num_cut] };
            auto R1 = px_1[ 0 ];
            SimdVec<TF,1> R2{ R1 };
            auto R3 = py_1[ 0 ];
            SimdVec<TF,1> R4{ R3 };
            auto R5 = pi_1[ 0 ];
            SimdVec<TC,1> R6{ R5 };
            auto R7 = px_2[ 0 ];
            SimdVec<TF,1> R8{ R7 };
            auto R9 = py_2[ 0 ];
            SimdVec<TF,1> R10{ R9 };
            auto R11 = pi_2[ 0 ];
            SimdVec<TC,1> R12{ R11 };
            auto R13 = px_3[ 0 ];
            SimdVec<TF,2> R14{ R13, R1 };
            SimdVec<TF,1> R15{ R13 };
            auto R16 = py_3[ 0 ];
            SimdVec<TF,2> R17{ R16, R3 };
            SimdVec<TF,1> R18{ R16 };
            auto R19 = pi_3[ 0 ];
            SimdVec<TC,1> R20{ R19 };
            auto R21 = di_3[ 0 ];
            auto R22 = di_1[ 0 ];
            SimdVec<TF,2> R23{ R21, R22 };
            auto R24 = py_0[ 0 ];
            auto R25 = py_4[ 0 ];
            SimdVec<TF,2> R26{ R25, R24 };
            auto R27 = R17 - R26;
            auto R28 = px_0[ 0 ];
            auto R29 = px_4[ 0 ];
            SimdVec<TF,2> R30{ R29, R28 };
            auto R31 = R14 - R30;
            auto R32 = di_0[ 0 ];
            auto R33 = di_4[ 0 ];
            SimdVec<TF,2> R34{ R33, R32 };
            auto R35 = R34 - R23;
            auto R36 = R23 / R35;
            auto R37 = R36 * R27;
            auto R38 = R17 + R37;
            auto R39 = R38[ 1 ];
            SimdVec<TF,1> R40{ R39 };
            auto R41 = R36 * R31;
            auto R42 = R14 + R41;
            auto R43 = R42[ 1 ];
            SimdVec<TF,1> R44{ R43 };
            auto R45 = R38[ 0 ];
            SimdVec<TF,1> R46{ R45 };
            auto R47 = R42[ 0 ];
            SimdVec<TF,1> R48{ R47 };
            px_3 = R48;
            py_3 = R46;
            px_4 = R44;
            py_4 = R40;
            pi_3 = R0;
            pi_2 = R20;
            py_2 = R18;
            px_2 = R15;
            pi_1 = R12;
            py_1 = R10;
            px_1 = R8;
            pi_0 = R6;
            py_0 = R4;
            px_0 = R2;
            pi_4 = R0;
            continue;
        }
        case_52: {
            // mod=1,2,[2,3],[4,5],5,0, swith_cuts=0
            auto R0 = pi_0[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_1[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_1[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_1[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_2[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = py_2[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = pi_2[ 0 ];
            SimdVec<TC,1> R13{ R12 };
            auto R14 = px_4[ 0 ];
            SimdVec<TF,2> R15{ R8, R14 };
            auto R16 = py_0[ 0 ];
            SimdVec<TF,1> R17{ R16 };
            auto R18 = di_2[ 0 ];
            auto R19 = px_0[ 0 ];
            SimdVec<TF,1> R20{ R19 };
            auto R21 = di_4[ 0 ];
            SimdVec<TF,2> R22{ R18, R21 };
            auto R23 = pi_5[ 0 ];
            SimdVec<TC,1> R24{ R23 };
            auto R25 = di_3[ 0 ];
            SimdVec<TC,1> R26{ cut_i[num_cut] };
            auto R27 = di_5[ 0 ];
            SimdVec<TF,2> R28{ R25, R27 };
            auto R29 = R28 - R22;
            auto R30 = R22 / R29;
            auto R31 = px_3[ 0 ];
            auto R32 = py_5[ 0 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = px_5[ 0 ];
            SimdVec<TF,1> R35{ R34 };
            auto R36 = py_4[ 0 ];
            SimdVec<TF,2> R37{ R10, R36 };
            SimdVec<TF,2> R38{ R31, R34 };
            auto R39 = R15 - R38;
            auto R40 = R30 * R39;
            auto R41 = R15 + R40;
            auto R42 = R41[ 1 ];
            SimdVec<TF,1> R43{ R42 };
            auto R44 = py_3[ 0 ];
            SimdVec<TF,2> R45{ R44, R32 };
            auto R46 = R37 - R45;
            auto R47 = R30 * R46;
            auto R48 = R37 + R47;
            auto R49 = R48[ 1 ];
            SimdVec<TF,1> R50{ R49 };
            auto R51 = R41[ 0 ];
            SimdVec<TF,1> R52{ R51 };
            auto R53 = R48[ 0 ];
            SimdVec<TF,1> R54{ R53 };
            py_2 = R54;
            px_2 = R52;
            py_3 = R50;
            px_3 = R43;
            px_4 = R35;
            py_4 = R33;
            pi_2 = R26;
            pi_3 = R26;
            pi_4 = R24;
            px_5 = R20;
            py_5 = R17;
            pi_1 = R13;
            py_1 = R11;
            px_1 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_5 = R1;
            continue;
        }
        case_176: {
            // mod=1,2,[2,3],[4,5],5,6,7,8,0, swith_cuts=0
            auto R0 = pi_0[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_1[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_1[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_1[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_2[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = py_2[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = pi_2[ 0 ];
            SimdVec<TC,1> R13{ R12 };
            auto R14 = px_3[ 0 ];
            auto R15 = py_0[ 0 ];
            SimdVec<TF,1> R16{ R15 };
            auto R17 = px_5[ 0 ];
            SimdVec<TF,1> R18{ R17 };
            auto R19 = di_3[ 0 ];
            SimdVec<TF,2> R20{ R14, R17 };
            auto R21 = px_0[ 0 ];
            SimdVec<TF,1> R22{ R21 };
            auto R23 = di_5[ 0 ];
            SimdVec<TF,2> R24{ R19, R23 };
            auto R25 = pi_8[ 0 ];
            SimdVec<TC,1> R26{ R25 };
            auto R27 = di_2[ 0 ];
            auto R28 = py_8[ 0 ];
            SimdVec<TF,1> R29{ R28 };
            auto R30 = di_4[ 0 ];
            SimdVec<TF,2> R31{ R27, R30 };
            auto R32 = R31 - R24;
            auto R33 = R24 / R32;
            auto R34 = px_8[ 0 ];
            SimdVec<TF,1> R35{ R34 };
            auto R36 = px_4[ 0 ];
            SimdVec<TF,2> R37{ R8, R36 };
            auto R38 = R20 - R37;
            auto R39 = R33 * R38;
            auto R40 = R20 + R39;
            auto R41 = R40[ 1 ];
            SimdVec<TF,1> R42{ R41 };
            auto R43 = py_3[ 0 ];
            auto R44 = R40[ 0 ];
            SimdVec<TF,1> R45{ R44 };
            auto R46 = py_5[ 0 ];
            SimdVec<TF,1> R47{ R46 };
            auto R48 = py_4[ 0 ];
            SimdVec<TF,2> R49{ R10, R48 };
            SimdVec<TF,2> R50{ R43, R46 };
            auto R51 = R50 - R49;
            auto R52 = R33 * R51;
            auto R53 = R50 + R52;
            auto R54 = R53[ 1 ];
            SimdVec<TF,1> R55{ R54 };
            SimdVec<TC,1> R56{ cut_i[num_cut] };
            auto R57 = pi_5[ 0 ];
            SimdVec<TC,1> R58{ R57 };
            auto R59 = px_6[ 0 ];
            SimdVec<TF,1> R60{ R59 };
            auto R61 = py_6[ 0 ];
            SimdVec<TF,1> R62{ R61 };
            auto R63 = pi_6[ 0 ];
            SimdVec<TC,1> R64{ R63 };
            auto R65 = px_7[ 0 ];
            SimdVec<TF,1> R66{ R65 };
            auto R67 = py_7[ 0 ];
            SimdVec<TF,1> R68{ R67 };
            auto R69 = pi_7[ 0 ];
            SimdVec<TC,1> R70{ R69 };
            auto R71 = R53[ 0 ];
            SimdVec<TF,1> R72{ R71 };
            py_2 = R72;
            pi_2 = R56;
            pi_6 = R70;
            py_6 = R68;
            px_6 = R66;
            pi_5 = R64;
            py_5 = R62;
            px_5 = R60;
            pi_4 = R58;
            pi_3 = R56;
            py_3 = R55;
            py_4 = R47;
            px_2 = R45;
            px_3 = R42;
            px_7 = R35;
            py_7 = R29;
            pi_7 = R26;
            px_8 = R22;
            px_4 = R18;
            py_8 = R16;
            pi_1 = R13;
            py_1 = R11;
            px_1 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_8 = R1;
            continue;
        }
        case_119: {
            // mod=1,[1,2],[3,4],4,5,6,7,0, swith_cuts=0
            auto R0 = pi_0[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_1[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_1[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_1[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_3[ 0 ];
            SimdVec<TF,2> R9{ R2, R8 };
            auto R10 = py_0[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = di_1[ 0 ];
            auto R13 = px_0[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = di_3[ 0 ];
            SimdVec<TF,2> R16{ R12, R15 };
            auto R17 = pi_7[ 0 ];
            SimdVec<TC,1> R18{ R17 };
            auto R19 = di_2[ 0 ];
            auto R20 = py_7[ 0 ];
            SimdVec<TF,1> R21{ R20 };
            auto R22 = di_4[ 0 ];
            SimdVec<TF,2> R23{ R19, R22 };
            auto R24 = R23 - R16;
            auto R25 = R16 / R24;
            auto R26 = px_7[ 0 ];
            SimdVec<TF,1> R27{ R26 };
            auto R28 = px_2[ 0 ];
            auto R29 = pi_6[ 0 ];
            SimdVec<TC,1> R30{ R29 };
            auto R31 = px_4[ 0 ];
            SimdVec<TF,1> R32{ R31 };
            auto R33 = py_3[ 0 ];
            SimdVec<TF,2> R34{ R4, R33 };
            SimdVec<TF,2> R35{ R28, R31 };
            auto R36 = R9 - R35;
            auto R37 = R25 * R36;
            auto R38 = R9 + R37;
            auto R39 = R38[ 1 ];
            SimdVec<TF,1> R40{ R39 };
            auto R41 = py_2[ 0 ];
            auto R42 = R38[ 0 ];
            SimdVec<TF,1> R43{ R42 };
            auto R44 = py_4[ 0 ];
            SimdVec<TF,1> R45{ R44 };
            SimdVec<TC,1> R46{ cut_i[num_cut] };
            auto R47 = pi_4[ 0 ];
            SimdVec<TC,1> R48{ R47 };
            auto R49 = px_5[ 0 ];
            SimdVec<TF,1> R50{ R49 };
            auto R51 = py_5[ 0 ];
            SimdVec<TF,1> R52{ R51 };
            auto R53 = pi_5[ 0 ];
            SimdVec<TC,1> R54{ R53 };
            auto R55 = px_6[ 0 ];
            SimdVec<TF,1> R56{ R55 };
            auto R57 = py_6[ 0 ];
            SimdVec<TF,1> R58{ R57 };
            SimdVec<TF,2> R59{ R41, R44 };
            auto R60 = R34 - R59;
            auto R61 = R25 * R60;
            auto R62 = R34 + R61;
            auto R63 = R62[ 1 ];
            SimdVec<TF,1> R64{ R63 };
            auto R65 = R62[ 0 ];
            SimdVec<TF,1> R66{ R65 };
            py_1 = R66;
            py_2 = R64;
            pi_1 = R46;
            py_5 = R58;
            px_5 = R56;
            pi_4 = R54;
            py_4 = R52;
            px_4 = R50;
            pi_3 = R48;
            pi_2 = R46;
            py_3 = R45;
            px_1 = R43;
            px_2 = R40;
            px_3 = R32;
            pi_5 = R30;
            px_6 = R27;
            py_6 = R21;
            pi_6 = R18;
            px_7 = R14;
            py_7 = R11;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_7 = R1;
            continue;
        }
        case_167: {
            // mod=2,3,4,5,6,7,8,[8,0],[1,2], swith_cuts=1
            SimdVec<TC,1> R0{ cut_i[num_cut] };
            auto R1 = px_2[ 0 ];
            SimdVec<TF,1> R2{ R1 };
            auto R3 = py_2[ 0 ];
            SimdVec<TF,1> R4{ R3 };
            auto R5 = pi_2[ 0 ];
            SimdVec<TC,1> R6{ R5 };
            auto R7 = px_3[ 0 ];
            SimdVec<TF,1> R8{ R7 };
            auto R9 = py_3[ 0 ];
            SimdVec<TF,1> R10{ R9 };
            auto R11 = pi_3[ 0 ];
            SimdVec<TC,1> R12{ R11 };
            auto R13 = px_4[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = py_4[ 0 ];
            SimdVec<TF,1> R16{ R15 };
            auto R17 = pi_4[ 0 ];
            SimdVec<TC,1> R18{ R17 };
            auto R19 = px_5[ 0 ];
            SimdVec<TF,1> R20{ R19 };
            auto R21 = py_5[ 0 ];
            SimdVec<TF,1> R22{ R21 };
            auto R23 = pi_5[ 0 ];
            SimdVec<TC,1> R24{ R23 };
            auto R25 = px_6[ 0 ];
            SimdVec<TF,1> R26{ R25 };
            auto R27 = py_6[ 0 ];
            SimdVec<TF,1> R28{ R27 };
            auto R29 = pi_6[ 0 ];
            SimdVec<TC,1> R30{ R29 };
            auto R31 = px_7[ 0 ];
            SimdVec<TF,1> R32{ R31 };
            auto R33 = py_7[ 0 ];
            SimdVec<TF,1> R34{ R33 };
            auto R35 = pi_7[ 0 ];
            SimdVec<TC,1> R36{ R35 };
            auto R37 = px_8[ 0 ];
            SimdVec<TF,2> R38{ R1, R37 };
            SimdVec<TF,1> R39{ R37 };
            auto R40 = py_8[ 0 ];
            SimdVec<TF,2> R41{ R3, R40 };
            SimdVec<TF,1> R42{ R40 };
            auto R43 = pi_8[ 0 ];
            SimdVec<TC,1> R44{ R43 };
            auto R45 = px_1[ 0 ];
            auto R46 = px_0[ 0 ];
            SimdVec<TF,2> R47{ R45, R46 };
            auto R48 = R47 - R38;
            auto R49 = py_0[ 0 ];
            auto R50 = py_1[ 0 ];
            SimdVec<TF,2> R51{ R50, R49 };
            auto R52 = R51 - R41;
            auto R53 = di_8[ 0 ];
            auto R54 = di_2[ 0 ];
            SimdVec<TF,2> R55{ R54, R53 };
            auto R56 = di_0[ 0 ];
            auto R57 = di_1[ 0 ];
            SimdVec<TF,2> R58{ R57, R56 };
            auto R59 = R55 - R58;
            auto R60 = R58 / R59;
            auto R61 = R60 * R52;
            auto R62 = R51 + R61;
            auto R63 = R62[ 0 ];
            SimdVec<TF,1> R64{ R63 };
            auto R65 = R60 * R48;
            auto R66 = R47 + R65;
            auto R67 = R66[ 0 ];
            SimdVec<TF,1> R68{ R67 };
            auto R69 = R62[ 1 ];
            SimdVec<TF,1> R70{ R69 };
            auto R71 = R66[ 1 ];
            SimdVec<TF,1> R72{ R71 };
            px_7 = R72;
            py_7 = R70;
            px_8 = R68;
            py_8 = R64;
            pi_7 = R0;
            pi_6 = R44;
            py_6 = R42;
            px_6 = R39;
            pi_5 = R36;
            py_5 = R34;
            px_5 = R32;
            pi_4 = R30;
            py_4 = R28;
            px_4 = R26;
            pi_3 = R24;
            py_3 = R22;
            px_3 = R20;
            pi_2 = R18;
            py_2 = R16;
            px_2 = R14;
            pi_1 = R12;
            py_1 = R10;
            px_1 = R8;
            pi_0 = R6;
            py_0 = R4;
            px_0 = R2;
            pi_8 = R0;
            continue;
        }
        case_23: {
            // mod=2,3,4,[4,0],[1,2], swith_cuts=1
            SimdVec<TC,1> R0{ cut_i[num_cut] };
            auto R1 = px_2[ 0 ];
            SimdVec<TF,1> R2{ R1 };
            auto R3 = py_2[ 0 ];
            SimdVec<TF,1> R4{ R3 };
            auto R5 = pi_2[ 0 ];
            SimdVec<TC,1> R6{ R5 };
            auto R7 = px_3[ 0 ];
            SimdVec<TF,1> R8{ R7 };
            auto R9 = py_3[ 0 ];
            SimdVec<TF,1> R10{ R9 };
            auto R11 = pi_3[ 0 ];
            SimdVec<TC,1> R12{ R11 };
            auto R13 = px_4[ 0 ];
            SimdVec<TF,2> R14{ R1, R13 };
            SimdVec<TF,1> R15{ R13 };
            auto R16 = py_4[ 0 ];
            SimdVec<TF,2> R17{ R3, R16 };
            SimdVec<TF,1> R18{ R16 };
            auto R19 = pi_4[ 0 ];
            SimdVec<TC,1> R20{ R19 };
            auto R21 = px_1[ 0 ];
            auto R22 = px_0[ 0 ];
            SimdVec<TF,2> R23{ R21, R22 };
            auto R24 = R23 - R14;
            auto R25 = py_0[ 0 ];
            auto R26 = py_1[ 0 ];
            SimdVec<TF,2> R27{ R26, R25 };
            auto R28 = R27 - R17;
            auto R29 = di_4[ 0 ];
            auto R30 = di_2[ 0 ];
            SimdVec<TF,2> R31{ R30, R29 };
            auto R32 = di_0[ 0 ];
            auto R33 = di_1[ 0 ];
            SimdVec<TF,2> R34{ R33, R32 };
            auto R35 = R31 - R34;
            auto R36 = R34 / R35;
            auto R37 = R36 * R28;
            auto R38 = R27 + R37;
            auto R39 = R38[ 0 ];
            SimdVec<TF,1> R40{ R39 };
            auto R41 = R36 * R24;
            auto R42 = R23 + R41;
            auto R43 = R42[ 0 ];
            SimdVec<TF,1> R44{ R43 };
            auto R45 = R38[ 1 ];
            SimdVec<TF,1> R46{ R45 };
            auto R47 = R42[ 1 ];
            SimdVec<TF,1> R48{ R47 };
            px_3 = R48;
            py_3 = R46;
            px_4 = R44;
            py_4 = R40;
            pi_3 = R0;
            pi_2 = R20;
            py_2 = R18;
            px_2 = R15;
            pi_1 = R12;
            py_1 = R10;
            px_1 = R8;
            pi_0 = R6;
            py_0 = R4;
            px_0 = R2;
            pi_4 = R0;
            continue;
        }
        case_43: {
            // mod=3,4,5,[5,0],[1,2],2, swith_cuts=1
            auto R0 = pi_2[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_3[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_3[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_3[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_4[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = py_4[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = pi_4[ 0 ];
            SimdVec<TC,1> R13{ R12 };
            auto R14 = px_5[ 0 ];
            SimdVec<TF,1> R15{ R14 };
            auto R16 = py_5[ 0 ];
            SimdVec<TF,1> R17{ R16 };
            auto R18 = pi_5[ 0 ];
            SimdVec<TC,1> R19{ R18 };
            auto R20 = px_1[ 0 ];
            SimdVec<TF,2> R21{ R20, R14 };
            SimdVec<TC,1> R22{ cut_i[num_cut] };
            auto R23 = di_1[ 0 ];
            auto R24 = di_5[ 0 ];
            SimdVec<TF,2> R25{ R23, R24 };
            auto R26 = py_0[ 0 ];
            auto R27 = py_2[ 0 ];
            SimdVec<TF,1> R28{ R27 };
            auto R29 = di_2[ 0 ];
            SimdVec<TF,2> R30{ R27, R26 };
            auto R31 = py_1[ 0 ];
            SimdVec<TF,2> R32{ R31, R16 };
            auto R33 = R32 - R30;
            auto R34 = px_0[ 0 ];
            auto R35 = px_2[ 0 ];
            SimdVec<TF,1> R36{ R35 };
            auto R37 = di_0[ 0 ];
            SimdVec<TF,2> R38{ R29, R37 };
            auto R39 = R38 - R25;
            auto R40 = R25 / R39;
            auto R41 = R40 * R33;
            auto R42 = R32 + R41;
            auto R43 = R42[ 0 ];
            SimdVec<TF,1> R44{ R43 };
            SimdVec<TF,2> R45{ R35, R34 };
            auto R46 = R21 - R45;
            auto R47 = R40 * R46;
            auto R48 = R21 + R47;
            auto R49 = R48[ 0 ];
            SimdVec<TF,1> R50{ R49 };
            auto R51 = R42[ 1 ];
            SimdVec<TF,1> R52{ R51 };
            auto R53 = R48[ 1 ];
            SimdVec<TF,1> R54{ R53 };
            px_3 = R54;
            py_3 = R52;
            px_4 = R50;
            py_4 = R44;
            px_5 = R36;
            py_5 = R28;
            pi_3 = R22;
            pi_4 = R22;
            pi_2 = R19;
            py_2 = R17;
            px_2 = R15;
            pi_1 = R13;
            py_1 = R11;
            px_1 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_5 = R1;
            continue;
        }
        case_128: {
            // mod=3,[3,4],[5,6],6,7,0,1,2, swith_cuts=1
            auto R0 = pi_2[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_3[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_3[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_3[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_5[ 0 ];
            auto R9 = py_2[ 0 ];
            SimdVec<TF,1> R10{ R9 };
            auto R11 = px_4[ 0 ];
            SimdVec<TF,2> R12{ R8, R11 };
            auto R13 = px_2[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = di_5[ 0 ];
            auto R16 = pi_1[ 0 ];
            SimdVec<TC,1> R17{ R16 };
            auto R18 = di_4[ 0 ];
            SimdVec<TF,2> R19{ R15, R18 };
            auto R20 = py_1[ 0 ];
            SimdVec<TF,1> R21{ R20 };
            auto R22 = di_6[ 0 ];
            auto R23 = px_1[ 0 ];
            SimdVec<TF,1> R24{ R23 };
            auto R25 = di_3[ 0 ];
            SimdVec<TF,2> R26{ R22, R25 };
            auto R27 = R26 - R19;
            auto R28 = R19 / R27;
            auto R29 = pi_0[ 0 ];
            SimdVec<TC,1> R30{ R29 };
            auto R31 = px_6[ 0 ];
            SimdVec<TF,1> R32{ R31 };
            auto R33 = py_5[ 0 ];
            SimdVec<TF,2> R34{ R31, R2 };
            auto R35 = R12 - R34;
            auto R36 = R28 * R35;
            auto R37 = R12 + R36;
            auto R38 = R37[ 0 ];
            SimdVec<TF,1> R39{ R38 };
            auto R40 = py_4[ 0 ];
            SimdVec<TF,2> R41{ R33, R40 };
            auto R42 = R37[ 1 ];
            SimdVec<TF,1> R43{ R42 };
            auto R44 = py_6[ 0 ];
            SimdVec<TF,1> R45{ R44 };
            SimdVec<TC,1> R46{ cut_i[num_cut] };
            auto R47 = pi_6[ 0 ];
            SimdVec<TC,1> R48{ R47 };
            auto R49 = px_7[ 0 ];
            SimdVec<TF,1> R50{ R49 };
            auto R51 = py_7[ 0 ];
            SimdVec<TF,1> R52{ R51 };
            auto R53 = pi_7[ 0 ];
            SimdVec<TC,1> R54{ R53 };
            auto R55 = px_0[ 0 ];
            SimdVec<TF,1> R56{ R55 };
            auto R57 = py_0[ 0 ];
            SimdVec<TF,1> R58{ R57 };
            SimdVec<TF,2> R59{ R44, R4 };
            auto R60 = R41 - R59;
            auto R61 = R28 * R60;
            auto R62 = R41 + R61;
            auto R63 = R62[ 0 ];
            SimdVec<TF,1> R64{ R63 };
            auto R65 = R62[ 1 ];
            SimdVec<TF,1> R66{ R65 };
            py_1 = R66;
            py_2 = R64;
            pi_1 = R46;
            py_5 = R58;
            px_5 = R56;
            pi_4 = R54;
            py_4 = R52;
            px_4 = R50;
            pi_3 = R48;
            pi_2 = R46;
            py_3 = R45;
            px_1 = R43;
            px_2 = R39;
            px_3 = R32;
            pi_5 = R30;
            px_6 = R24;
            py_6 = R21;
            pi_6 = R17;
            px_7 = R14;
            py_7 = R10;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_7 = R1;
            continue;
        }
        case_114: {
            // mod=4,5,6,7,[7,0],[1,2],2,3, swith_cuts=1
            auto R0 = pi_3[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_4[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_4[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_4[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_5[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = py_5[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = pi_5[ 0 ];
            SimdVec<TC,1> R13{ R12 };
            auto R14 = px_6[ 0 ];
            SimdVec<TF,1> R15{ R14 };
            auto R16 = py_6[ 0 ];
            SimdVec<TF,1> R17{ R16 };
            auto R18 = pi_6[ 0 ];
            SimdVec<TC,1> R19{ R18 };
            auto R20 = px_7[ 0 ];
            SimdVec<TF,1> R21{ R20 };
            auto R22 = py_7[ 0 ];
            SimdVec<TF,1> R23{ R22 };
            auto R24 = pi_7[ 0 ];
            SimdVec<TC,1> R25{ R24 };
            auto R26 = px_2[ 0 ];
            SimdVec<TF,1> R27{ R26 };
            auto R28 = px_0[ 0 ];
            SimdVec<TF,2> R29{ R26, R28 };
            auto R30 = py_3[ 0 ];
            SimdVec<TF,1> R31{ R30 };
            auto R32 = di_2[ 0 ];
            auto R33 = px_3[ 0 ];
            SimdVec<TF,1> R34{ R33 };
            auto R35 = di_0[ 0 ];
            SimdVec<TF,2> R36{ R32, R35 };
            auto R37 = pi_2[ 0 ];
            SimdVec<TC,1> R38{ R37 };
            auto R39 = di_1[ 0 ];
            SimdVec<TC,1> R40{ cut_i[num_cut] };
            auto R41 = di_7[ 0 ];
            SimdVec<TF,2> R42{ R39, R41 };
            auto R43 = R42 - R36;
            auto R44 = R36 / R43;
            auto R45 = px_1[ 0 ];
            SimdVec<TF,2> R46{ R45, R20 };
            auto R47 = R29 - R46;
            auto R48 = R44 * R47;
            auto R49 = R29 + R48;
            auto R50 = R49[ 0 ];
            SimdVec<TF,1> R51{ R50 };
            auto R52 = py_2[ 0 ];
            SimdVec<TF,1> R53{ R52 };
            auto R54 = py_0[ 0 ];
            SimdVec<TF,2> R55{ R52, R54 };
            auto R56 = R49[ 1 ];
            SimdVec<TF,1> R57{ R56 };
            auto R58 = py_1[ 0 ];
            SimdVec<TF,2> R59{ R58, R22 };
            auto R60 = R55 - R59;
            auto R61 = R44 * R60;
            auto R62 = R55 + R61;
            auto R63 = R62[ 0 ];
            SimdVec<TF,1> R64{ R63 };
            auto R65 = R62[ 1 ];
            SimdVec<TF,1> R66{ R65 };
            py_4 = R66;
            py_5 = R64;
            px_4 = R57;
            py_6 = R53;
            px_5 = R51;
            pi_4 = R40;
            pi_5 = R40;
            pi_6 = R38;
            px_7 = R34;
            py_7 = R31;
            px_6 = R27;
            pi_3 = R25;
            py_3 = R23;
            px_3 = R21;
            pi_2 = R19;
            py_2 = R17;
            px_2 = R15;
            pi_1 = R13;
            py_1 = R11;
            px_1 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_7 = R1;
            continue;
        }
        case_209: {
            // mod=4,5,6,[6,7],[8,0],0,1,2,3, swith_cuts=0
            auto R0 = pi_3[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_4[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_4[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_4[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_5[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = py_5[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = pi_5[ 0 ];
            SimdVec<TC,1> R13{ R12 };
            auto R14 = px_6[ 0 ];
            SimdVec<TF,1> R15{ R14 };
            auto R16 = py_6[ 0 ];
            SimdVec<TF,1> R17{ R16 };
            auto R18 = pi_6[ 0 ];
            SimdVec<TC,1> R19{ R18 };
            auto R20 = px_7[ 0 ];
            auto R21 = py_3[ 0 ];
            SimdVec<TF,1> R22{ R21 };
            auto R23 = px_8[ 0 ];
            SimdVec<TF,2> R24{ R20, R23 };
            auto R25 = px_3[ 0 ];
            SimdVec<TF,1> R26{ R25 };
            auto R27 = di_7[ 0 ];
            auto R28 = pi_2[ 0 ];
            SimdVec<TC,1> R29{ R28 };
            auto R30 = di_8[ 0 ];
            SimdVec<TF,2> R31{ R27, R30 };
            auto R32 = py_2[ 0 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = di_6[ 0 ];
            auto R35 = px_2[ 0 ];
            SimdVec<TF,1> R36{ R35 };
            auto R37 = di_0[ 0 ];
            SimdVec<TF,2> R38{ R34, R37 };
            auto R39 = R38 - R31;
            auto R40 = R31 / R39;
            auto R41 = pi_1[ 0 ];
            SimdVec<TC,1> R42{ R41 };
            auto R43 = px_0[ 0 ];
            SimdVec<TF,1> R44{ R43 };
            auto R45 = py_7[ 0 ];
            SimdVec<TF,2> R46{ R14, R43 };
            auto R47 = R24 - R46;
            auto R48 = R40 * R47;
            auto R49 = R24 + R48;
            auto R50 = R49[ 1 ];
            SimdVec<TF,1> R51{ R50 };
            auto R52 = py_8[ 0 ];
            SimdVec<TF,2> R53{ R45, R52 };
            auto R54 = R49[ 0 ];
            SimdVec<TF,1> R55{ R54 };
            auto R56 = py_0[ 0 ];
            SimdVec<TF,1> R57{ R56 };
            SimdVec<TC,1> R58{ cut_i[num_cut] };
            auto R59 = pi_0[ 0 ];
            SimdVec<TC,1> R60{ R59 };
            auto R61 = px_1[ 0 ];
            SimdVec<TF,1> R62{ R61 };
            auto R63 = py_1[ 0 ];
            SimdVec<TF,1> R64{ R63 };
            SimdVec<TF,2> R65{ R16, R56 };
            auto R66 = R53 - R65;
            auto R67 = R40 * R66;
            auto R68 = R53 + R67;
            auto R69 = R68[ 1 ];
            SimdVec<TF,1> R70{ R69 };
            auto R71 = R68[ 0 ];
            SimdVec<TF,1> R72{ R71 };
            py_3 = R72;
            py_4 = R70;
            pi_3 = R58;
            py_6 = R64;
            px_6 = R62;
            pi_5 = R60;
            pi_4 = R58;
            py_5 = R57;
            px_3 = R55;
            px_4 = R51;
            px_5 = R44;
            pi_6 = R42;
            px_7 = R36;
            py_7 = R33;
            pi_7 = R29;
            px_8 = R26;
            py_8 = R22;
            pi_2 = R19;
            py_2 = R17;
            px_2 = R15;
            pi_1 = R13;
            py_1 = R11;
            px_1 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_8 = R1;
            continue;
        }
        case_116: {
            // mod=5,6,7,0,[0,1],[2,3],3,4, swith_cuts=1
            auto R0 = pi_4[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_5[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_5[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_5[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_6[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = py_6[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = pi_6[ 0 ];
            SimdVec<TC,1> R13{ R12 };
            auto R14 = px_7[ 0 ];
            SimdVec<TF,1> R15{ R14 };
            auto R16 = py_7[ 0 ];
            SimdVec<TF,1> R17{ R16 };
            auto R18 = pi_7[ 0 ];
            SimdVec<TC,1> R19{ R18 };
            auto R20 = px_0[ 0 ];
            SimdVec<TF,1> R21{ R20 };
            auto R22 = py_0[ 0 ];
            SimdVec<TF,1> R23{ R22 };
            auto R24 = pi_0[ 0 ];
            SimdVec<TC,1> R25{ R24 };
            auto R26 = px_2[ 0 ];
            SimdVec<TF,2> R27{ R26, R20 };
            auto R28 = py_4[ 0 ];
            SimdVec<TF,1> R29{ R28 };
            auto R30 = di_2[ 0 ];
            auto R31 = px_4[ 0 ];
            SimdVec<TF,1> R32{ R31 };
            auto R33 = di_0[ 0 ];
            SimdVec<TF,2> R34{ R30, R33 };
            auto R35 = pi_3[ 0 ];
            SimdVec<TC,1> R36{ R35 };
            auto R37 = di_3[ 0 ];
            SimdVec<TC,1> R38{ cut_i[num_cut] };
            auto R39 = di_1[ 0 ];
            SimdVec<TF,2> R40{ R37, R39 };
            auto R41 = R40 - R34;
            auto R42 = R34 / R41;
            auto R43 = px_3[ 0 ];
            SimdVec<TF,1> R44{ R43 };
            auto R45 = px_1[ 0 ];
            SimdVec<TF,2> R46{ R43, R45 };
            auto R47 = R27 - R46;
            auto R48 = R42 * R47;
            auto R49 = R27 + R48;
            auto R50 = R49[ 0 ];
            SimdVec<TF,1> R51{ R50 };
            auto R52 = py_2[ 0 ];
            SimdVec<TF,2> R53{ R52, R22 };
            auto R54 = R49[ 1 ];
            SimdVec<TF,1> R55{ R54 };
            auto R56 = py_3[ 0 ];
            SimdVec<TF,1> R57{ R56 };
            auto R58 = py_1[ 0 ];
            SimdVec<TF,2> R59{ R56, R58 };
            auto R60 = R53 - R59;
            auto R61 = R42 * R60;
            auto R62 = R53 + R61;
            auto R63 = R62[ 0 ];
            SimdVec<TF,1> R64{ R63 };
            auto R65 = R62[ 1 ];
            SimdVec<TF,1> R66{ R65 };
            py_4 = R66;
            py_5 = R64;
            py_6 = R57;
            px_4 = R55;
            px_5 = R51;
            px_6 = R44;
            pi_4 = R38;
            pi_5 = R38;
            pi_6 = R36;
            px_7 = R32;
            py_7 = R29;
            pi_3 = R25;
            py_3 = R23;
            px_3 = R21;
            pi_2 = R19;
            py_2 = R17;
            px_2 = R15;
            pi_1 = R13;
            py_1 = R11;
            px_1 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_7 = R1;
            continue;
        }
        case_172: {
            // mod=5,6,7,8,0,1,[1,2],[3,4],4, swith_cuts=0
            auto R0 = pi_4[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_5[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_5[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_5[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_6[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = py_6[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = pi_6[ 0 ];
            SimdVec<TC,1> R13{ R12 };
            auto R14 = px_7[ 0 ];
            SimdVec<TF,1> R15{ R14 };
            auto R16 = py_7[ 0 ];
            SimdVec<TF,1> R17{ R16 };
            auto R18 = pi_7[ 0 ];
            SimdVec<TC,1> R19{ R18 };
            auto R20 = px_8[ 0 ];
            SimdVec<TF,1> R21{ R20 };
            auto R22 = py_8[ 0 ];
            SimdVec<TF,1> R23{ R22 };
            auto R24 = pi_8[ 0 ];
            SimdVec<TC,1> R25{ R24 };
            auto R26 = px_0[ 0 ];
            SimdVec<TF,1> R27{ R26 };
            auto R28 = py_0[ 0 ];
            SimdVec<TF,1> R29{ R28 };
            auto R30 = pi_0[ 0 ];
            SimdVec<TC,1> R31{ R30 };
            auto R32 = px_1[ 0 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = py_1[ 0 ];
            SimdVec<TF,1> R35{ R34 };
            auto R36 = pi_1[ 0 ];
            SimdVec<TC,1> R37{ R36 };
            auto R38 = px_4[ 0 ];
            SimdVec<TF,1> R39{ R38 };
            auto R40 = di_1[ 0 ];
            SimdVec<TF,2> R41{ R32, R38 };
            SimdVec<TC,1> R42{ cut_i[num_cut] };
            auto R43 = di_4[ 0 ];
            SimdVec<TF,2> R44{ R40, R43 };
            auto R45 = di_2[ 0 ];
            auto R46 = py_3[ 0 ];
            auto R47 = py_2[ 0 ];
            SimdVec<TF,2> R48{ R47, R46 };
            auto R49 = py_4[ 0 ];
            SimdVec<TF,1> R50{ R49 };
            auto R51 = di_3[ 0 ];
            SimdVec<TF,2> R52{ R45, R51 };
            auto R53 = R52 - R44;
            auto R54 = R44 / R53;
            SimdVec<TF,2> R55{ R34, R49 };
            auto R56 = R55 - R48;
            auto R57 = R54 * R56;
            auto R58 = R55 + R57;
            auto R59 = R58[ 1 ];
            SimdVec<TF,1> R60{ R59 };
            auto R61 = px_2[ 0 ];
            auto R62 = R58[ 0 ];
            SimdVec<TF,1> R63{ R62 };
            auto R64 = px_3[ 0 ];
            SimdVec<TF,2> R65{ R61, R64 };
            auto R66 = R41 - R65;
            auto R67 = R54 * R66;
            auto R68 = R41 + R67;
            auto R69 = R68[ 1 ];
            SimdVec<TF,1> R70{ R69 };
            auto R71 = R68[ 0 ];
            SimdVec<TF,1> R72{ R71 };
            px_6 = R72;
            px_7 = R70;
            py_6 = R63;
            py_7 = R60;
            py_8 = R50;
            pi_6 = R42;
            pi_7 = R42;
            px_8 = R39;
            pi_5 = R37;
            py_5 = R35;
            px_5 = R33;
            pi_4 = R31;
            py_4 = R29;
            px_4 = R27;
            pi_3 = R25;
            py_3 = R23;
            px_3 = R21;
            pi_2 = R19;
            py_2 = R17;
            px_2 = R15;
            pi_1 = R13;
            py_1 = R11;
            px_1 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_8 = R1;
            continue;
        }
        case_169: {
            // mod=5,6,7,8,0,[0,1],[2,3],3,4, swith_cuts=0
            auto R0 = pi_4[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_5[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_5[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_5[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_6[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = py_6[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = pi_6[ 0 ];
            SimdVec<TC,1> R13{ R12 };
            auto R14 = px_7[ 0 ];
            SimdVec<TF,1> R15{ R14 };
            auto R16 = py_7[ 0 ];
            SimdVec<TF,1> R17{ R16 };
            auto R18 = pi_7[ 0 ];
            SimdVec<TC,1> R19{ R18 };
            auto R20 = px_8[ 0 ];
            SimdVec<TF,1> R21{ R20 };
            auto R22 = py_8[ 0 ];
            SimdVec<TF,1> R23{ R22 };
            auto R24 = pi_8[ 0 ];
            SimdVec<TC,1> R25{ R24 };
            auto R26 = px_0[ 0 ];
            SimdVec<TF,1> R27{ R26 };
            auto R28 = py_0[ 0 ];
            SimdVec<TF,1> R29{ R28 };
            auto R30 = pi_0[ 0 ];
            SimdVec<TC,1> R31{ R30 };
            auto R32 = px_1[ 0 ];
            auto R33 = py_4[ 0 ];
            SimdVec<TF,1> R34{ R33 };
            auto R35 = px_3[ 0 ];
            SimdVec<TF,1> R36{ R35 };
            auto R37 = di_1[ 0 ];
            SimdVec<TF,2> R38{ R32, R35 };
            auto R39 = px_4[ 0 ];
            SimdVec<TF,1> R40{ R39 };
            auto R41 = di_3[ 0 ];
            SimdVec<TF,2> R42{ R37, R41 };
            auto R43 = pi_3[ 0 ];
            SimdVec<TC,1> R44{ R43 };
            auto R45 = di_0[ 0 ];
            SimdVec<TC,1> R46{ cut_i[num_cut] };
            auto R47 = di_2[ 0 ];
            SimdVec<TF,2> R48{ R45, R47 };
            auto R49 = R48 - R42;
            auto R50 = R42 / R49;
            auto R51 = px_2[ 0 ];
            SimdVec<TF,2> R52{ R26, R51 };
            auto R53 = R38 - R52;
            auto R54 = R50 * R53;
            auto R55 = R38 + R54;
            auto R56 = R55[ 1 ];
            SimdVec<TF,1> R57{ R56 };
            auto R58 = py_1[ 0 ];
            auto R59 = R55[ 0 ];
            SimdVec<TF,1> R60{ R59 };
            auto R61 = py_3[ 0 ];
            SimdVec<TF,1> R62{ R61 };
            auto R63 = py_2[ 0 ];
            SimdVec<TF,2> R64{ R28, R63 };
            SimdVec<TF,2> R65{ R58, R61 };
            auto R66 = R65 - R64;
            auto R67 = R50 * R66;
            auto R68 = R65 + R67;
            auto R69 = R68[ 1 ];
            SimdVec<TF,1> R70{ R69 };
            auto R71 = R68[ 0 ];
            SimdVec<TF,1> R72{ R71 };
            py_5 = R72;
            py_6 = R70;
            py_7 = R62;
            px_5 = R60;
            px_6 = R57;
            pi_5 = R46;
            pi_6 = R46;
            pi_7 = R44;
            px_8 = R40;
            px_7 = R36;
            py_8 = R34;
            pi_4 = R31;
            py_4 = R29;
            px_4 = R27;
            pi_3 = R25;
            py_3 = R23;
            px_3 = R21;
            pi_2 = R19;
            py_2 = R17;
            px_2 = R15;
            pi_1 = R13;
            py_1 = R11;
            px_1 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_8 = R1;
            continue;
        }
        case_72: {
            // mod=5,6,[6,0],[1,2],2,3,4, swith_cuts=1
            auto R0 = pi_4[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_5[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_5[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_5[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_6[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = py_6[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = pi_6[ 0 ];
            SimdVec<TC,1> R13{ R12 };
            auto R14 = px_1[ 0 ];
            auto R15 = py_4[ 0 ];
            SimdVec<TF,1> R16{ R15 };
            auto R17 = px_0[ 0 ];
            SimdVec<TF,2> R18{ R14, R17 };
            auto R19 = px_4[ 0 ];
            SimdVec<TF,1> R20{ R19 };
            auto R21 = di_1[ 0 ];
            auto R22 = pi_3[ 0 ];
            SimdVec<TC,1> R23{ R22 };
            auto R24 = di_0[ 0 ];
            SimdVec<TF,2> R25{ R21, R24 };
            auto R26 = py_3[ 0 ];
            SimdVec<TF,1> R27{ R26 };
            auto R28 = di_2[ 0 ];
            auto R29 = px_3[ 0 ];
            SimdVec<TF,1> R30{ R29 };
            auto R31 = di_6[ 0 ];
            SimdVec<TF,2> R32{ R28, R31 };
            auto R33 = R32 - R25;
            auto R34 = R25 / R33;
            auto R35 = pi_2[ 0 ];
            SimdVec<TC,1> R36{ R35 };
            auto R37 = px_2[ 0 ];
            SimdVec<TF,1> R38{ R37 };
            auto R39 = py_1[ 0 ];
            SimdVec<TF,2> R40{ R37, R8 };
            auto R41 = R18 - R40;
            auto R42 = R34 * R41;
            auto R43 = R18 + R42;
            auto R44 = R43[ 0 ];
            SimdVec<TF,1> R45{ R44 };
            auto R46 = py_0[ 0 ];
            SimdVec<TF,2> R47{ R39, R46 };
            auto R48 = R43[ 1 ];
            SimdVec<TF,1> R49{ R48 };
            auto R50 = py_2[ 0 ];
            SimdVec<TF,1> R51{ R50 };
            SimdVec<TC,1> R52{ cut_i[num_cut] };
            SimdVec<TF,2> R53{ R50, R10 };
            auto R54 = R47 - R53;
            auto R55 = R34 * R54;
            auto R56 = R47 + R55;
            auto R57 = R56[ 0 ];
            SimdVec<TF,1> R58{ R57 };
            auto R59 = R56[ 1 ];
            SimdVec<TF,1> R60{ R59 };
            py_2 = R60;
            py_3 = R58;
            pi_2 = R52;
            pi_3 = R52;
            py_4 = R51;
            px_2 = R49;
            px_3 = R45;
            px_4 = R38;
            pi_4 = R36;
            px_5 = R30;
            py_5 = R27;
            pi_5 = R23;
            px_6 = R20;
            py_6 = R16;
            pi_1 = R13;
            py_1 = R11;
            px_1 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_6 = R1;
            continue;
        }
        case_181: {
            // mod=7,8,0,1,2,3,[3,4],[5,6],6, swith_cuts=0
            auto R0 = pi_6[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_7[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_7[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_7[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_8[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = py_8[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = pi_8[ 0 ];
            SimdVec<TC,1> R13{ R12 };
            auto R14 = px_0[ 0 ];
            SimdVec<TF,1> R15{ R14 };
            auto R16 = py_0[ 0 ];
            SimdVec<TF,1> R17{ R16 };
            auto R18 = pi_0[ 0 ];
            SimdVec<TC,1> R19{ R18 };
            auto R20 = px_1[ 0 ];
            SimdVec<TF,1> R21{ R20 };
            auto R22 = py_1[ 0 ];
            SimdVec<TF,1> R23{ R22 };
            auto R24 = pi_1[ 0 ];
            SimdVec<TC,1> R25{ R24 };
            auto R26 = px_2[ 0 ];
            SimdVec<TF,1> R27{ R26 };
            auto R28 = py_2[ 0 ];
            SimdVec<TF,1> R29{ R28 };
            auto R30 = pi_2[ 0 ];
            SimdVec<TC,1> R31{ R30 };
            auto R32 = px_3[ 0 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = py_3[ 0 ];
            SimdVec<TF,1> R35{ R34 };
            auto R36 = pi_3[ 0 ];
            SimdVec<TC,1> R37{ R36 };
            auto R38 = px_4[ 0 ];
            SimdVec<TC,1> R39{ cut_i[num_cut] };
            auto R40 = px_5[ 0 ];
            SimdVec<TF,2> R41{ R38, R40 };
            auto R42 = di_4[ 0 ];
            auto R43 = py_6[ 0 ];
            SimdVec<TF,1> R44{ R43 };
            auto R45 = di_5[ 0 ];
            SimdVec<TF,2> R46{ R42, R45 };
            SimdVec<TF,2> R47{ R34, R43 };
            auto R48 = py_5[ 0 ];
            auto R49 = py_4[ 0 ];
            SimdVec<TF,2> R50{ R49, R48 };
            auto R51 = R50 - R47;
            auto R52 = px_6[ 0 ];
            SimdVec<TF,1> R53{ R52 };
            auto R54 = di_3[ 0 ];
            SimdVec<TF,2> R55{ R32, R52 };
            auto R56 = R41 - R55;
            auto R57 = di_6[ 0 ];
            SimdVec<TF,2> R58{ R54, R57 };
            auto R59 = R58 - R46;
            auto R60 = R46 / R59;
            auto R61 = R60 * R51;
            auto R62 = R50 + R61;
            auto R63 = R62[ 1 ];
            SimdVec<TF,1> R64{ R63 };
            auto R65 = R60 * R56;
            auto R66 = R41 + R65;
            auto R67 = R66[ 1 ];
            SimdVec<TF,1> R68{ R67 };
            auto R69 = R62[ 0 ];
            SimdVec<TF,1> R70{ R69 };
            auto R71 = R66[ 0 ];
            SimdVec<TF,1> R72{ R71 };
            px_6 = R72;
            py_6 = R70;
            px_7 = R68;
            py_7 = R64;
            px_8 = R53;
            py_8 = R44;
            pi_6 = R39;
            pi_7 = R39;
            pi_5 = R37;
            py_5 = R35;
            px_5 = R33;
            pi_4 = R31;
            py_4 = R29;
            px_4 = R27;
            pi_3 = R25;
            py_3 = R23;
            px_3 = R21;
            pi_2 = R19;
            py_2 = R17;
            px_2 = R15;
            pi_1 = R13;
            py_1 = R11;
            px_1 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_8 = R1;
            continue;
        }
        case_187: {
            // mod=8,0,1,2,3,4,[4,5],[6,7],7, swith_cuts=0
            auto R0 = pi_7[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_8[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_8[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_8[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_0[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = py_0[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = pi_0[ 0 ];
            SimdVec<TC,1> R13{ R12 };
            auto R14 = px_1[ 0 ];
            SimdVec<TF,1> R15{ R14 };
            auto R16 = py_1[ 0 ];
            SimdVec<TF,1> R17{ R16 };
            auto R18 = pi_1[ 0 ];
            SimdVec<TC,1> R19{ R18 };
            auto R20 = px_2[ 0 ];
            SimdVec<TF,1> R21{ R20 };
            auto R22 = py_2[ 0 ];
            SimdVec<TF,1> R23{ R22 };
            auto R24 = pi_2[ 0 ];
            SimdVec<TC,1> R25{ R24 };
            auto R26 = px_3[ 0 ];
            SimdVec<TF,1> R27{ R26 };
            auto R28 = py_3[ 0 ];
            SimdVec<TF,1> R29{ R28 };
            auto R30 = pi_3[ 0 ];
            SimdVec<TC,1> R31{ R30 };
            auto R32 = px_4[ 0 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = py_4[ 0 ];
            SimdVec<TF,1> R35{ R34 };
            auto R36 = pi_4[ 0 ];
            SimdVec<TC,1> R37{ R36 };
            auto R38 = px_5[ 0 ];
            SimdVec<TC,1> R39{ cut_i[num_cut] };
            auto R40 = px_7[ 0 ];
            SimdVec<TF,1> R41{ R40 };
            auto R42 = di_5[ 0 ];
            SimdVec<TF,2> R43{ R38, R40 };
            auto R44 = di_7[ 0 ];
            SimdVec<TF,2> R45{ R42, R44 };
            auto R46 = py_6[ 0 ];
            SimdVec<TF,2> R47{ R34, R46 };
            auto R48 = py_7[ 0 ];
            SimdVec<TF,1> R49{ R48 };
            auto R50 = di_4[ 0 ];
            auto R51 = py_5[ 0 ];
            SimdVec<TF,2> R52{ R51, R48 };
            auto R53 = R52 - R47;
            auto R54 = px_6[ 0 ];
            SimdVec<TF,2> R55{ R32, R54 };
            auto R56 = R43 - R55;
            auto R57 = di_6[ 0 ];
            SimdVec<TF,2> R58{ R50, R57 };
            auto R59 = R58 - R45;
            auto R60 = R45 / R59;
            auto R61 = R60 * R53;
            auto R62 = R52 + R61;
            auto R63 = R62[ 1 ];
            SimdVec<TF,1> R64{ R63 };
            auto R65 = R60 * R56;
            auto R66 = R43 + R65;
            auto R67 = R66[ 1 ];
            SimdVec<TF,1> R68{ R67 };
            auto R69 = R62[ 0 ];
            SimdVec<TF,1> R70{ R69 };
            auto R71 = R66[ 0 ];
            SimdVec<TF,1> R72{ R71 };
            px_6 = R72;
            py_6 = R70;
            px_7 = R68;
            py_7 = R64;
            py_8 = R49;
            pi_6 = R39;
            px_8 = R41;
            pi_7 = R39;
            pi_5 = R37;
            py_5 = R35;
            px_5 = R33;
            pi_4 = R31;
            py_4 = R29;
            px_4 = R27;
            pi_3 = R25;
            py_3 = R23;
            px_3 = R21;
            pi_2 = R19;
            py_2 = R17;
            px_2 = R15;
            pi_1 = R13;
            py_1 = R11;
            px_1 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_8 = R1;
            continue;
        }
        case_57: {
            // mod=[0,1],1,2,3,4,[4,5], swith_cuts=0
            auto R0 = pi_4[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_0[ 0 ];
            auto R3 = pi_3[ 0 ];
            SimdVec<TC,1> R4{ R3 };
            auto R5 = px_5[ 0 ];
            SimdVec<TF,2> R6{ R2, R5 };
            auto R7 = py_3[ 0 ];
            SimdVec<TF,1> R8{ R7 };
            auto R9 = di_0[ 0 ];
            auto R10 = px_3[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = di_5[ 0 ];
            SimdVec<TF,2> R13{ R9, R12 };
            auto R14 = pi_2[ 0 ];
            SimdVec<TC,1> R15{ R14 };
            auto R16 = di_1[ 0 ];
            auto R17 = py_2[ 0 ];
            SimdVec<TF,1> R18{ R17 };
            auto R19 = di_4[ 0 ];
            SimdVec<TF,2> R20{ R16, R19 };
            auto R21 = R20 - R13;
            auto R22 = R13 / R21;
            auto R23 = px_2[ 0 ];
            SimdVec<TF,1> R24{ R23 };
            auto R25 = px_1[ 0 ];
            SimdVec<TF,1> R26{ R25 };
            auto R27 = px_4[ 0 ];
            SimdVec<TF,1> R28{ R27 };
            auto R29 = py_0[ 0 ];
            SimdVec<TF,2> R30{ R25, R27 };
            auto R31 = R6 - R30;
            auto R32 = R22 * R31;
            auto R33 = R6 + R32;
            auto R34 = R33[ 1 ];
            SimdVec<TF,1> R35{ R34 };
            auto R36 = py_5[ 0 ];
            SimdVec<TF,2> R37{ R29, R36 };
            auto R38 = R33[ 0 ];
            SimdVec<TF,1> R39{ R38 };
            auto R40 = py_1[ 0 ];
            SimdVec<TF,1> R41{ R40 };
            auto R42 = py_4[ 0 ];
            SimdVec<TF,1> R43{ R42 };
            SimdVec<TC,1> R44{ cut_i[num_cut] };
            auto R45 = pi_1[ 0 ];
            SimdVec<TC,1> R46{ R45 };
            SimdVec<TF,2> R47{ R40, R42 };
            auto R48 = R37 - R47;
            auto R49 = R22 * R48;
            auto R50 = R37 + R49;
            auto R51 = R50[ 1 ];
            SimdVec<TF,1> R52{ R51 };
            auto R53 = R50[ 0 ];
            SimdVec<TF,1> R54{ R53 };
            py_0 = R54;
            py_5 = R52;
            pi_0 = R44;
            pi_1 = R46;
            pi_5 = R44;
            py_4 = R43;
            py_1 = R41;
            px_0 = R39;
            px_5 = R35;
            px_4 = R28;
            px_1 = R26;
            px_2 = R24;
            py_2 = R18;
            pi_2 = R15;
            px_3 = R11;
            py_3 = R8;
            pi_3 = R4;
            pi_4 = R1;
            continue;
        }
        case_6: {
            // mod=[0,1],1,[1,2], swith_cuts=1
            auto R0 = pi_1[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_1[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = px_0[ 0 ];
            SimdVec<TF,2> R5{ R2, R4 };
            SimdVec<TC,1> R6{ cut_i[num_cut] };
            auto R7 = di_1[ 0 ];
            auto R8 = di_0[ 0 ];
            SimdVec<TF,2> R9{ R7, R8 };
            auto R10 = py_2[ 0 ];
            auto R11 = py_0[ 0 ];
            auto R12 = py_1[ 0 ];
            SimdVec<TF,1> R13{ R12 };
            auto R14 = di_2[ 0 ];
            SimdVec<TF,2> R15{ R14, R7 };
            auto R16 = R15 - R9;
            auto R17 = R9 / R16;
            SimdVec<TF,2> R18{ R10, R12 };
            SimdVec<TF,2> R19{ R12, R11 };
            auto R20 = R19 - R18;
            auto R21 = R17 * R20;
            auto R22 = R19 + R21;
            auto R23 = R22[ 0 ];
            SimdVec<TF,1> R24{ R23 };
            auto R25 = px_2[ 0 ];
            SimdVec<TF,2> R26{ R25, R2 };
            auto R27 = R5 - R26;
            auto R28 = R17 * R27;
            auto R29 = R5 + R28;
            auto R30 = R29[ 0 ];
            SimdVec<TF,1> R31{ R30 };
            auto R32 = R22[ 1 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = R29[ 1 ];
            SimdVec<TF,1> R35{ R34 };
            px_0 = R35;
            py_0 = R33;
            px_2 = R31;
            py_2 = R24;
            py_1 = R13;
            pi_0 = R6;
            pi_2 = R6;
            px_1 = R3;
            pi_1 = R1;
            continue;
        }
        case_74: {
            // mod=[0,1],[2,3],3,4,5,6,0, swith_cuts=1
            auto R0 = pi_0[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_3[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = px_0[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = di_3[ 0 ];
            SimdVec<TF,2> R7{ R2, R4 };
            auto R8 = pi_6[ 0 ];
            SimdVec<TC,1> R9{ R8 };
            auto R10 = di_0[ 0 ];
            SimdVec<TF,2> R11{ R6, R10 };
            auto R12 = py_6[ 0 ];
            SimdVec<TF,1> R13{ R12 };
            auto R14 = di_2[ 0 ];
            auto R15 = px_6[ 0 ];
            SimdVec<TF,1> R16{ R15 };
            auto R17 = di_1[ 0 ];
            SimdVec<TF,2> R18{ R14, R17 };
            auto R19 = R18 - R11;
            auto R20 = R11 / R19;
            auto R21 = pi_5[ 0 ];
            SimdVec<TC,1> R22{ R21 };
            auto R23 = px_2[ 0 ];
            auto R24 = py_5[ 0 ];
            SimdVec<TF,1> R25{ R24 };
            auto R26 = px_1[ 0 ];
            SimdVec<TF,2> R27{ R23, R26 };
            auto R28 = R7 - R27;
            auto R29 = R20 * R28;
            auto R30 = R7 + R29;
            auto R31 = R30[ 0 ];
            SimdVec<TF,1> R32{ R31 };
            auto R33 = py_3[ 0 ];
            SimdVec<TF,1> R34{ R33 };
            auto R35 = py_0[ 0 ];
            SimdVec<TF,1> R36{ R35 };
            auto R37 = py_2[ 0 ];
            SimdVec<TF,2> R38{ R33, R35 };
            auto R39 = R30[ 1 ];
            SimdVec<TF,1> R40{ R39 };
            auto R41 = py_1[ 0 ];
            SimdVec<TF,2> R42{ R37, R41 };
            auto R43 = R38 - R42;
            auto R44 = R20 * R43;
            auto R45 = R38 + R44;
            auto R46 = R45[ 0 ];
            SimdVec<TF,1> R47{ R46 };
            SimdVec<TC,1> R48{ cut_i[num_cut] };
            auto R49 = pi_3[ 0 ];
            SimdVec<TC,1> R50{ R49 };
            auto R51 = px_4[ 0 ];
            SimdVec<TF,1> R52{ R51 };
            auto R53 = py_4[ 0 ];
            SimdVec<TF,1> R54{ R53 };
            auto R55 = pi_4[ 0 ];
            SimdVec<TC,1> R56{ R55 };
            auto R57 = px_5[ 0 ];
            SimdVec<TF,1> R58{ R57 };
            auto R59 = R45[ 1 ];
            SimdVec<TF,1> R60{ R59 };
            py_0 = R60;
            pi_0 = R48;
            px_4 = R58;
            pi_3 = R56;
            py_3 = R54;
            px_3 = R52;
            pi_2 = R50;
            pi_1 = R48;
            py_1 = R47;
            px_0 = R40;
            py_6 = R36;
            py_2 = R34;
            px_1 = R32;
            py_4 = R25;
            pi_4 = R22;
            px_5 = R16;
            py_5 = R13;
            pi_5 = R9;
            px_6 = R5;
            px_2 = R3;
            pi_6 = R1;
            continue;
        }
        case_11: {
            // mod=[1,2],2,3,[3,0], swith_cuts=0
            auto R0 = pi_3[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_2[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = px_0[ 0 ];
            SimdVec<TF,2> R5{ R2, R4 };
            auto R6 = pi_2[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = di_2[ 0 ];
            SimdVec<TC,1> R9{ cut_i[num_cut] };
            auto R10 = di_0[ 0 ];
            SimdVec<TF,2> R11{ R8, R10 };
            auto R12 = di_1[ 0 ];
            auto R13 = py_3[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = di_3[ 0 ];
            SimdVec<TF,2> R16{ R12, R15 };
            auto R17 = R16 - R11;
            auto R18 = R11 / R17;
            auto R19 = py_1[ 0 ];
            SimdVec<TF,2> R20{ R19, R13 };
            auto R21 = py_0[ 0 ];
            auto R22 = py_2[ 0 ];
            SimdVec<TF,1> R23{ R22 };
            auto R24 = px_1[ 0 ];
            SimdVec<TF,2> R25{ R22, R21 };
            auto R26 = R25 - R20;
            auto R27 = R18 * R26;
            auto R28 = R25 + R27;
            auto R29 = R28[ 1 ];
            SimdVec<TF,1> R30{ R29 };
            auto R31 = px_3[ 0 ];
            SimdVec<TF,1> R32{ R31 };
            auto R33 = R28[ 0 ];
            SimdVec<TF,1> R34{ R33 };
            SimdVec<TF,2> R35{ R24, R31 };
            auto R36 = R5 - R35;
            auto R37 = R18 * R36;
            auto R38 = R5 + R37;
            auto R39 = R38[ 1 ];
            SimdVec<TF,1> R40{ R39 };
            auto R41 = R38[ 0 ];
            SimdVec<TF,1> R42{ R41 };
            px_0 = R42;
            px_3 = R40;
            py_0 = R34;
            px_2 = R32;
            py_3 = R30;
            py_1 = R23;
            py_2 = R14;
            pi_0 = R9;
            pi_3 = R9;
            pi_1 = R7;
            px_1 = R3;
            pi_2 = R1;
            continue;
        }
        case_4: {
            // mod=[1,2],2,[2,0], swith_cuts=1
            auto R0 = pi_2[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_0[ 0 ];
            SimdVec<TC,1> R3{ cut_i[num_cut] };
            auto R4 = px_1[ 0 ];
            SimdVec<TF,2> R5{ R2, R4 };
            auto R6 = di_0[ 0 ];
            auto R7 = py_2[ 0 ];
            SimdVec<TF,1> R8{ R7 };
            auto R9 = di_1[ 0 ];
            SimdVec<TF,2> R10{ R6, R9 };
            SimdVec<TF,2> R11{ R7, R7 };
            auto R12 = py_1[ 0 ];
            auto R13 = py_0[ 0 ];
            SimdVec<TF,2> R14{ R13, R12 };
            auto R15 = R14 - R11;
            auto R16 = px_2[ 0 ];
            SimdVec<TF,1> R17{ R16 };
            auto R18 = di_2[ 0 ];
            SimdVec<TF,2> R19{ R18, R18 };
            auto R20 = R19 - R10;
            auto R21 = R10 / R20;
            auto R22 = R21 * R15;
            auto R23 = R14 + R22;
            auto R24 = R23[ 0 ];
            SimdVec<TF,1> R25{ R24 };
            SimdVec<TF,2> R26{ R16, R16 };
            auto R27 = R5 - R26;
            auto R28 = R21 * R27;
            auto R29 = R5 + R28;
            auto R30 = R29[ 0 ];
            SimdVec<TF,1> R31{ R30 };
            auto R32 = R29[ 1 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = R23[ 1 ];
            SimdVec<TF,1> R35{ R34 };
            py_0 = R35;
            px_0 = R33;
            px_2 = R31;
            py_2 = R25;
            px_1 = R17;
            py_1 = R8;
            pi_0 = R3;
            pi_2 = R3;
            pi_1 = R1;
            continue;
        }
        case_18: {
            // mod=[1,2],[3,0],0,1, swith_cuts=0
            auto R0 = pi_1[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_1[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = px_3[ 0 ];
            SimdVec<TF,2> R5{ R2, R4 };
            auto R6 = pi_0[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = di_1[ 0 ];
            SimdVec<TC,1> R9{ cut_i[num_cut] };
            auto R10 = di_3[ 0 ];
            SimdVec<TF,2> R11{ R8, R10 };
            auto R12 = di_2[ 0 ];
            auto R13 = py_0[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = di_0[ 0 ];
            SimdVec<TF,2> R16{ R12, R15 };
            auto R17 = R16 - R11;
            auto R18 = R11 / R17;
            auto R19 = py_2[ 0 ];
            SimdVec<TF,2> R20{ R19, R13 };
            auto R21 = py_3[ 0 ];
            auto R22 = py_1[ 0 ];
            SimdVec<TF,1> R23{ R22 };
            auto R24 = px_2[ 0 ];
            SimdVec<TF,2> R25{ R22, R21 };
            auto R26 = R25 - R20;
            auto R27 = R18 * R26;
            auto R28 = R25 + R27;
            auto R29 = R28[ 1 ];
            SimdVec<TF,1> R30{ R29 };
            auto R31 = px_0[ 0 ];
            SimdVec<TF,1> R32{ R31 };
            auto R33 = R28[ 0 ];
            SimdVec<TF,1> R34{ R33 };
            SimdVec<TF,2> R35{ R24, R31 };
            auto R36 = R5 - R35;
            auto R37 = R18 * R36;
            auto R38 = R5 + R37;
            auto R39 = R38[ 1 ];
            SimdVec<TF,1> R40{ R39 };
            auto R41 = R38[ 0 ];
            SimdVec<TF,1> R42{ R41 };
            px_0 = R42;
            px_1 = R40;
            py_0 = R34;
            px_2 = R32;
            py_1 = R30;
            py_3 = R23;
            py_2 = R14;
            pi_0 = R9;
            pi_1 = R9;
            pi_2 = R7;
            px_3 = R3;
            pi_3 = R1;
            continue;
        }
        case_7: {
            // mod=[2,0],0,[0,1], swith_cuts=0
            auto R0 = pi_0[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_2[ 0 ];
            SimdVec<TC,1> R3{ cut_i[num_cut] };
            auto R4 = px_0[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = di_2[ 0 ];
            SimdVec<TF,2> R7{ R2, R4 };
            auto R8 = di_0[ 0 ];
            SimdVec<TF,2> R9{ R6, R8 };
            auto R10 = py_1[ 0 ];
            auto R11 = py_0[ 0 ];
            SimdVec<TF,1> R12{ R11 };
            auto R13 = di_1[ 0 ];
            SimdVec<TF,2> R14{ R8, R13 };
            auto R15 = R14 - R9;
            auto R16 = R9 / R15;
            SimdVec<TF,2> R17{ R11, R10 };
            auto R18 = py_2[ 0 ];
            SimdVec<TF,2> R19{ R18, R11 };
            auto R20 = R19 - R17;
            auto R21 = R16 * R20;
            auto R22 = R19 + R21;
            auto R23 = R22[ 1 ];
            SimdVec<TF,1> R24{ R23 };
            auto R25 = px_1[ 0 ];
            SimdVec<TF,2> R26{ R4, R25 };
            auto R27 = R7 - R26;
            auto R28 = R16 * R27;
            auto R29 = R7 + R28;
            auto R30 = R29[ 1 ];
            SimdVec<TF,1> R31{ R30 };
            auto R32 = R22[ 0 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = R29[ 0 ];
            SimdVec<TF,1> R35{ R34 };
            px_0 = R35;
            py_0 = R33;
            px_2 = R31;
            py_2 = R24;
            py_1 = R12;
            pi_0 = R3;
            px_1 = R5;
            pi_2 = R3;
            pi_1 = R1;
            continue;
        }
        case_16: {
            // mod=[2,3],[0,1],1,2, swith_cuts=1
            auto R0 = pi_2[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_1[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = px_2[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = di_1[ 0 ];
            SimdVec<TF,2> R7{ R2, R4 };
            auto R8 = pi_1[ 0 ];
            SimdVec<TC,1> R9{ R8 };
            auto R10 = di_2[ 0 ];
            SimdVec<TF,2> R11{ R6, R10 };
            SimdVec<TC,1> R12{ cut_i[num_cut] };
            auto R13 = di_0[ 0 ];
            auto R14 = di_3[ 0 ];
            SimdVec<TF,2> R15{ R13, R14 };
            auto R16 = R15 - R11;
            auto R17 = R11 / R16;
            auto R18 = py_3[ 0 ];
            auto R19 = py_0[ 0 ];
            SimdVec<TF,2> R20{ R19, R18 };
            auto R21 = py_2[ 0 ];
            SimdVec<TF,1> R22{ R21 };
            auto R23 = px_0[ 0 ];
            auto R24 = py_1[ 0 ];
            SimdVec<TF,1> R25{ R24 };
            auto R26 = px_3[ 0 ];
            SimdVec<TF,2> R27{ R23, R26 };
            auto R28 = R7 - R27;
            auto R29 = R17 * R28;
            auto R30 = R7 + R29;
            auto R31 = R30[ 0 ];
            SimdVec<TF,1> R32{ R31 };
            SimdVec<TF,2> R33{ R24, R21 };
            auto R34 = R33 - R20;
            auto R35 = R17 * R34;
            auto R36 = R33 + R35;
            auto R37 = R36[ 0 ];
            SimdVec<TF,1> R38{ R37 };
            auto R39 = R30[ 1 ];
            SimdVec<TF,1> R40{ R39 };
            auto R41 = R36[ 1 ];
            SimdVec<TF,1> R42{ R41 };
            py_0 = R42;
            px_0 = R40;
            py_1 = R38;
            px_1 = R32;
            py_2 = R25;
            py_3 = R22;
            pi_0 = R12;
            pi_1 = R12;
            pi_2 = R9;
            px_3 = R5;
            px_2 = R3;
            pi_3 = R1;
            continue;
        }
        case_134: {
            // mod=[4,5],[6,7],7,0,1,2,3,4, swith_cuts=0
            auto R0 = pi_4[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_4[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = px_6[ 0 ];
            SimdVec<TF,2> R5{ R2, R4 };
            auto R6 = pi_3[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = di_4[ 0 ];
            auto R9 = py_3[ 0 ];
            SimdVec<TF,1> R10{ R9 };
            auto R11 = di_6[ 0 ];
            SimdVec<TF,2> R12{ R8, R11 };
            auto R13 = px_3[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = di_5[ 0 ];
            auto R16 = pi_2[ 0 ];
            SimdVec<TC,1> R17{ R16 };
            auto R18 = di_7[ 0 ];
            SimdVec<TF,2> R19{ R15, R18 };
            auto R20 = R19 - R12;
            auto R21 = R12 / R20;
            auto R22 = py_2[ 0 ];
            SimdVec<TF,1> R23{ R22 };
            auto R24 = px_5[ 0 ];
            auto R25 = px_2[ 0 ];
            SimdVec<TF,1> R26{ R25 };
            auto R27 = px_7[ 0 ];
            SimdVec<TF,1> R28{ R27 };
            auto R29 = py_4[ 0 ];
            SimdVec<TF,1> R30{ R29 };
            auto R31 = py_6[ 0 ];
            SimdVec<TF,2> R32{ R29, R31 };
            SimdVec<TF,2> R33{ R24, R27 };
            auto R34 = R5 - R33;
            auto R35 = R21 * R34;
            auto R36 = R5 + R35;
            auto R37 = R36[ 1 ];
            SimdVec<TF,1> R38{ R37 };
            auto R39 = py_5[ 0 ];
            auto R40 = R36[ 0 ];
            SimdVec<TF,1> R41{ R40 };
            auto R42 = py_7[ 0 ];
            SimdVec<TF,1> R43{ R42 };
            SimdVec<TC,1> R44{ cut_i[num_cut] };
            auto R45 = pi_7[ 0 ];
            SimdVec<TC,1> R46{ R45 };
            auto R47 = px_0[ 0 ];
            SimdVec<TF,1> R48{ R47 };
            auto R49 = py_0[ 0 ];
            SimdVec<TF,1> R50{ R49 };
            auto R51 = pi_0[ 0 ];
            SimdVec<TC,1> R52{ R51 };
            auto R53 = px_1[ 0 ];
            SimdVec<TF,1> R54{ R53 };
            auto R55 = py_1[ 0 ];
            SimdVec<TF,1> R56{ R55 };
            auto R57 = pi_1[ 0 ];
            SimdVec<TC,1> R58{ R57 };
            SimdVec<TF,2> R59{ R39, R42 };
            auto R60 = R32 - R59;
            auto R61 = R21 * R60;
            auto R62 = R32 + R61;
            auto R63 = R62[ 1 ];
            SimdVec<TF,1> R64{ R63 };
            auto R65 = R62[ 0 ];
            SimdVec<TF,1> R66{ R65 };
            py_0 = R66;
            py_1 = R64;
            pi_0 = R44;
            pi_4 = R58;
            py_4 = R56;
            px_4 = R54;
            pi_3 = R52;
            py_3 = R50;
            px_3 = R48;
            pi_2 = R46;
            pi_1 = R44;
            py_2 = R43;
            px_0 = R41;
            px_1 = R38;
            py_7 = R30;
            px_2 = R28;
            px_5 = R26;
            py_5 = R23;
            pi_5 = R17;
            px_6 = R14;
            py_6 = R10;
            pi_6 = R7;
            px_7 = R3;
            pi_7 = R1;
            continue;
        }
        case_61: {
            // mod=[5,0],0,1,2,3,[3,4], swith_cuts=0
            auto R0 = pi_3[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_0[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = px_3[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = di_0[ 0 ];
            SimdVec<TF,2> R7{ R2, R4 };
            auto R8 = pi_2[ 0 ];
            SimdVec<TC,1> R9{ R8 };
            auto R10 = di_3[ 0 ];
            SimdVec<TF,2> R11{ R6, R10 };
            auto R12 = py_2[ 0 ];
            SimdVec<TF,1> R13{ R12 };
            auto R14 = di_5[ 0 ];
            auto R15 = px_2[ 0 ];
            SimdVec<TF,1> R16{ R15 };
            auto R17 = di_4[ 0 ];
            SimdVec<TF,2> R18{ R14, R17 };
            auto R19 = R18 - R11;
            auto R20 = R11 / R19;
            auto R21 = pi_1[ 0 ];
            SimdVec<TC,1> R22{ R21 };
            auto R23 = px_5[ 0 ];
            auto R24 = py_1[ 0 ];
            SimdVec<TF,1> R25{ R24 };
            auto R26 = px_4[ 0 ];
            SimdVec<TF,2> R27{ R23, R26 };
            auto R28 = R7 - R27;
            auto R29 = R20 * R28;
            auto R30 = R7 + R29;
            auto R31 = R30[ 1 ];
            SimdVec<TF,1> R32{ R31 };
            auto R33 = py_0[ 0 ];
            SimdVec<TF,1> R34{ R33 };
            auto R35 = py_3[ 0 ];
            SimdVec<TF,1> R36{ R35 };
            auto R37 = py_5[ 0 ];
            SimdVec<TF,2> R38{ R33, R35 };
            auto R39 = R30[ 0 ];
            SimdVec<TF,1> R40{ R39 };
            auto R41 = py_4[ 0 ];
            SimdVec<TF,2> R42{ R37, R41 };
            auto R43 = R38 - R42;
            auto R44 = R20 * R43;
            auto R45 = R38 + R44;
            auto R46 = R45[ 1 ];
            SimdVec<TF,1> R47{ R46 };
            SimdVec<TC,1> R48{ cut_i[num_cut] };
            auto R49 = pi_0[ 0 ];
            SimdVec<TC,1> R50{ R49 };
            auto R51 = px_1[ 0 ];
            SimdVec<TF,1> R52{ R51 };
            auto R53 = R45[ 0 ];
            SimdVec<TF,1> R54{ R53 };
            py_0 = R54;
            pi_0 = R48;
            px_2 = R52;
            pi_1 = R50;
            pi_5 = R48;
            py_5 = R47;
            px_0 = R40;
            py_4 = R36;
            py_1 = R34;
            px_5 = R32;
            py_2 = R25;
            pi_2 = R22;
            px_3 = R16;
            py_3 = R13;
            pi_3 = R9;
            px_4 = R5;
            px_1 = R3;
            pi_4 = R1;
            continue;
        }
        case_86: {
            // mod=[5,6],6,0,1,2,3,[3,4], swith_cuts=1
            auto R0 = pi_3[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_4[ 0 ];
            auto R3 = pi_2[ 0 ];
            SimdVec<TC,1> R4{ R3 };
            auto R5 = px_6[ 0 ];
            SimdVec<TF,1> R6{ R5 };
            auto R7 = di_4[ 0 ];
            SimdVec<TF,2> R8{ R2, R5 };
            auto R9 = py_2[ 0 ];
            SimdVec<TF,1> R10{ R9 };
            auto R11 = di_6[ 0 ];
            SimdVec<TF,2> R12{ R7, R11 };
            auto R13 = px_2[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = di_3[ 0 ];
            auto R16 = pi_1[ 0 ];
            SimdVec<TC,1> R17{ R16 };
            auto R18 = di_5[ 0 ];
            SimdVec<TF,2> R19{ R15, R18 };
            auto R20 = R19 - R12;
            auto R21 = R12 / R20;
            auto R22 = py_1[ 0 ];
            SimdVec<TF,1> R23{ R22 };
            auto R24 = px_3[ 0 ];
            SimdVec<TF,1> R25{ R24 };
            auto R26 = px_5[ 0 ];
            SimdVec<TF,2> R27{ R24, R26 };
            auto R28 = R8 - R27;
            auto R29 = R21 * R28;
            auto R30 = R8 + R29;
            auto R31 = R30[ 0 ];
            SimdVec<TF,1> R32{ R31 };
            auto R33 = py_4[ 0 ];
            auto R34 = R30[ 1 ];
            SimdVec<TF,1> R35{ R34 };
            auto R36 = py_6[ 0 ];
            SimdVec<TF,1> R37{ R36 };
            auto R38 = py_3[ 0 ];
            SimdVec<TF,1> R39{ R38 };
            auto R40 = py_5[ 0 ];
            SimdVec<TF,2> R41{ R38, R40 };
            SimdVec<TF,2> R42{ R33, R36 };
            auto R43 = R42 - R41;
            auto R44 = R21 * R43;
            auto R45 = R42 + R44;
            auto R46 = R45[ 0 ];
            SimdVec<TF,1> R47{ R46 };
            SimdVec<TC,1> R48{ cut_i[num_cut] };
            auto R49 = pi_6[ 0 ];
            SimdVec<TC,1> R50{ R49 };
            auto R51 = px_0[ 0 ];
            SimdVec<TF,1> R52{ R51 };
            auto R53 = py_0[ 0 ];
            SimdVec<TF,1> R54{ R53 };
            auto R55 = pi_0[ 0 ];
            SimdVec<TC,1> R56{ R55 };
            auto R57 = px_1[ 0 ];
            SimdVec<TF,1> R58{ R57 };
            auto R59 = R45[ 1 ];
            SimdVec<TF,1> R60{ R59 };
            py_0 = R60;
            pi_0 = R48;
            px_3 = R58;
            pi_2 = R56;
            py_2 = R54;
            px_2 = R52;
            pi_1 = R50;
            pi_6 = R48;
            py_6 = R47;
            py_5 = R39;
            py_1 = R37;
            px_0 = R35;
            px_6 = R32;
            px_5 = R25;
            py_3 = R23;
            pi_3 = R17;
            px_4 = R14;
            py_4 = R10;
            px_1 = R6;
            pi_4 = R4;
            pi_5 = R1;
            continue;
        }
        case_97: {
            // mod=[6,0],0,1,2,3,4,[4,5], swith_cuts=0
            auto R0 = pi_4[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_6[ 0 ];
            auto R3 = pi_3[ 0 ];
            SimdVec<TC,1> R4{ R3 };
            auto R5 = px_4[ 0 ];
            SimdVec<TF,1> R6{ R5 };
            auto R7 = di_6[ 0 ];
            SimdVec<TF,2> R8{ R2, R5 };
            auto R9 = py_3[ 0 ];
            SimdVec<TF,1> R10{ R9 };
            auto R11 = di_4[ 0 ];
            SimdVec<TF,2> R12{ R7, R11 };
            auto R13 = px_3[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = di_0[ 0 ];
            auto R16 = pi_2[ 0 ];
            SimdVec<TC,1> R17{ R16 };
            auto R18 = di_5[ 0 ];
            SimdVec<TF,2> R19{ R15, R18 };
            auto R20 = R19 - R12;
            auto R21 = R12 / R20;
            auto R22 = py_2[ 0 ];
            SimdVec<TF,1> R23{ R22 };
            auto R24 = px_0[ 0 ];
            SimdVec<TF,1> R25{ R24 };
            auto R26 = px_5[ 0 ];
            SimdVec<TF,2> R27{ R24, R26 };
            auto R28 = R8 - R27;
            auto R29 = R21 * R28;
            auto R30 = R8 + R29;
            auto R31 = R30[ 1 ];
            SimdVec<TF,1> R32{ R31 };
            auto R33 = py_6[ 0 ];
            auto R34 = R30[ 0 ];
            SimdVec<TF,1> R35{ R34 };
            auto R36 = py_4[ 0 ];
            SimdVec<TF,1> R37{ R36 };
            auto R38 = py_0[ 0 ];
            SimdVec<TF,1> R39{ R38 };
            auto R40 = py_5[ 0 ];
            SimdVec<TF,2> R41{ R38, R40 };
            SimdVec<TF,2> R42{ R33, R36 };
            auto R43 = R42 - R41;
            auto R44 = R21 * R43;
            auto R45 = R42 + R44;
            auto R46 = R45[ 1 ];
            SimdVec<TF,1> R47{ R46 };
            SimdVec<TC,1> R48{ cut_i[num_cut] };
            auto R49 = pi_0[ 0 ];
            SimdVec<TC,1> R50{ R49 };
            auto R51 = px_1[ 0 ];
            SimdVec<TF,1> R52{ R51 };
            auto R53 = py_1[ 0 ];
            SimdVec<TF,1> R54{ R53 };
            auto R55 = pi_1[ 0 ];
            SimdVec<TC,1> R56{ R55 };
            auto R57 = px_2[ 0 ];
            SimdVec<TF,1> R58{ R57 };
            auto R59 = R45[ 0 ];
            SimdVec<TF,1> R60{ R59 };
            py_0 = R60;
            pi_0 = R48;
            px_3 = R58;
            pi_2 = R56;
            py_2 = R54;
            px_2 = R52;
            pi_1 = R50;
            pi_6 = R48;
            py_6 = R47;
            py_1 = R39;
            py_5 = R37;
            px_0 = R35;
            px_6 = R32;
            px_1 = R25;
            py_3 = R23;
            pi_3 = R17;
            px_4 = R14;
            py_4 = R10;
            px_5 = R6;
            pi_4 = R4;
            pi_5 = R1;
            continue;
        }
        case_147: {
            // mod=[7,0],0,1,2,3,4,5,[5,6], swith_cuts=1
            auto R0 = pi_5[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_5[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = px_7[ 0 ];
            SimdVec<TF,2> R5{ R2, R4 };
            auto R6 = pi_4[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = di_5[ 0 ];
            auto R9 = py_4[ 0 ];
            SimdVec<TF,1> R10{ R9 };
            auto R11 = di_7[ 0 ];
            SimdVec<TF,2> R12{ R8, R11 };
            auto R13 = px_4[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = di_6[ 0 ];
            auto R16 = pi_3[ 0 ];
            SimdVec<TC,1> R17{ R16 };
            auto R18 = di_0[ 0 ];
            SimdVec<TF,2> R19{ R15, R18 };
            auto R20 = R19 - R12;
            auto R21 = R12 / R20;
            auto R22 = py_3[ 0 ];
            SimdVec<TF,1> R23{ R22 };
            auto R24 = px_6[ 0 ];
            auto R25 = px_3[ 0 ];
            SimdVec<TF,1> R26{ R25 };
            auto R27 = px_0[ 0 ];
            SimdVec<TF,1> R28{ R27 };
            auto R29 = py_5[ 0 ];
            SimdVec<TF,1> R30{ R29 };
            auto R31 = py_7[ 0 ];
            SimdVec<TF,2> R32{ R29, R31 };
            SimdVec<TF,2> R33{ R24, R27 };
            auto R34 = R5 - R33;
            auto R35 = R21 * R34;
            auto R36 = R5 + R35;
            auto R37 = R36[ 0 ];
            SimdVec<TF,1> R38{ R37 };
            auto R39 = py_6[ 0 ];
            auto R40 = R36[ 1 ];
            SimdVec<TF,1> R41{ R40 };
            auto R42 = py_0[ 0 ];
            SimdVec<TF,1> R43{ R42 };
            SimdVec<TC,1> R44{ cut_i[num_cut] };
            auto R45 = pi_0[ 0 ];
            SimdVec<TC,1> R46{ R45 };
            auto R47 = px_1[ 0 ];
            SimdVec<TF,1> R48{ R47 };
            auto R49 = py_1[ 0 ];
            SimdVec<TF,1> R50{ R49 };
            auto R51 = pi_1[ 0 ];
            SimdVec<TC,1> R52{ R51 };
            auto R53 = px_2[ 0 ];
            SimdVec<TF,1> R54{ R53 };
            auto R55 = py_2[ 0 ];
            SimdVec<TF,1> R56{ R55 };
            auto R57 = pi_2[ 0 ];
            SimdVec<TC,1> R58{ R57 };
            SimdVec<TF,2> R59{ R39, R42 };
            auto R60 = R32 - R59;
            auto R61 = R21 * R60;
            auto R62 = R32 + R61;
            auto R63 = R62[ 0 ];
            SimdVec<TF,1> R64{ R63 };
            auto R65 = R62[ 1 ];
            SimdVec<TF,1> R66{ R65 };
            py_0 = R66;
            py_7 = R64;
            pi_0 = R44;
            pi_3 = R58;
            py_3 = R56;
            px_3 = R54;
            pi_2 = R52;
            py_2 = R50;
            px_2 = R48;
            pi_1 = R46;
            pi_7 = R44;
            py_1 = R43;
            px_0 = R41;
            px_7 = R38;
            py_6 = R30;
            px_1 = R28;
            px_4 = R26;
            py_4 = R23;
            pi_4 = R17;
            px_5 = R14;
            py_5 = R10;
            pi_5 = R7;
            px_6 = R3;
            pi_6 = R1;
            continue;
        }
        case_180: {
            nodes_size = 10;
            // mod=0,1,2,3,4,[4,5],[5,6],6,7,8, swith_cuts=1
            auto R0 = pi_8[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_0[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_0[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_0[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_1[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = py_1[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = pi_1[ 0 ];
            SimdVec<TC,1> R13{ R12 };
            auto R14 = px_2[ 0 ];
            SimdVec<TF,1> R15{ R14 };
            auto R16 = py_2[ 0 ];
            SimdVec<TF,1> R17{ R16 };
            auto R18 = pi_2[ 0 ];
            SimdVec<TC,1> R19{ R18 };
            auto R20 = px_3[ 0 ];
            SimdVec<TF,1> R21{ R20 };
            auto R22 = py_3[ 0 ];
            SimdVec<TF,1> R23{ R22 };
            auto R24 = pi_3[ 0 ];
            SimdVec<TC,1> R25{ R24 };
            auto R26 = px_4[ 0 ];
            SimdVec<TF,1> R27{ R26 };
            auto R28 = py_4[ 0 ];
            SimdVec<TF,1> R29{ R28 };
            auto R30 = pi_4[ 0 ];
            SimdVec<TC,1> R31{ R30 };
            auto R32 = px_5[ 0 ];
            SimdVec<TF,2> R33{ R32, R26 };
            auto R34 = py_8[ 0 ];
            SimdVec<TF,1> R35{ R34 };
            auto R36 = di_5[ 0 ];
            auto R37 = px_8[ 0 ];
            SimdVec<TF,1> R38{ R37 };
            auto R39 = di_4[ 0 ];
            SimdVec<TF,2> R40{ R36, R39 };
            auto R41 = pi_7[ 0 ];
            SimdVec<TC,1> R42{ R41 };
            auto R43 = di_6[ 0 ];
            SimdVec<TF,2> R44{ R43, R36 };
            auto R45 = R44 - R40;
            auto R46 = R40 / R45;
            auto R47 = py_7[ 0 ];
            SimdVec<TF,1> R48{ R47 };
            auto R49 = px_6[ 0 ];
            SimdVec<TF,1> R50{ R49 };
            auto R51 = py_5[ 0 ];
            SimdVec<TF,2> R52{ R51, R28 };
            SimdVec<TF,2> R53{ R49, R32 };
            auto R54 = R33 - R53;
            auto R55 = R46 * R54;
            auto R56 = R33 + R55;
            auto R57 = R56[ 0 ];
            SimdVec<TF,1> R58{ R57 };
            auto R59 = py_6[ 0 ];
            SimdVec<TF,1> R60{ R59 };
            SimdVec<TC,1> R61{ cut_i[num_cut] };
            auto R62 = pi_6[ 0 ];
            SimdVec<TC,1> R63{ R62 };
            auto R64 = px_7[ 0 ];
            SimdVec<TF,1> R65{ R64 };
            auto R66 = R56[ 1 ];
            SimdVec<TF,1> R67{ R66 };
            SimdVec<TF,2> R68{ R59, R51 };
            auto R69 = R52 - R68;
            auto R70 = R46 * R69;
            auto R71 = R52 + R70;
            auto R72 = R71[ 0 ];
            SimdVec<TF,1> R73{ R72 };
            auto R74 = R71[ 1 ];
            SimdVec<TF,1> R75{ R74 };
            py_5 = R75;
            py_6 = R73;
            pi_5 = R61;
            px_5 = R67;
            px_8 = R65;
            pi_7 = R63;
            pi_6 = R61;
            py_7 = R60;
            px_6 = R58;
            px_7 = R50;
            py_8 = R48;
            pi_8 = R42;
            px_9 = R38;
            py_9 = R35;
            pi_4 = R31;
            py_4 = R29;
            px_4 = R27;
            pi_3 = R25;
            py_3 = R23;
            px_3 = R21;
            pi_2 = R19;
            py_2 = R17;
            px_2 = R15;
            pi_1 = R13;
            py_1 = R11;
            px_1 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_9 = R1;
            continue;
        }
        case_175: {
            nodes_size = 10;
            // mod=0,1,2,3,[3,4],[4,5],5,6,7,8, swith_cuts=1
            auto R0 = pi_8[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_0[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_0[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_0[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_1[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = py_1[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = pi_1[ 0 ];
            SimdVec<TC,1> R13{ R12 };
            auto R14 = px_2[ 0 ];
            SimdVec<TF,1> R15{ R14 };
            auto R16 = py_2[ 0 ];
            SimdVec<TF,1> R17{ R16 };
            auto R18 = pi_2[ 0 ];
            SimdVec<TC,1> R19{ R18 };
            auto R20 = px_3[ 0 ];
            SimdVec<TF,1> R21{ R20 };
            auto R22 = py_3[ 0 ];
            SimdVec<TF,1> R23{ R22 };
            auto R24 = pi_3[ 0 ];
            SimdVec<TC,1> R25{ R24 };
            auto R26 = px_4[ 0 ];
            SimdVec<TF,2> R27{ R26, R20 };
            auto R28 = py_8[ 0 ];
            SimdVec<TF,1> R29{ R28 };
            auto R30 = di_4[ 0 ];
            auto R31 = px_8[ 0 ];
            SimdVec<TF,1> R32{ R31 };
            auto R33 = di_3[ 0 ];
            SimdVec<TF,2> R34{ R30, R33 };
            auto R35 = pi_7[ 0 ];
            SimdVec<TC,1> R36{ R35 };
            auto R37 = di_5[ 0 ];
            SimdVec<TF,2> R38{ R37, R30 };
            auto R39 = R38 - R34;
            auto R40 = R34 / R39;
            auto R41 = py_7[ 0 ];
            SimdVec<TF,1> R42{ R41 };
            auto R43 = px_5[ 0 ];
            SimdVec<TF,1> R44{ R43 };
            auto R45 = py_4[ 0 ];
            SimdVec<TF,2> R46{ R45, R22 };
            SimdVec<TF,2> R47{ R43, R26 };
            auto R48 = R27 - R47;
            auto R49 = R40 * R48;
            auto R50 = R27 + R49;
            auto R51 = R50[ 0 ];
            SimdVec<TF,1> R52{ R51 };
            auto R53 = py_5[ 0 ];
            SimdVec<TF,1> R54{ R53 };
            SimdVec<TC,1> R55{ cut_i[num_cut] };
            auto R56 = pi_5[ 0 ];
            SimdVec<TC,1> R57{ R56 };
            auto R58 = px_6[ 0 ];
            SimdVec<TF,1> R59{ R58 };
            auto R60 = py_6[ 0 ];
            SimdVec<TF,1> R61{ R60 };
            auto R62 = pi_6[ 0 ];
            SimdVec<TC,1> R63{ R62 };
            auto R64 = px_7[ 0 ];
            SimdVec<TF,1> R65{ R64 };
            auto R66 = R50[ 1 ];
            SimdVec<TF,1> R67{ R66 };
            SimdVec<TF,2> R68{ R53, R45 };
            auto R69 = R46 - R68;
            auto R70 = R40 * R69;
            auto R71 = R46 + R70;
            auto R72 = R71[ 0 ];
            SimdVec<TF,1> R73{ R72 };
            auto R74 = R71[ 1 ];
            SimdVec<TF,1> R75{ R74 };
            py_4 = R75;
            py_5 = R73;
            pi_4 = R55;
            px_4 = R67;
            px_8 = R65;
            pi_7 = R63;
            py_7 = R61;
            px_7 = R59;
            pi_6 = R57;
            pi_5 = R55;
            py_6 = R54;
            px_5 = R52;
            px_6 = R44;
            py_8 = R42;
            pi_8 = R36;
            px_9 = R32;
            py_9 = R29;
            pi_3 = R25;
            py_3 = R23;
            px_3 = R21;
            pi_2 = R19;
            py_2 = R17;
            px_2 = R15;
            pi_1 = R13;
            py_1 = R11;
            px_1 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_9 = R1;
            continue;
        }
        case_171: {
            nodes_size = 10;
            // mod=0,1,2,[2,3],[3,4],4,5,6,7,8, swith_cuts=1
            auto R0 = pi_8[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_0[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_0[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_0[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_1[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = py_1[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = pi_1[ 0 ];
            SimdVec<TC,1> R13{ R12 };
            auto R14 = px_2[ 0 ];
            SimdVec<TF,1> R15{ R14 };
            auto R16 = py_2[ 0 ];
            SimdVec<TF,1> R17{ R16 };
            auto R18 = pi_2[ 0 ];
            SimdVec<TC,1> R19{ R18 };
            auto R20 = px_4[ 0 ];
            SimdVec<TF,1> R21{ R20 };
            auto R22 = di_4[ 0 ];
            SimdVec<TF,2> R23{ R20, R14 };
            auto R24 = py_8[ 0 ];
            SimdVec<TF,1> R25{ R24 };
            auto R26 = di_2[ 0 ];
            SimdVec<TF,2> R27{ R22, R26 };
            auto R28 = px_8[ 0 ];
            SimdVec<TF,1> R29{ R28 };
            auto R30 = di_3[ 0 ];
            SimdVec<TF,2> R31{ R30, R30 };
            auto R32 = R31 - R27;
            auto R33 = R27 / R32;
            auto R34 = pi_7[ 0 ];
            SimdVec<TC,1> R35{ R34 };
            auto R36 = px_3[ 0 ];
            SimdVec<TF,2> R37{ R36, R36 };
            auto R38 = R23 - R37;
            auto R39 = R33 * R38;
            auto R40 = R23 + R39;
            auto R41 = R40[ 0 ];
            SimdVec<TF,1> R42{ R41 };
            auto R43 = py_4[ 0 ];
            SimdVec<TF,1> R44{ R43 };
            auto R45 = py_3[ 0 ];
            SimdVec<TF,2> R46{ R45, R45 };
            SimdVec<TF,2> R47{ R43, R16 };
            auto R48 = R47 - R46;
            auto R49 = R33 * R48;
            auto R50 = R47 + R49;
            auto R51 = R50[ 0 ];
            SimdVec<TF,1> R52{ R51 };
            SimdVec<TC,1> R53{ cut_i[num_cut] };
            auto R54 = pi_4[ 0 ];
            SimdVec<TC,1> R55{ R54 };
            auto R56 = px_5[ 0 ];
            SimdVec<TF,1> R57{ R56 };
            auto R58 = py_5[ 0 ];
            SimdVec<TF,1> R59{ R58 };
            auto R60 = pi_5[ 0 ];
            SimdVec<TC,1> R61{ R60 };
            auto R62 = px_6[ 0 ];
            SimdVec<TF,1> R63{ R62 };
            auto R64 = py_6[ 0 ];
            SimdVec<TF,1> R65{ R64 };
            auto R66 = pi_6[ 0 ];
            SimdVec<TC,1> R67{ R66 };
            auto R68 = px_7[ 0 ];
            SimdVec<TF,1> R69{ R68 };
            auto R70 = py_7[ 0 ];
            SimdVec<TF,1> R71{ R70 };
            auto R72 = R40[ 1 ];
            SimdVec<TF,1> R73{ R72 };
            auto R74 = R50[ 1 ];
            SimdVec<TF,1> R75{ R74 };
            py_3 = R75;
            px_3 = R73;
            pi_3 = R53;
            py_8 = R71;
            px_8 = R69;
            pi_7 = R67;
            py_7 = R65;
            px_7 = R63;
            pi_6 = R61;
            py_6 = R59;
            px_6 = R57;
            pi_5 = R55;
            pi_4 = R53;
            py_4 = R52;
            py_5 = R44;
            px_4 = R42;
            pi_8 = R35;
            px_9 = R29;
            py_9 = R25;
            px_5 = R21;
            pi_2 = R19;
            py_2 = R17;
            px_2 = R15;
            pi_1 = R13;
            py_1 = R11;
            px_1 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_9 = R1;
            continue;
        }
        case_168: {
            nodes_size = 10;
            // mod=0,1,[1,2],[2,3],3,4,5,6,7,8, swith_cuts=1
            auto R0 = pi_8[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_0[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_0[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_0[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_1[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = py_1[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = pi_1[ 0 ];
            SimdVec<TC,1> R13{ R12 };
            auto R14 = px_2[ 0 ];
            SimdVec<TF,2> R15{ R14, R8 };
            auto R16 = py_8[ 0 ];
            SimdVec<TF,1> R17{ R16 };
            auto R18 = di_2[ 0 ];
            auto R19 = px_8[ 0 ];
            SimdVec<TF,1> R20{ R19 };
            auto R21 = di_1[ 0 ];
            SimdVec<TF,2> R22{ R18, R21 };
            auto R23 = pi_7[ 0 ];
            SimdVec<TC,1> R24{ R23 };
            auto R25 = di_3[ 0 ];
            SimdVec<TF,2> R26{ R25, R18 };
            auto R27 = R26 - R22;
            auto R28 = R22 / R27;
            auto R29 = py_7[ 0 ];
            SimdVec<TF,1> R30{ R29 };
            auto R31 = px_3[ 0 ];
            SimdVec<TF,1> R32{ R31 };
            auto R33 = py_2[ 0 ];
            SimdVec<TF,2> R34{ R33, R10 };
            SimdVec<TF,2> R35{ R31, R14 };
            auto R36 = R15 - R35;
            auto R37 = R28 * R36;
            auto R38 = R15 + R37;
            auto R39 = R38[ 0 ];
            SimdVec<TF,1> R40{ R39 };
            auto R41 = py_3[ 0 ];
            SimdVec<TF,1> R42{ R41 };
            SimdVec<TC,1> R43{ cut_i[num_cut] };
            auto R44 = pi_3[ 0 ];
            SimdVec<TC,1> R45{ R44 };
            auto R46 = px_4[ 0 ];
            SimdVec<TF,1> R47{ R46 };
            auto R48 = py_4[ 0 ];
            SimdVec<TF,1> R49{ R48 };
            auto R50 = pi_4[ 0 ];
            SimdVec<TC,1> R51{ R50 };
            auto R52 = px_5[ 0 ];
            SimdVec<TF,1> R53{ R52 };
            auto R54 = py_5[ 0 ];
            SimdVec<TF,1> R55{ R54 };
            auto R56 = pi_5[ 0 ];
            SimdVec<TC,1> R57{ R56 };
            auto R58 = px_6[ 0 ];
            SimdVec<TF,1> R59{ R58 };
            auto R60 = py_6[ 0 ];
            SimdVec<TF,1> R61{ R60 };
            auto R62 = pi_6[ 0 ];
            SimdVec<TC,1> R63{ R62 };
            auto R64 = px_7[ 0 ];
            SimdVec<TF,1> R65{ R64 };
            auto R66 = R38[ 1 ];
            SimdVec<TF,1> R67{ R66 };
            SimdVec<TF,2> R68{ R41, R33 };
            auto R69 = R34 - R68;
            auto R70 = R28 * R69;
            auto R71 = R34 + R70;
            auto R72 = R71[ 0 ];
            SimdVec<TF,1> R73{ R72 };
            auto R74 = R71[ 1 ];
            SimdVec<TF,1> R75{ R74 };
            py_2 = R75;
            py_3 = R73;
            pi_2 = R43;
            px_2 = R67;
            px_8 = R65;
            pi_7 = R63;
            py_7 = R61;
            px_7 = R59;
            pi_6 = R57;
            py_6 = R55;
            px_6 = R53;
            pi_5 = R51;
            py_5 = R49;
            px_5 = R47;
            pi_4 = R45;
            pi_3 = R43;
            py_4 = R42;
            px_3 = R40;
            px_4 = R32;
            py_8 = R30;
            pi_8 = R24;
            px_9 = R20;
            py_9 = R17;
            pi_1 = R13;
            py_1 = R11;
            px_1 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_9 = R1;
            continue;
        }
        case_193: {
            nodes_size = 10;
            // mod=1,2,3,4,5,6,[6,7],[7,8],8,0, swith_cuts=0
            auto R0 = pi_0[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_1[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_1[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_1[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_2[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = py_2[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = pi_2[ 0 ];
            SimdVec<TC,1> R13{ R12 };
            auto R14 = px_3[ 0 ];
            SimdVec<TF,1> R15{ R14 };
            auto R16 = py_3[ 0 ];
            SimdVec<TF,1> R17{ R16 };
            auto R18 = pi_3[ 0 ];
            SimdVec<TC,1> R19{ R18 };
            auto R20 = px_4[ 0 ];
            SimdVec<TF,1> R21{ R20 };
            auto R22 = py_4[ 0 ];
            SimdVec<TF,1> R23{ R22 };
            auto R24 = pi_4[ 0 ];
            SimdVec<TC,1> R25{ R24 };
            auto R26 = px_5[ 0 ];
            SimdVec<TF,1> R27{ R26 };
            auto R28 = py_5[ 0 ];
            SimdVec<TF,1> R29{ R28 };
            auto R30 = pi_5[ 0 ];
            SimdVec<TC,1> R31{ R30 };
            auto R32 = px_6[ 0 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = py_6[ 0 ];
            SimdVec<TF,1> R35{ R34 };
            auto R36 = pi_6[ 0 ];
            SimdVec<TC,1> R37{ R36 };
            auto R38 = px_8[ 0 ];
            SimdVec<TF,1> R39{ R38 };
            auto R40 = di_6[ 0 ];
            SimdVec<TF,2> R41{ R32, R38 };
            auto R42 = py_0[ 0 ];
            SimdVec<TF,1> R43{ R42 };
            auto R44 = di_8[ 0 ];
            SimdVec<TF,2> R45{ R40, R44 };
            auto R46 = px_0[ 0 ];
            SimdVec<TF,1> R47{ R46 };
            auto R48 = di_7[ 0 ];
            SimdVec<TF,2> R49{ R48, R48 };
            auto R50 = R49 - R45;
            auto R51 = R45 / R50;
            auto R52 = pi_8[ 0 ];
            SimdVec<TC,1> R53{ R52 };
            auto R54 = px_7[ 0 ];
            SimdVec<TF,2> R55{ R54, R54 };
            auto R56 = R41 - R55;
            auto R57 = R51 * R56;
            auto R58 = R41 + R57;
            auto R59 = R58[ 1 ];
            SimdVec<TF,1> R60{ R59 };
            auto R61 = py_8[ 0 ];
            SimdVec<TF,1> R62{ R61 };
            auto R63 = py_7[ 0 ];
            SimdVec<TF,2> R64{ R63, R63 };
            SimdVec<TF,2> R65{ R34, R61 };
            auto R66 = R65 - R64;
            auto R67 = R51 * R66;
            auto R68 = R65 + R67;
            auto R69 = R68[ 1 ];
            SimdVec<TF,1> R70{ R69 };
            SimdVec<TC,1> R71{ cut_i[num_cut] };
            auto R72 = R58[ 0 ];
            SimdVec<TF,1> R73{ R72 };
            auto R74 = R68[ 0 ];
            SimdVec<TF,1> R75{ R74 };
            py_6 = R75;
            px_6 = R73;
            pi_6 = R71;
            pi_7 = R71;
            py_7 = R70;
            py_8 = R62;
            px_7 = R60;
            pi_8 = R53;
            px_9 = R47;
            py_9 = R43;
            px_8 = R39;
            pi_5 = R37;
            py_5 = R35;
            px_5 = R33;
            pi_4 = R31;
            py_4 = R29;
            px_4 = R27;
            pi_3 = R25;
            py_3 = R23;
            px_3 = R21;
            pi_2 = R19;
            py_2 = R17;
            px_2 = R15;
            pi_1 = R13;
            py_1 = R11;
            px_1 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_9 = R1;
            continue;
        }
        case_186: {
            nodes_size = 10;
            // mod=1,2,3,4,5,[5,6],[6,7],7,8,0, swith_cuts=0
            auto R0 = pi_0[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_1[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_1[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_1[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_2[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = py_2[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = pi_2[ 0 ];
            SimdVec<TC,1> R13{ R12 };
            auto R14 = px_3[ 0 ];
            SimdVec<TF,1> R15{ R14 };
            auto R16 = py_3[ 0 ];
            SimdVec<TF,1> R17{ R16 };
            auto R18 = pi_3[ 0 ];
            SimdVec<TC,1> R19{ R18 };
            auto R20 = px_4[ 0 ];
            SimdVec<TF,1> R21{ R20 };
            auto R22 = py_4[ 0 ];
            SimdVec<TF,1> R23{ R22 };
            auto R24 = pi_4[ 0 ];
            SimdVec<TC,1> R25{ R24 };
            auto R26 = px_5[ 0 ];
            SimdVec<TF,1> R27{ R26 };
            auto R28 = py_5[ 0 ];
            SimdVec<TF,1> R29{ R28 };
            auto R30 = pi_5[ 0 ];
            SimdVec<TC,1> R31{ R30 };
            auto R32 = px_7[ 0 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = di_5[ 0 ];
            SimdVec<TF,2> R35{ R26, R32 };
            auto R36 = py_0[ 0 ];
            SimdVec<TF,1> R37{ R36 };
            auto R38 = di_7[ 0 ];
            SimdVec<TF,2> R39{ R34, R38 };
            auto R40 = px_0[ 0 ];
            SimdVec<TF,1> R41{ R40 };
            auto R42 = di_6[ 0 ];
            SimdVec<TF,2> R43{ R42, R42 };
            auto R44 = R43 - R39;
            auto R45 = R39 / R44;
            auto R46 = pi_8[ 0 ];
            SimdVec<TC,1> R47{ R46 };
            auto R48 = px_6[ 0 ];
            SimdVec<TF,2> R49{ R48, R48 };
            auto R50 = R35 - R49;
            auto R51 = R45 * R50;
            auto R52 = R35 + R51;
            auto R53 = R52[ 1 ];
            SimdVec<TF,1> R54{ R53 };
            auto R55 = py_7[ 0 ];
            SimdVec<TF,1> R56{ R55 };
            auto R57 = py_6[ 0 ];
            SimdVec<TF,2> R58{ R57, R57 };
            SimdVec<TF,2> R59{ R28, R55 };
            auto R60 = R59 - R58;
            auto R61 = R45 * R60;
            auto R62 = R59 + R61;
            auto R63 = R62[ 1 ];
            SimdVec<TF,1> R64{ R63 };
            SimdVec<TC,1> R65{ cut_i[num_cut] };
            auto R66 = pi_7[ 0 ];
            SimdVec<TC,1> R67{ R66 };
            auto R68 = px_8[ 0 ];
            SimdVec<TF,1> R69{ R68 };
            auto R70 = py_8[ 0 ];
            SimdVec<TF,1> R71{ R70 };
            auto R72 = R52[ 0 ];
            SimdVec<TF,1> R73{ R72 };
            auto R74 = R62[ 0 ];
            SimdVec<TF,1> R75{ R74 };
            py_5 = R75;
            px_5 = R73;
            pi_5 = R65;
            py_8 = R71;
            px_8 = R69;
            pi_7 = R67;
            pi_6 = R65;
            py_6 = R64;
            py_7 = R56;
            px_6 = R54;
            pi_8 = R47;
            px_9 = R41;
            py_9 = R37;
            px_7 = R33;
            pi_4 = R31;
            py_4 = R29;
            px_4 = R27;
            pi_3 = R25;
            py_3 = R23;
            px_3 = R21;
            pi_2 = R19;
            py_2 = R17;
            px_2 = R15;
            pi_1 = R13;
            py_1 = R11;
            px_1 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_9 = R1;
            continue;
        }
        case_201: {
            nodes_size = 10;
            // mod=4,5,6,7,[7,8],[8,0],0,1,2,3, swith_cuts=0
            auto R0 = pi_3[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_4[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_4[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_4[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_5[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = py_5[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = pi_5[ 0 ];
            SimdVec<TC,1> R13{ R12 };
            auto R14 = px_6[ 0 ];
            SimdVec<TF,1> R15{ R14 };
            auto R16 = py_6[ 0 ];
            SimdVec<TF,1> R17{ R16 };
            auto R18 = pi_6[ 0 ];
            SimdVec<TC,1> R19{ R18 };
            auto R20 = px_7[ 0 ];
            SimdVec<TF,1> R21{ R20 };
            auto R22 = py_7[ 0 ];
            SimdVec<TF,1> R23{ R22 };
            auto R24 = pi_7[ 0 ];
            SimdVec<TC,1> R25{ R24 };
            auto R26 = px_0[ 0 ];
            SimdVec<TF,1> R27{ R26 };
            auto R28 = di_7[ 0 ];
            SimdVec<TF,2> R29{ R20, R26 };
            auto R30 = py_3[ 0 ];
            SimdVec<TF,1> R31{ R30 };
            auto R32 = di_0[ 0 ];
            SimdVec<TF,2> R33{ R28, R32 };
            auto R34 = px_3[ 0 ];
            SimdVec<TF,1> R35{ R34 };
            auto R36 = di_8[ 0 ];
            SimdVec<TF,2> R37{ R36, R36 };
            auto R38 = R37 - R33;
            auto R39 = R33 / R38;
            auto R40 = pi_2[ 0 ];
            SimdVec<TC,1> R41{ R40 };
            auto R42 = px_8[ 0 ];
            SimdVec<TF,2> R43{ R42, R42 };
            auto R44 = R29 - R43;
            auto R45 = R39 * R44;
            auto R46 = R29 + R45;
            auto R47 = R46[ 1 ];
            SimdVec<TF,1> R48{ R47 };
            auto R49 = py_0[ 0 ];
            SimdVec<TF,1> R50{ R49 };
            auto R51 = py_8[ 0 ];
            SimdVec<TF,2> R52{ R51, R51 };
            SimdVec<TF,2> R53{ R22, R49 };
            auto R54 = R53 - R52;
            auto R55 = R39 * R54;
            auto R56 = R53 + R55;
            auto R57 = R56[ 1 ];
            SimdVec<TF,1> R58{ R57 };
            SimdVec<TC,1> R59{ cut_i[num_cut] };
            auto R60 = pi_0[ 0 ];
            SimdVec<TC,1> R61{ R60 };
            auto R62 = px_1[ 0 ];
            SimdVec<TF,1> R63{ R62 };
            auto R64 = py_1[ 0 ];
            SimdVec<TF,1> R65{ R64 };
            auto R66 = pi_1[ 0 ];
            SimdVec<TC,1> R67{ R66 };
            auto R68 = px_2[ 0 ];
            SimdVec<TF,1> R69{ R68 };
            auto R70 = py_2[ 0 ];
            SimdVec<TF,1> R71{ R70 };
            auto R72 = R46[ 0 ];
            SimdVec<TF,1> R73{ R72 };
            auto R74 = R56[ 0 ];
            SimdVec<TF,1> R75{ R74 };
            py_4 = R75;
            px_4 = R73;
            pi_4 = R59;
            py_8 = R71;
            px_8 = R69;
            pi_7 = R67;
            py_7 = R65;
            px_7 = R63;
            pi_6 = R61;
            pi_5 = R59;
            py_5 = R58;
            py_6 = R50;
            px_5 = R48;
            pi_8 = R41;
            px_9 = R35;
            py_9 = R31;
            px_6 = R27;
            pi_3 = R25;
            py_3 = R23;
            px_3 = R21;
            pi_2 = R19;
            py_2 = R17;
            px_2 = R15;
            pi_1 = R13;
            py_1 = R11;
            px_1 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_9 = R1;
            continue;
        }
        case_165: {
            nodes_size = 10;
            // mod=7,8,[8,0],[0,1],1,2,3,4,5,6, swith_cuts=0
            auto R0 = pi_6[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_7[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_7[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_7[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_8[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = py_8[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = pi_8[ 0 ];
            SimdVec<TC,1> R13{ R12 };
            auto R14 = px_1[ 0 ];
            SimdVec<TF,1> R15{ R14 };
            auto R16 = di_8[ 0 ];
            SimdVec<TF,2> R17{ R8, R14 };
            auto R18 = py_6[ 0 ];
            SimdVec<TF,1> R19{ R18 };
            auto R20 = di_1[ 0 ];
            SimdVec<TF,2> R21{ R16, R20 };
            auto R22 = px_6[ 0 ];
            SimdVec<TF,1> R23{ R22 };
            auto R24 = di_0[ 0 ];
            SimdVec<TF,2> R25{ R24, R24 };
            auto R26 = R25 - R21;
            auto R27 = R21 / R26;
            auto R28 = pi_5[ 0 ];
            SimdVec<TC,1> R29{ R28 };
            auto R30 = px_0[ 0 ];
            SimdVec<TF,2> R31{ R30, R30 };
            auto R32 = R17 - R31;
            auto R33 = R27 * R32;
            auto R34 = R17 + R33;
            auto R35 = R34[ 1 ];
            SimdVec<TF,1> R36{ R35 };
            auto R37 = py_1[ 0 ];
            SimdVec<TF,1> R38{ R37 };
            auto R39 = py_0[ 0 ];
            SimdVec<TF,2> R40{ R39, R39 };
            SimdVec<TF,2> R41{ R10, R37 };
            auto R42 = R41 - R40;
            auto R43 = R27 * R42;
            auto R44 = R41 + R43;
            auto R45 = R44[ 1 ];
            SimdVec<TF,1> R46{ R45 };
            SimdVec<TC,1> R47{ cut_i[num_cut] };
            auto R48 = pi_1[ 0 ];
            SimdVec<TC,1> R49{ R48 };
            auto R50 = px_2[ 0 ];
            SimdVec<TF,1> R51{ R50 };
            auto R52 = py_2[ 0 ];
            SimdVec<TF,1> R53{ R52 };
            auto R54 = pi_2[ 0 ];
            SimdVec<TC,1> R55{ R54 };
            auto R56 = px_3[ 0 ];
            SimdVec<TF,1> R57{ R56 };
            auto R58 = py_3[ 0 ];
            SimdVec<TF,1> R59{ R58 };
            auto R60 = pi_3[ 0 ];
            SimdVec<TC,1> R61{ R60 };
            auto R62 = px_4[ 0 ];
            SimdVec<TF,1> R63{ R62 };
            auto R64 = py_4[ 0 ];
            SimdVec<TF,1> R65{ R64 };
            auto R66 = pi_4[ 0 ];
            SimdVec<TC,1> R67{ R66 };
            auto R68 = px_5[ 0 ];
            SimdVec<TF,1> R69{ R68 };
            auto R70 = py_5[ 0 ];
            SimdVec<TF,1> R71{ R70 };
            auto R72 = R34[ 0 ];
            SimdVec<TF,1> R73{ R72 };
            auto R74 = R44[ 0 ];
            SimdVec<TF,1> R75{ R74 };
            py_2 = R75;
            px_2 = R73;
            pi_2 = R47;
            py_8 = R71;
            px_8 = R69;
            pi_7 = R67;
            py_7 = R65;
            px_7 = R63;
            pi_6 = R61;
            py_6 = R59;
            px_6 = R57;
            pi_5 = R55;
            py_5 = R53;
            px_5 = R51;
            pi_4 = R49;
            pi_3 = R47;
            py_3 = R46;
            py_4 = R38;
            px_3 = R36;
            pi_8 = R29;
            px_9 = R23;
            py_9 = R19;
            px_4 = R15;
            pi_1 = R13;
            py_1 = R11;
            px_1 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_9 = R1;
            continue;
        }
        case_166: {
            nodes_size = 10;
            // mod=8,0,[0,1],[1,2],2,3,4,5,6,7, swith_cuts=0
            auto R0 = pi_7[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_8[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_8[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_8[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_0[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = py_0[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = pi_0[ 0 ];
            SimdVec<TC,1> R13{ R12 };
            auto R14 = px_2[ 0 ];
            SimdVec<TF,1> R15{ R14 };
            auto R16 = di_0[ 0 ];
            SimdVec<TF,2> R17{ R8, R14 };
            auto R18 = py_7[ 0 ];
            SimdVec<TF,1> R19{ R18 };
            auto R20 = di_2[ 0 ];
            SimdVec<TF,2> R21{ R16, R20 };
            auto R22 = px_7[ 0 ];
            SimdVec<TF,1> R23{ R22 };
            auto R24 = di_1[ 0 ];
            SimdVec<TF,2> R25{ R24, R24 };
            auto R26 = R25 - R21;
            auto R27 = R21 / R26;
            auto R28 = pi_6[ 0 ];
            SimdVec<TC,1> R29{ R28 };
            auto R30 = px_1[ 0 ];
            SimdVec<TF,2> R31{ R30, R30 };
            auto R32 = R17 - R31;
            auto R33 = R27 * R32;
            auto R34 = R17 + R33;
            auto R35 = R34[ 1 ];
            SimdVec<TF,1> R36{ R35 };
            auto R37 = py_2[ 0 ];
            SimdVec<TF,1> R38{ R37 };
            auto R39 = py_1[ 0 ];
            SimdVec<TF,2> R40{ R39, R39 };
            SimdVec<TF,2> R41{ R10, R37 };
            auto R42 = R41 - R40;
            auto R43 = R27 * R42;
            auto R44 = R41 + R43;
            auto R45 = R44[ 1 ];
            SimdVec<TF,1> R46{ R45 };
            SimdVec<TC,1> R47{ cut_i[num_cut] };
            auto R48 = pi_2[ 0 ];
            SimdVec<TC,1> R49{ R48 };
            auto R50 = px_3[ 0 ];
            SimdVec<TF,1> R51{ R50 };
            auto R52 = py_3[ 0 ];
            SimdVec<TF,1> R53{ R52 };
            auto R54 = pi_3[ 0 ];
            SimdVec<TC,1> R55{ R54 };
            auto R56 = px_4[ 0 ];
            SimdVec<TF,1> R57{ R56 };
            auto R58 = py_4[ 0 ];
            SimdVec<TF,1> R59{ R58 };
            auto R60 = pi_4[ 0 ];
            SimdVec<TC,1> R61{ R60 };
            auto R62 = px_5[ 0 ];
            SimdVec<TF,1> R63{ R62 };
            auto R64 = py_5[ 0 ];
            SimdVec<TF,1> R65{ R64 };
            auto R66 = pi_5[ 0 ];
            SimdVec<TC,1> R67{ R66 };
            auto R68 = px_6[ 0 ];
            SimdVec<TF,1> R69{ R68 };
            auto R70 = py_6[ 0 ];
            SimdVec<TF,1> R71{ R70 };
            auto R72 = R34[ 0 ];
            SimdVec<TF,1> R73{ R72 };
            auto R74 = R44[ 0 ];
            SimdVec<TF,1> R75{ R74 };
            py_2 = R75;
            px_2 = R73;
            pi_2 = R47;
            py_8 = R71;
            px_8 = R69;
            pi_7 = R67;
            py_7 = R65;
            px_7 = R63;
            pi_6 = R61;
            py_6 = R59;
            px_6 = R57;
            pi_5 = R55;
            py_5 = R53;
            px_5 = R51;
            pi_4 = R49;
            pi_3 = R47;
            py_3 = R46;
            py_4 = R38;
            px_3 = R36;
            pi_8 = R29;
            px_9 = R23;
            py_9 = R19;
            px_4 = R15;
            pi_1 = R13;
            py_1 = R11;
            px_1 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_9 = R1;
            continue;
        }
        case_40: {
            nodes_size = 3;
            // mod=0,[0,1],[4,0], swith_cuts=0
            SimdVec<TC,1> R0{ cut_i[num_cut] };
            auto R1 = px_0[ 0 ];
            SimdVec<TF,2> R2{ R1, R1 };
            SimdVec<TF,1> R3{ R1 };
            auto R4 = py_0[ 0 ];
            SimdVec<TF,2> R5{ R4, R4 };
            SimdVec<TF,1> R6{ R4 };
            auto R7 = pi_0[ 0 ];
            SimdVec<TC,1> R8{ R7 };
            auto R9 = px_1[ 0 ];
            auto R10 = px_4[ 0 ];
            SimdVec<TF,2> R11{ R9, R10 };
            auto R12 = R11 - R2;
            auto R13 = py_4[ 0 ];
            auto R14 = py_1[ 0 ];
            SimdVec<TF,2> R15{ R14, R13 };
            auto R16 = R15 - R5;
            auto R17 = di_0[ 0 ];
            SimdVec<TF,2> R18{ R17, R17 };
            auto R19 = di_4[ 0 ];
            auto R20 = di_1[ 0 ];
            SimdVec<TF,2> R21{ R20, R19 };
            auto R22 = R18 - R21;
            auto R23 = R21 / R22;
            auto R24 = R23 * R16;
            auto R25 = R15 + R24;
            auto R26 = R25[ 1 ];
            SimdVec<TF,1> R27{ R26 };
            auto R28 = R23 * R12;
            auto R29 = R11 + R28;
            auto R30 = R29[ 1 ];
            SimdVec<TF,1> R31{ R30 };
            auto R32 = R25[ 0 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = R29[ 0 ];
            SimdVec<TF,1> R35{ R34 };
            px_1 = R35;
            py_1 = R33;
            px_2 = R31;
            py_2 = R27;
            pi_1 = R0;
            pi_0 = R8;
            py_0 = R6;
            px_0 = R3;
            pi_2 = R0;
            continue;
        }
        case_163: {
            nodes_size = 3;
            // mod=1,[1,2],[0,1], swith_cuts=0
            SimdVec<TC,1> R0{ cut_i[num_cut] };
            auto R1 = px_1[ 0 ];
            SimdVec<TF,1> R2{ R1 };
            auto R3 = py_1[ 0 ];
            SimdVec<TF,1> R4{ R3 };
            auto R5 = pi_1[ 0 ];
            SimdVec<TC,1> R6{ R5 };
            auto R7 = px_2[ 0 ];
            SimdVec<TF,2> R8{ R7, R1 };
            auto R9 = di_2[ 0 ];
            auto R10 = py_0[ 0 ];
            SimdVec<TF,2> R11{ R3, R10 };
            auto R12 = py_2[ 0 ];
            SimdVec<TF,2> R13{ R12, R3 };
            auto R14 = R13 - R11;
            auto R15 = px_0[ 0 ];
            SimdVec<TF,2> R16{ R1, R15 };
            auto R17 = R8 - R16;
            auto R18 = di_0[ 0 ];
            auto R19 = di_1[ 0 ];
            SimdVec<TF,2> R20{ R19, R18 };
            SimdVec<TF,2> R21{ R9, R19 };
            auto R22 = R20 - R21;
            auto R23 = R21 / R22;
            auto R24 = R23 * R14;
            auto R25 = R13 + R24;
            auto R26 = R25[ 1 ];
            SimdVec<TF,1> R27{ R26 };
            auto R28 = R23 * R17;
            auto R29 = R8 + R28;
            auto R30 = R29[ 1 ];
            SimdVec<TF,1> R31{ R30 };
            auto R32 = R25[ 0 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = R29[ 0 ];
            SimdVec<TF,1> R35{ R34 };
            px_1 = R35;
            py_1 = R33;
            px_2 = R31;
            py_2 = R27;
            pi_1 = R0;
            pi_0 = R6;
            py_0 = R4;
            px_0 = R2;
            pi_2 = R0;
            continue;
        }
        case_39: {
            nodes_size = 3;
            // mod=1,[1,2],[0,1], swith_cuts=0
            SimdVec<TC,1> R0{ cut_i[num_cut] };
            auto R1 = px_1[ 0 ];
            SimdVec<TF,2> R2{ R1, R1 };
            SimdVec<TF,1> R3{ R1 };
            auto R4 = py_1[ 0 ];
            SimdVec<TF,2> R5{ R4, R4 };
            SimdVec<TF,1> R6{ R4 };
            auto R7 = pi_1[ 0 ];
            SimdVec<TC,1> R8{ R7 };
            auto R9 = di_1[ 0 ];
            SimdVec<TF,2> R10{ R9, R9 };
            auto R11 = di_2[ 0 ];
            auto R12 = py_0[ 0 ];
            auto R13 = py_2[ 0 ];
            SimdVec<TF,2> R14{ R13, R12 };
            auto R15 = R5 - R14;
            auto R16 = px_0[ 0 ];
            auto R17 = px_2[ 0 ];
            SimdVec<TF,2> R18{ R17, R16 };
            auto R19 = R2 - R18;
            auto R20 = di_0[ 0 ];
            SimdVec<TF,2> R21{ R11, R20 };
            auto R22 = R21 - R10;
            auto R23 = R10 / R22;
            auto R24 = R23 * R15;
            auto R25 = R5 + R24;
            auto R26 = R25[ 1 ];
            SimdVec<TF,1> R27{ R26 };
            auto R28 = R23 * R19;
            auto R29 = R2 + R28;
            auto R30 = R29[ 1 ];
            SimdVec<TF,1> R31{ R30 };
            auto R32 = R25[ 0 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = R29[ 0 ];
            SimdVec<TF,1> R35{ R34 };
            px_1 = R35;
            py_1 = R33;
            px_2 = R31;
            py_2 = R27;
            pi_1 = R0;
            pi_0 = R8;
            py_0 = R6;
            px_0 = R3;
            pi_2 = R0;
            continue;
        }
        case_68: {
            nodes_size = 3;
            // mod=1,[1,2],[0,1], swith_cuts=1
            SimdVec<TC,1> R0{ cut_i[num_cut] };
            auto R1 = px_1[ 0 ];
            SimdVec<TF,1> R2{ R1 };
            auto R3 = py_1[ 0 ];
            SimdVec<TF,1> R4{ R3 };
            auto R5 = pi_1[ 0 ];
            SimdVec<TC,1> R6{ R5 };
            auto R7 = px_0[ 0 ];
            SimdVec<TF,2> R8{ R7, R1 };
            auto R9 = di_0[ 0 ];
            auto R10 = py_2[ 0 ];
            SimdVec<TF,2> R11{ R3, R10 };
            auto R12 = py_0[ 0 ];
            SimdVec<TF,2> R13{ R12, R3 };
            auto R14 = R13 - R11;
            auto R15 = px_2[ 0 ];
            SimdVec<TF,2> R16{ R1, R15 };
            auto R17 = R8 - R16;
            auto R18 = di_2[ 0 ];
            auto R19 = di_1[ 0 ];
            SimdVec<TF,2> R20{ R19, R18 };
            SimdVec<TF,2> R21{ R9, R19 };
            auto R22 = R20 - R21;
            auto R23 = R21 / R22;
            auto R24 = R23 * R14;
            auto R25 = R13 + R24;
            auto R26 = R25[ 0 ];
            SimdVec<TF,1> R27{ R26 };
            auto R28 = R23 * R17;
            auto R29 = R8 + R28;
            auto R30 = R29[ 0 ];
            SimdVec<TF,1> R31{ R30 };
            auto R32 = R25[ 1 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = R29[ 1 ];
            SimdVec<TF,1> R35{ R34 };
            px_1 = R35;
            py_1 = R33;
            px_2 = R31;
            py_2 = R27;
            pi_1 = R0;
            pi_0 = R6;
            py_0 = R4;
            px_0 = R2;
            pi_2 = R0;
            continue;
        }
        case_227: {
            nodes_size = 3;
            // mod=3,[3,4],[2,3], swith_cuts=0
            SimdVec<TC,1> R0{ cut_i[num_cut] };
            auto R1 = px_3[ 0 ];
            SimdVec<TF,2> R2{ R1, R1 };
            SimdVec<TF,1> R3{ R1 };
            auto R4 = py_3[ 0 ];
            SimdVec<TF,2> R5{ R4, R4 };
            SimdVec<TF,1> R6{ R4 };
            auto R7 = pi_3[ 0 ];
            SimdVec<TC,1> R8{ R7 };
            auto R9 = px_4[ 0 ];
            auto R10 = px_2[ 0 ];
            SimdVec<TF,2> R11{ R9, R10 };
            auto R12 = R11 - R2;
            auto R13 = py_2[ 0 ];
            auto R14 = py_4[ 0 ];
            SimdVec<TF,2> R15{ R14, R13 };
            auto R16 = R15 - R5;
            auto R17 = di_3[ 0 ];
            SimdVec<TF,2> R18{ R17, R17 };
            auto R19 = di_2[ 0 ];
            auto R20 = di_4[ 0 ];
            SimdVec<TF,2> R21{ R20, R19 };
            auto R22 = R18 - R21;
            auto R23 = R21 / R22;
            auto R24 = R23 * R16;
            auto R25 = R15 + R24;
            auto R26 = R25[ 1 ];
            SimdVec<TF,1> R27{ R26 };
            auto R28 = R23 * R12;
            auto R29 = R11 + R28;
            auto R30 = R29[ 1 ];
            SimdVec<TF,1> R31{ R30 };
            auto R32 = R25[ 0 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = R29[ 0 ];
            SimdVec<TF,1> R35{ R34 };
            px_1 = R35;
            py_1 = R33;
            px_2 = R31;
            py_2 = R27;
            pi_1 = R0;
            pi_0 = R8;
            py_0 = R6;
            px_0 = R3;
            pi_2 = R0;
            continue;
        }
        case_152: {
            nodes_size = 3;
            // mod=5,[5,6],[4,5], swith_cuts=0
            SimdVec<TC,1> R0{ cut_i[num_cut] };
            auto R1 = px_5[ 0 ];
            SimdVec<TF,1> R2{ R1 };
            auto R3 = py_5[ 0 ];
            SimdVec<TF,1> R4{ R3 };
            auto R5 = pi_5[ 0 ];
            SimdVec<TC,1> R6{ R5 };
            auto R7 = px_4[ 0 ];
            SimdVec<TF,2> R8{ R1, R7 };
            auto R9 = di_5[ 0 ];
            auto R10 = py_6[ 0 ];
            SimdVec<TF,2> R11{ R10, R3 };
            auto R12 = py_4[ 0 ];
            SimdVec<TF,2> R13{ R3, R12 };
            auto R14 = R13 - R11;
            auto R15 = px_6[ 0 ];
            SimdVec<TF,2> R16{ R15, R1 };
            auto R17 = R8 - R16;
            auto R18 = di_6[ 0 ];
            SimdVec<TF,2> R19{ R18, R9 };
            auto R20 = di_4[ 0 ];
            SimdVec<TF,2> R21{ R9, R20 };
            auto R22 = R19 - R21;
            auto R23 = R21 / R22;
            auto R24 = R23 * R14;
            auto R25 = R13 + R24;
            auto R26 = R25[ 1 ];
            SimdVec<TF,1> R27{ R26 };
            auto R28 = R23 * R17;
            auto R29 = R8 + R28;
            auto R30 = R29[ 1 ];
            SimdVec<TF,1> R31{ R30 };
            auto R32 = R25[ 0 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = R29[ 0 ];
            SimdVec<TF,1> R35{ R34 };
            px_1 = R35;
            py_1 = R33;
            px_2 = R31;
            py_2 = R27;
            pi_1 = R0;
            pi_0 = R6;
            py_0 = R4;
            px_0 = R2;
            pi_2 = R0;
            continue;
        }
        case_19: {
            nodes_size = 3;
            // mod=[0,1],1,[1,2], swith_cuts=0
            auto R0 = pi_1[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_0[ 0 ];
            SimdVec<TC,1> R3{ cut_i[num_cut] };
            auto R4 = px_2[ 0 ];
            SimdVec<TF,2> R5{ R2, R4 };
            auto R6 = di_0[ 0 ];
            auto R7 = py_1[ 0 ];
            SimdVec<TF,1> R8{ R7 };
            auto R9 = di_2[ 0 ];
            SimdVec<TF,2> R10{ R6, R9 };
            SimdVec<TF,2> R11{ R7, R7 };
            auto R12 = py_2[ 0 ];
            auto R13 = py_0[ 0 ];
            SimdVec<TF,2> R14{ R13, R12 };
            auto R15 = R14 - R11;
            auto R16 = px_1[ 0 ];
            SimdVec<TF,1> R17{ R16 };
            auto R18 = di_1[ 0 ];
            SimdVec<TF,2> R19{ R18, R18 };
            auto R20 = R19 - R10;
            auto R21 = R10 / R20;
            auto R22 = R21 * R15;
            auto R23 = R14 + R22;
            auto R24 = R23[ 1 ];
            SimdVec<TF,1> R25{ R24 };
            SimdVec<TF,2> R26{ R16, R16 };
            auto R27 = R5 - R26;
            auto R28 = R21 * R27;
            auto R29 = R5 + R28;
            auto R30 = R29[ 1 ];
            SimdVec<TF,1> R31{ R30 };
            auto R32 = R29[ 0 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = R23[ 0 ];
            SimdVec<TF,1> R35{ R34 };
            py_0 = R35;
            px_0 = R33;
            px_2 = R31;
            py_2 = R25;
            px_1 = R17;
            py_1 = R8;
            pi_0 = R3;
            pi_2 = R3;
            pi_1 = R1;
            continue;
        }
        case_110: {
            nodes_size = 3;
            // mod=[0,1],1,[1,2], swith_cuts=0
            auto R0 = pi_1[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_1[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = di_1[ 0 ];
            SimdVec<TF,2> R5{ R4, R4 };
            SimdVec<TF,2> R6{ R2, R2 };
            SimdVec<TC,1> R7{ cut_i[num_cut] };
            auto R8 = di_0[ 0 ];
            auto R9 = di_2[ 0 ];
            SimdVec<TF,2> R10{ R8, R9 };
            auto R11 = R10 - R5;
            auto R12 = R5 / R11;
            auto R13 = py_2[ 0 ];
            auto R14 = py_0[ 0 ];
            SimdVec<TF,2> R15{ R14, R13 };
            auto R16 = py_1[ 0 ];
            SimdVec<TF,1> R17{ R16 };
            auto R18 = px_0[ 0 ];
            SimdVec<TF,2> R19{ R16, R16 };
            auto R20 = R19 - R15;
            auto R21 = R12 * R20;
            auto R22 = R19 + R21;
            auto R23 = R22[ 1 ];
            SimdVec<TF,1> R24{ R23 };
            auto R25 = px_2[ 0 ];
            SimdVec<TF,2> R26{ R18, R25 };
            auto R27 = R6 - R26;
            auto R28 = R12 * R27;
            auto R29 = R6 + R28;
            auto R30 = R29[ 1 ];
            SimdVec<TF,1> R31{ R30 };
            auto R32 = R29[ 0 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = R22[ 0 ];
            SimdVec<TF,1> R35{ R34 };
            py_0 = R35;
            px_0 = R33;
            px_2 = R31;
            py_2 = R24;
            py_1 = R17;
            pi_0 = R7;
            pi_2 = R7;
            px_1 = R3;
            pi_1 = R1;
            continue;
        }
        case_66: {
            nodes_size = 3;
            // mod=[1,2],2,[2,3], swith_cuts=0
            auto R0 = pi_2[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_2[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = di_2[ 0 ];
            SimdVec<TF,2> R5{ R4, R4 };
            SimdVec<TF,2> R6{ R2, R2 };
            SimdVec<TC,1> R7{ cut_i[num_cut] };
            auto R8 = di_1[ 0 ];
            auto R9 = di_3[ 0 ];
            SimdVec<TF,2> R10{ R8, R9 };
            auto R11 = R10 - R5;
            auto R12 = R5 / R11;
            auto R13 = py_3[ 0 ];
            auto R14 = py_1[ 0 ];
            SimdVec<TF,2> R15{ R14, R13 };
            auto R16 = py_2[ 0 ];
            SimdVec<TF,1> R17{ R16 };
            auto R18 = px_1[ 0 ];
            SimdVec<TF,2> R19{ R16, R16 };
            auto R20 = R19 - R15;
            auto R21 = R12 * R20;
            auto R22 = R19 + R21;
            auto R23 = R22[ 1 ];
            SimdVec<TF,1> R24{ R23 };
            auto R25 = px_3[ 0 ];
            SimdVec<TF,2> R26{ R18, R25 };
            auto R27 = R6 - R26;
            auto R28 = R12 * R27;
            auto R29 = R6 + R28;
            auto R30 = R29[ 1 ];
            SimdVec<TF,1> R31{ R30 };
            auto R32 = R29[ 0 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = R22[ 0 ];
            SimdVec<TF,1> R35{ R34 };
            py_0 = R35;
            px_0 = R33;
            px_2 = R31;
            py_2 = R24;
            py_1 = R17;
            pi_0 = R7;
            pi_2 = R7;
            px_1 = R3;
            pi_1 = R1;
            continue;
        }
        case_37: {
            nodes_size = 3;
            // mod=[1,2],2,[2,3], swith_cuts=1
            auto R0 = pi_2[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_2[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = di_2[ 0 ];
            SimdVec<TF,2> R5{ R4, R4 };
            SimdVec<TF,2> R6{ R2, R2 };
            SimdVec<TC,1> R7{ cut_i[num_cut] };
            auto R8 = di_3[ 0 ];
            auto R9 = di_1[ 0 ];
            SimdVec<TF,2> R10{ R8, R9 };
            auto R11 = R10 - R5;
            auto R12 = R5 / R11;
            auto R13 = py_1[ 0 ];
            auto R14 = py_3[ 0 ];
            SimdVec<TF,2> R15{ R14, R13 };
            auto R16 = py_2[ 0 ];
            SimdVec<TF,1> R17{ R16 };
            auto R18 = px_3[ 0 ];
            SimdVec<TF,2> R19{ R16, R16 };
            auto R20 = R19 - R15;
            auto R21 = R12 * R20;
            auto R22 = R19 + R21;
            auto R23 = R22[ 0 ];
            SimdVec<TF,1> R24{ R23 };
            auto R25 = px_1[ 0 ];
            SimdVec<TF,2> R26{ R18, R25 };
            auto R27 = R6 - R26;
            auto R28 = R12 * R27;
            auto R29 = R6 + R28;
            auto R30 = R29[ 0 ];
            SimdVec<TF,1> R31{ R30 };
            auto R32 = R29[ 1 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = R22[ 1 ];
            SimdVec<TF,1> R35{ R34 };
            py_0 = R35;
            px_0 = R33;
            px_2 = R31;
            py_2 = R24;
            py_1 = R17;
            pi_0 = R7;
            pi_2 = R7;
            px_1 = R3;
            pi_1 = R1;
            continue;
        }
        case_108: {
            nodes_size = 3;
            // mod=[1,2],2,[2,3], swith_cuts=1
            auto R0 = pi_2[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_2[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = px_1[ 0 ];
            SimdVec<TF,2> R5{ R2, R4 };
            SimdVec<TC,1> R6{ cut_i[num_cut] };
            auto R7 = di_2[ 0 ];
            auto R8 = di_1[ 0 ];
            SimdVec<TF,2> R9{ R7, R8 };
            auto R10 = py_3[ 0 ];
            auto R11 = py_1[ 0 ];
            auto R12 = py_2[ 0 ];
            SimdVec<TF,1> R13{ R12 };
            auto R14 = di_3[ 0 ];
            SimdVec<TF,2> R15{ R14, R7 };
            auto R16 = R15 - R9;
            auto R17 = R9 / R16;
            SimdVec<TF,2> R18{ R10, R12 };
            SimdVec<TF,2> R19{ R12, R11 };
            auto R20 = R19 - R18;
            auto R21 = R17 * R20;
            auto R22 = R19 + R21;
            auto R23 = R22[ 0 ];
            SimdVec<TF,1> R24{ R23 };
            auto R25 = px_3[ 0 ];
            SimdVec<TF,2> R26{ R25, R2 };
            auto R27 = R5 - R26;
            auto R28 = R17 * R27;
            auto R29 = R5 + R28;
            auto R30 = R29[ 0 ];
            SimdVec<TF,1> R31{ R30 };
            auto R32 = R22[ 1 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = R29[ 1 ];
            SimdVec<TF,1> R35{ R34 };
            px_0 = R35;
            py_0 = R33;
            px_2 = R31;
            py_2 = R24;
            py_1 = R13;
            pi_0 = R6;
            pi_2 = R6;
            px_1 = R3;
            pi_1 = R1;
            continue;
        }
        case_231: {
            nodes_size = 3;
            // mod=[1,2],[0,1],1, swith_cuts=1
            auto R0 = pi_1[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_1[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = px_2[ 0 ];
            SimdVec<TF,2> R5{ R2, R4 };
            SimdVec<TC,1> R6{ cut_i[num_cut] };
            auto R7 = di_1[ 0 ];
            auto R8 = di_2[ 0 ];
            SimdVec<TF,2> R9{ R7, R8 };
            auto R10 = py_0[ 0 ];
            auto R11 = py_2[ 0 ];
            auto R12 = py_1[ 0 ];
            SimdVec<TF,1> R13{ R12 };
            auto R14 = di_0[ 0 ];
            SimdVec<TF,2> R15{ R14, R7 };
            auto R16 = R15 - R9;
            auto R17 = R9 / R16;
            SimdVec<TF,2> R18{ R10, R12 };
            SimdVec<TF,2> R19{ R12, R11 };
            auto R20 = R19 - R18;
            auto R21 = R17 * R20;
            auto R22 = R19 + R21;
            auto R23 = R22[ 0 ];
            SimdVec<TF,1> R24{ R23 };
            auto R25 = px_0[ 0 ];
            SimdVec<TF,2> R26{ R25, R2 };
            auto R27 = R5 - R26;
            auto R28 = R17 * R27;
            auto R29 = R5 + R28;
            auto R30 = R29[ 0 ];
            SimdVec<TF,1> R31{ R30 };
            auto R32 = R22[ 1 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = R29[ 1 ];
            SimdVec<TF,1> R35{ R34 };
            px_0 = R35;
            py_0 = R33;
            px_1 = R31;
            py_1 = R24;
            py_2 = R13;
            pi_0 = R6;
            pi_1 = R6;
            px_2 = R3;
            pi_2 = R1;
            continue;
        }
        case_14: {
            nodes_size = 3;
            // mod=[2,3],3,[3,0], swith_cuts=0
            auto R0 = pi_3[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_2[ 0 ];
            SimdVec<TC,1> R3{ cut_i[num_cut] };
            auto R4 = px_3[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = di_2[ 0 ];
            SimdVec<TF,2> R7{ R2, R4 };
            auto R8 = di_3[ 0 ];
            SimdVec<TF,2> R9{ R6, R8 };
            auto R10 = py_0[ 0 ];
            auto R11 = py_3[ 0 ];
            SimdVec<TF,1> R12{ R11 };
            auto R13 = di_0[ 0 ];
            SimdVec<TF,2> R14{ R8, R13 };
            auto R15 = R14 - R9;
            auto R16 = R9 / R15;
            SimdVec<TF,2> R17{ R11, R10 };
            auto R18 = py_2[ 0 ];
            SimdVec<TF,2> R19{ R18, R11 };
            auto R20 = R19 - R17;
            auto R21 = R16 * R20;
            auto R22 = R19 + R21;
            auto R23 = R22[ 1 ];
            SimdVec<TF,1> R24{ R23 };
            auto R25 = px_0[ 0 ];
            SimdVec<TF,2> R26{ R4, R25 };
            auto R27 = R7 - R26;
            auto R28 = R16 * R27;
            auto R29 = R7 + R28;
            auto R30 = R29[ 1 ];
            SimdVec<TF,1> R31{ R30 };
            auto R32 = R22[ 0 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = R29[ 0 ];
            SimdVec<TF,1> R35{ R34 };
            px_0 = R35;
            py_0 = R33;
            px_2 = R31;
            py_2 = R24;
            py_1 = R12;
            pi_0 = R3;
            px_1 = R5;
            pi_2 = R3;
            pi_1 = R1;
            continue;
        }
        case_63: {
            nodes_size = 3;
            // mod=[2,3],3,[3,4], swith_cuts=0
            auto R0 = pi_3[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_3[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = di_3[ 0 ];
            SimdVec<TF,2> R5{ R4, R4 };
            SimdVec<TF,2> R6{ R2, R2 };
            SimdVec<TC,1> R7{ cut_i[num_cut] };
            auto R8 = di_2[ 0 ];
            auto R9 = di_4[ 0 ];
            SimdVec<TF,2> R10{ R8, R9 };
            auto R11 = R10 - R5;
            auto R12 = R5 / R11;
            auto R13 = py_4[ 0 ];
            auto R14 = py_2[ 0 ];
            SimdVec<TF,2> R15{ R14, R13 };
            auto R16 = py_3[ 0 ];
            SimdVec<TF,1> R17{ R16 };
            auto R18 = px_2[ 0 ];
            SimdVec<TF,2> R19{ R16, R16 };
            auto R20 = R19 - R15;
            auto R21 = R12 * R20;
            auto R22 = R19 + R21;
            auto R23 = R22[ 1 ];
            SimdVec<TF,1> R24{ R23 };
            auto R25 = px_4[ 0 ];
            SimdVec<TF,2> R26{ R18, R25 };
            auto R27 = R6 - R26;
            auto R28 = R12 * R27;
            auto R29 = R6 + R28;
            auto R30 = R29[ 1 ];
            SimdVec<TF,1> R31{ R30 };
            auto R32 = R29[ 0 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = R22[ 0 ];
            SimdVec<TF,1> R35{ R34 };
            py_0 = R35;
            px_0 = R33;
            px_2 = R31;
            py_2 = R24;
            py_1 = R17;
            pi_0 = R7;
            pi_2 = R7;
            px_1 = R3;
            pi_1 = R1;
            continue;
        }
        case_105: {
            nodes_size = 3;
            // mod=[2,3],3,[3,4], swith_cuts=0
            auto R0 = pi_3[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_3[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = px_4[ 0 ];
            SimdVec<TF,2> R5{ R2, R4 };
            SimdVec<TC,1> R6{ cut_i[num_cut] };
            auto R7 = di_3[ 0 ];
            auto R8 = di_4[ 0 ];
            SimdVec<TF,2> R9{ R7, R8 };
            auto R10 = py_2[ 0 ];
            auto R11 = py_4[ 0 ];
            auto R12 = py_3[ 0 ];
            SimdVec<TF,1> R13{ R12 };
            auto R14 = di_2[ 0 ];
            SimdVec<TF,2> R15{ R14, R7 };
            auto R16 = R15 - R9;
            auto R17 = R9 / R16;
            SimdVec<TF,2> R18{ R10, R12 };
            SimdVec<TF,2> R19{ R12, R11 };
            auto R20 = R19 - R18;
            auto R21 = R17 * R20;
            auto R22 = R19 + R21;
            auto R23 = R22[ 1 ];
            SimdVec<TF,1> R24{ R23 };
            auto R25 = px_2[ 0 ];
            SimdVec<TF,2> R26{ R25, R2 };
            auto R27 = R5 - R26;
            auto R28 = R17 * R27;
            auto R29 = R5 + R28;
            auto R30 = R29[ 1 ];
            SimdVec<TF,1> R31{ R30 };
            auto R32 = R22[ 0 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = R29[ 0 ];
            SimdVec<TF,1> R35{ R34 };
            px_0 = R35;
            py_0 = R33;
            px_2 = R31;
            py_2 = R24;
            py_1 = R13;
            pi_0 = R6;
            pi_2 = R6;
            px_1 = R3;
            pi_1 = R1;
            continue;
        }
        case_34: {
            nodes_size = 3;
            // mod=[2,3],3,[3,4], swith_cuts=1
            auto R0 = pi_3[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_3[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = di_3[ 0 ];
            SimdVec<TF,2> R5{ R4, R4 };
            SimdVec<TF,2> R6{ R2, R2 };
            SimdVec<TC,1> R7{ cut_i[num_cut] };
            auto R8 = di_4[ 0 ];
            auto R9 = di_2[ 0 ];
            SimdVec<TF,2> R10{ R8, R9 };
            auto R11 = R10 - R5;
            auto R12 = R5 / R11;
            auto R13 = py_2[ 0 ];
            auto R14 = py_4[ 0 ];
            SimdVec<TF,2> R15{ R14, R13 };
            auto R16 = py_3[ 0 ];
            SimdVec<TF,1> R17{ R16 };
            auto R18 = px_4[ 0 ];
            SimdVec<TF,2> R19{ R16, R16 };
            auto R20 = R19 - R15;
            auto R21 = R12 * R20;
            auto R22 = R19 + R21;
            auto R23 = R22[ 0 ];
            SimdVec<TF,1> R24{ R23 };
            auto R25 = px_2[ 0 ];
            SimdVec<TF,2> R26{ R18, R25 };
            auto R27 = R6 - R26;
            auto R28 = R12 * R27;
            auto R29 = R6 + R28;
            auto R30 = R29[ 0 ];
            SimdVec<TF,1> R31{ R30 };
            auto R32 = R29[ 1 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = R22[ 1 ];
            SimdVec<TF,1> R35{ R34 };
            py_0 = R35;
            px_0 = R33;
            px_2 = R31;
            py_2 = R24;
            py_1 = R17;
            pi_0 = R7;
            pi_2 = R7;
            px_1 = R3;
            pi_1 = R1;
            continue;
        }
        case_159: {
            nodes_size = 3;
            // mod=[2,3],3,[3,4], swith_cuts=1
            auto R0 = pi_3[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_3[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = px_2[ 0 ];
            SimdVec<TF,2> R5{ R2, R4 };
            SimdVec<TC,1> R6{ cut_i[num_cut] };
            auto R7 = di_3[ 0 ];
            auto R8 = di_2[ 0 ];
            SimdVec<TF,2> R9{ R7, R8 };
            auto R10 = py_4[ 0 ];
            auto R11 = py_2[ 0 ];
            auto R12 = py_3[ 0 ];
            SimdVec<TF,1> R13{ R12 };
            auto R14 = di_4[ 0 ];
            SimdVec<TF,2> R15{ R14, R7 };
            auto R16 = R15 - R9;
            auto R17 = R9 / R16;
            SimdVec<TF,2> R18{ R10, R12 };
            SimdVec<TF,2> R19{ R12, R11 };
            auto R20 = R19 - R18;
            auto R21 = R17 * R20;
            auto R22 = R19 + R21;
            auto R23 = R22[ 0 ];
            SimdVec<TF,1> R24{ R23 };
            auto R25 = px_4[ 0 ];
            SimdVec<TF,2> R26{ R25, R2 };
            auto R27 = R5 - R26;
            auto R28 = R17 * R27;
            auto R29 = R5 + R28;
            auto R30 = R29[ 0 ];
            SimdVec<TF,1> R31{ R30 };
            auto R32 = R22[ 1 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = R29[ 1 ];
            SimdVec<TF,1> R35{ R34 };
            px_0 = R35;
            py_0 = R33;
            px_2 = R31;
            py_2 = R24;
            py_1 = R13;
            pi_0 = R6;
            pi_2 = R6;
            px_1 = R3;
            pi_1 = R1;
            continue;
        }
        case_17: {
            nodes_size = 3;
            // mod=[2,3],[1,2],2, swith_cuts=1
            auto R0 = pi_2[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_1[ 0 ];
            SimdVec<TC,1> R3{ cut_i[num_cut] };
            auto R4 = px_2[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = di_1[ 0 ];
            SimdVec<TF,2> R7{ R2, R4 };
            auto R8 = di_2[ 0 ];
            SimdVec<TF,2> R9{ R6, R8 };
            auto R10 = py_3[ 0 ];
            auto R11 = py_2[ 0 ];
            SimdVec<TF,1> R12{ R11 };
            auto R13 = di_3[ 0 ];
            SimdVec<TF,2> R14{ R8, R13 };
            auto R15 = R14 - R9;
            auto R16 = R9 / R15;
            SimdVec<TF,2> R17{ R11, R10 };
            auto R18 = py_1[ 0 ];
            SimdVec<TF,2> R19{ R18, R11 };
            auto R20 = R19 - R17;
            auto R21 = R16 * R20;
            auto R22 = R19 + R21;
            auto R23 = R22[ 0 ];
            SimdVec<TF,1> R24{ R23 };
            auto R25 = px_3[ 0 ];
            SimdVec<TF,2> R26{ R4, R25 };
            auto R27 = R7 - R26;
            auto R28 = R16 * R27;
            auto R29 = R7 + R28;
            auto R30 = R29[ 0 ];
            SimdVec<TF,1> R31{ R30 };
            auto R32 = R22[ 1 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = R29[ 1 ];
            SimdVec<TF,1> R35{ R34 };
            px_0 = R35;
            py_0 = R33;
            px_1 = R31;
            py_1 = R24;
            py_2 = R12;
            pi_0 = R3;
            px_2 = R5;
            pi_1 = R3;
            pi_2 = R1;
            continue;
        }
        case_20: {
            nodes_size = 3;
            // mod=[3,0],0,[0,1], swith_cuts=0
            auto R0 = pi_0[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_3[ 0 ];
            SimdVec<TC,1> R3{ cut_i[num_cut] };
            auto R4 = px_0[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = di_3[ 0 ];
            SimdVec<TF,2> R7{ R2, R4 };
            auto R8 = di_0[ 0 ];
            SimdVec<TF,2> R9{ R6, R8 };
            auto R10 = py_1[ 0 ];
            auto R11 = py_0[ 0 ];
            SimdVec<TF,1> R12{ R11 };
            auto R13 = di_1[ 0 ];
            SimdVec<TF,2> R14{ R8, R13 };
            auto R15 = R14 - R9;
            auto R16 = R9 / R15;
            SimdVec<TF,2> R17{ R11, R10 };
            auto R18 = py_3[ 0 ];
            SimdVec<TF,2> R19{ R18, R11 };
            auto R20 = R19 - R17;
            auto R21 = R16 * R20;
            auto R22 = R19 + R21;
            auto R23 = R22[ 1 ];
            SimdVec<TF,1> R24{ R23 };
            auto R25 = px_1[ 0 ];
            SimdVec<TF,2> R26{ R4, R25 };
            auto R27 = R7 - R26;
            auto R28 = R16 * R27;
            auto R29 = R7 + R28;
            auto R30 = R29[ 1 ];
            SimdVec<TF,1> R31{ R30 };
            auto R32 = R22[ 0 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = R29[ 0 ];
            SimdVec<TF,1> R35{ R34 };
            px_0 = R35;
            py_0 = R33;
            px_2 = R31;
            py_2 = R24;
            py_1 = R12;
            pi_0 = R3;
            px_1 = R5;
            pi_2 = R3;
            pi_1 = R1;
            continue;
        }
        case_30: {
            nodes_size = 3;
            // mod=[3,4],4,[4,0], swith_cuts=1
            auto R0 = pi_4[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_4[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = di_4[ 0 ];
            SimdVec<TF,2> R5{ R4, R4 };
            SimdVec<TF,2> R6{ R2, R2 };
            SimdVec<TC,1> R7{ cut_i[num_cut] };
            auto R8 = di_0[ 0 ];
            auto R9 = di_3[ 0 ];
            SimdVec<TF,2> R10{ R8, R9 };
            auto R11 = R10 - R5;
            auto R12 = R5 / R11;
            auto R13 = py_3[ 0 ];
            auto R14 = py_0[ 0 ];
            SimdVec<TF,2> R15{ R14, R13 };
            auto R16 = py_4[ 0 ];
            SimdVec<TF,1> R17{ R16 };
            auto R18 = px_0[ 0 ];
            SimdVec<TF,2> R19{ R16, R16 };
            auto R20 = R19 - R15;
            auto R21 = R12 * R20;
            auto R22 = R19 + R21;
            auto R23 = R22[ 0 ];
            SimdVec<TF,1> R24{ R23 };
            auto R25 = px_3[ 0 ];
            SimdVec<TF,2> R26{ R18, R25 };
            auto R27 = R6 - R26;
            auto R28 = R12 * R27;
            auto R29 = R6 + R28;
            auto R30 = R29[ 0 ];
            SimdVec<TF,1> R31{ R30 };
            auto R32 = R29[ 1 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = R22[ 1 ];
            SimdVec<TF,1> R35{ R34 };
            py_0 = R35;
            px_0 = R33;
            px_2 = R31;
            py_2 = R24;
            py_1 = R17;
            pi_0 = R7;
            pi_2 = R7;
            px_1 = R3;
            pi_1 = R1;
            continue;
        }
        case_60: {
            nodes_size = 3;
            // mod=[3,4],4,[4,5], swith_cuts=0
            auto R0 = pi_4[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_3[ 0 ];
            SimdVec<TC,1> R3{ cut_i[num_cut] };
            auto R4 = px_4[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = di_3[ 0 ];
            SimdVec<TF,2> R7{ R2, R4 };
            auto R8 = di_4[ 0 ];
            SimdVec<TF,2> R9{ R6, R8 };
            auto R10 = py_5[ 0 ];
            auto R11 = py_4[ 0 ];
            SimdVec<TF,1> R12{ R11 };
            auto R13 = di_5[ 0 ];
            SimdVec<TF,2> R14{ R8, R13 };
            auto R15 = R14 - R9;
            auto R16 = R9 / R15;
            SimdVec<TF,2> R17{ R11, R10 };
            auto R18 = py_3[ 0 ];
            SimdVec<TF,2> R19{ R18, R11 };
            auto R20 = R19 - R17;
            auto R21 = R16 * R20;
            auto R22 = R19 + R21;
            auto R23 = R22[ 1 ];
            SimdVec<TF,1> R24{ R23 };
            auto R25 = px_5[ 0 ];
            SimdVec<TF,2> R26{ R4, R25 };
            auto R27 = R7 - R26;
            auto R28 = R16 * R27;
            auto R29 = R7 + R28;
            auto R30 = R29[ 1 ];
            SimdVec<TF,1> R31{ R30 };
            auto R32 = R22[ 0 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = R29[ 0 ];
            SimdVec<TF,1> R35{ R34 };
            px_0 = R35;
            py_0 = R33;
            px_2 = R31;
            py_2 = R24;
            py_1 = R12;
            pi_0 = R3;
            px_1 = R5;
            pi_2 = R3;
            pi_1 = R1;
            continue;
        }
        case_101: {
            nodes_size = 3;
            // mod=[3,4],4,[4,5], swith_cuts=1
            auto R0 = pi_4[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_4[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = di_4[ 0 ];
            SimdVec<TF,2> R5{ R4, R4 };
            SimdVec<TF,2> R6{ R2, R2 };
            SimdVec<TC,1> R7{ cut_i[num_cut] };
            auto R8 = di_5[ 0 ];
            auto R9 = di_3[ 0 ];
            SimdVec<TF,2> R10{ R8, R9 };
            auto R11 = R10 - R5;
            auto R12 = R5 / R11;
            auto R13 = py_3[ 0 ];
            auto R14 = py_5[ 0 ];
            SimdVec<TF,2> R15{ R14, R13 };
            auto R16 = py_4[ 0 ];
            SimdVec<TF,1> R17{ R16 };
            auto R18 = px_5[ 0 ];
            SimdVec<TF,2> R19{ R16, R16 };
            auto R20 = R19 - R15;
            auto R21 = R12 * R20;
            auto R22 = R19 + R21;
            auto R23 = R22[ 0 ];
            SimdVec<TF,1> R24{ R23 };
            auto R25 = px_3[ 0 ];
            SimdVec<TF,2> R26{ R18, R25 };
            auto R27 = R6 - R26;
            auto R28 = R12 * R27;
            auto R29 = R6 + R28;
            auto R30 = R29[ 0 ];
            SimdVec<TF,1> R31{ R30 };
            auto R32 = R29[ 1 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = R22[ 1 ];
            SimdVec<TF,1> R35{ R34 };
            py_0 = R35;
            px_0 = R33;
            px_2 = R31;
            py_2 = R24;
            py_1 = R17;
            pi_0 = R7;
            pi_2 = R7;
            px_1 = R3;
            pi_1 = R1;
            continue;
        }
        case_55: {
            nodes_size = 3;
            // mod=[4,5],5,[5,0], swith_cuts=0
            auto R0 = pi_5[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_4[ 0 ];
            SimdVec<TC,1> R3{ cut_i[num_cut] };
            auto R4 = px_5[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = di_4[ 0 ];
            SimdVec<TF,2> R7{ R2, R4 };
            auto R8 = di_5[ 0 ];
            SimdVec<TF,2> R9{ R6, R8 };
            auto R10 = py_0[ 0 ];
            auto R11 = py_5[ 0 ];
            SimdVec<TF,1> R12{ R11 };
            auto R13 = di_0[ 0 ];
            SimdVec<TF,2> R14{ R8, R13 };
            auto R15 = R14 - R9;
            auto R16 = R9 / R15;
            SimdVec<TF,2> R17{ R11, R10 };
            auto R18 = py_4[ 0 ];
            SimdVec<TF,2> R19{ R18, R11 };
            auto R20 = R19 - R17;
            auto R21 = R16 * R20;
            auto R22 = R19 + R21;
            auto R23 = R22[ 1 ];
            SimdVec<TF,1> R24{ R23 };
            auto R25 = px_0[ 0 ];
            SimdVec<TF,2> R26{ R4, R25 };
            auto R27 = R7 - R26;
            auto R28 = R16 * R27;
            auto R29 = R7 + R28;
            auto R30 = R29[ 1 ];
            SimdVec<TF,1> R31{ R30 };
            auto R32 = R22[ 0 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = R29[ 0 ];
            SimdVec<TF,1> R35{ R34 };
            px_0 = R35;
            py_0 = R33;
            px_2 = R31;
            py_2 = R24;
            py_1 = R12;
            pi_0 = R3;
            px_1 = R5;
            pi_2 = R3;
            pi_1 = R1;
            continue;
        }
        case_219: {
            nodes_size = 3;
            // mod=[4,5],5,[5,6], swith_cuts=0
            auto R0 = pi_5[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_4[ 0 ];
            SimdVec<TC,1> R3{ cut_i[num_cut] };
            auto R4 = px_5[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = di_4[ 0 ];
            SimdVec<TF,2> R7{ R2, R4 };
            auto R8 = di_5[ 0 ];
            SimdVec<TF,2> R9{ R6, R8 };
            auto R10 = py_6[ 0 ];
            auto R11 = py_5[ 0 ];
            SimdVec<TF,1> R12{ R11 };
            auto R13 = di_6[ 0 ];
            SimdVec<TF,2> R14{ R8, R13 };
            auto R15 = R14 - R9;
            auto R16 = R9 / R15;
            SimdVec<TF,2> R17{ R11, R10 };
            auto R18 = py_4[ 0 ];
            SimdVec<TF,2> R19{ R18, R11 };
            auto R20 = R19 - R17;
            auto R21 = R16 * R20;
            auto R22 = R19 + R21;
            auto R23 = R22[ 1 ];
            SimdVec<TF,1> R24{ R23 };
            auto R25 = px_6[ 0 ];
            SimdVec<TF,2> R26{ R4, R25 };
            auto R27 = R7 - R26;
            auto R28 = R16 * R27;
            auto R29 = R7 + R28;
            auto R30 = R29[ 1 ];
            SimdVec<TF,1> R31{ R30 };
            auto R32 = R22[ 0 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = R29[ 0 ];
            SimdVec<TF,1> R35{ R34 };
            px_0 = R35;
            py_0 = R33;
            px_2 = R31;
            py_2 = R24;
            py_1 = R12;
            pi_0 = R3;
            px_1 = R5;
            pi_2 = R3;
            pi_1 = R1;
            continue;
        }
        case_96: {
            nodes_size = 3;
            // mod=[4,5],5,[5,6], swith_cuts=1
            auto R0 = pi_5[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_5[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = px_4[ 0 ];
            SimdVec<TF,2> R5{ R2, R4 };
            SimdVec<TC,1> R6{ cut_i[num_cut] };
            auto R7 = di_5[ 0 ];
            auto R8 = di_4[ 0 ];
            SimdVec<TF,2> R9{ R7, R8 };
            auto R10 = py_6[ 0 ];
            auto R11 = py_4[ 0 ];
            auto R12 = py_5[ 0 ];
            SimdVec<TF,1> R13{ R12 };
            auto R14 = di_6[ 0 ];
            SimdVec<TF,2> R15{ R14, R7 };
            auto R16 = R15 - R9;
            auto R17 = R9 / R16;
            SimdVec<TF,2> R18{ R10, R12 };
            SimdVec<TF,2> R19{ R12, R11 };
            auto R20 = R19 - R18;
            auto R21 = R17 * R20;
            auto R22 = R19 + R21;
            auto R23 = R22[ 0 ];
            SimdVec<TF,1> R24{ R23 };
            auto R25 = px_6[ 0 ];
            SimdVec<TF,2> R26{ R25, R2 };
            auto R27 = R5 - R26;
            auto R28 = R17 * R27;
            auto R29 = R5 + R28;
            auto R30 = R29[ 0 ];
            SimdVec<TF,1> R31{ R30 };
            auto R32 = R22[ 1 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = R29[ 1 ];
            SimdVec<TF,1> R35{ R34 };
            px_0 = R35;
            py_0 = R33;
            px_2 = R31;
            py_2 = R24;
            py_1 = R13;
            pi_0 = R6;
            pi_2 = R6;
            px_1 = R3;
            pi_1 = R1;
            continue;
        }
        case_223: {
            nodes_size = 3;
            // mod=[4,5],[3,4],4, swith_cuts=0
            auto R0 = pi_4[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_4[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = px_3[ 0 ];
            SimdVec<TF,2> R5{ R2, R4 };
            SimdVec<TC,1> R6{ cut_i[num_cut] };
            auto R7 = di_4[ 0 ];
            auto R8 = di_3[ 0 ];
            SimdVec<TF,2> R9{ R7, R8 };
            auto R10 = py_5[ 0 ];
            auto R11 = py_3[ 0 ];
            auto R12 = py_4[ 0 ];
            SimdVec<TF,1> R13{ R12 };
            auto R14 = di_5[ 0 ];
            SimdVec<TF,2> R15{ R14, R7 };
            auto R16 = R15 - R9;
            auto R17 = R9 / R16;
            SimdVec<TF,2> R18{ R10, R12 };
            SimdVec<TF,2> R19{ R12, R11 };
            auto R20 = R19 - R18;
            auto R21 = R17 * R20;
            auto R22 = R19 + R21;
            auto R23 = R22[ 1 ];
            SimdVec<TF,1> R24{ R23 };
            auto R25 = px_5[ 0 ];
            SimdVec<TF,2> R26{ R25, R2 };
            auto R27 = R5 - R26;
            auto R28 = R17 * R27;
            auto R29 = R5 + R28;
            auto R30 = R29[ 1 ];
            SimdVec<TF,1> R31{ R30 };
            auto R32 = R22[ 0 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = R29[ 0 ];
            SimdVec<TF,1> R35{ R34 };
            px_0 = R35;
            py_0 = R33;
            px_1 = R31;
            py_1 = R24;
            py_2 = R13;
            pi_0 = R6;
            pi_1 = R6;
            px_2 = R3;
            pi_2 = R1;
            continue;
        }
        case_156: {
            nodes_size = 3;
            // mod=[4,5],[3,4],4, swith_cuts=1
            auto R0 = pi_4[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_4[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = di_4[ 0 ];
            SimdVec<TF,2> R5{ R4, R4 };
            SimdVec<TF,2> R6{ R2, R2 };
            SimdVec<TC,1> R7{ cut_i[num_cut] };
            auto R8 = di_3[ 0 ];
            auto R9 = di_5[ 0 ];
            SimdVec<TF,2> R10{ R8, R9 };
            auto R11 = R10 - R5;
            auto R12 = R5 / R11;
            auto R13 = py_5[ 0 ];
            auto R14 = py_3[ 0 ];
            SimdVec<TF,2> R15{ R14, R13 };
            auto R16 = py_4[ 0 ];
            SimdVec<TF,1> R17{ R16 };
            auto R18 = px_3[ 0 ];
            SimdVec<TF,2> R19{ R16, R16 };
            auto R20 = R19 - R15;
            auto R21 = R12 * R20;
            auto R22 = R19 + R21;
            auto R23 = R22[ 0 ];
            SimdVec<TF,1> R24{ R23 };
            auto R25 = px_5[ 0 ];
            SimdVec<TF,2> R26{ R18, R25 };
            auto R27 = R6 - R26;
            auto R28 = R12 * R27;
            auto R29 = R6 + R28;
            auto R30 = R29[ 0 ];
            SimdVec<TF,1> R31{ R30 };
            auto R32 = R29[ 1 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = R22[ 1 ];
            SimdVec<TF,1> R35{ R34 };
            py_0 = R35;
            px_0 = R33;
            px_1 = R31;
            py_1 = R24;
            py_2 = R17;
            pi_0 = R7;
            pi_1 = R7;
            px_2 = R3;
            pi_2 = R1;
            continue;
        }
        case_69: {
            nodes_size = 3;
            // mod=[5,0],0,[0,1], swith_cuts=0
            auto R0 = pi_0[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_0[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = px_1[ 0 ];
            SimdVec<TF,2> R5{ R2, R4 };
            SimdVec<TC,1> R6{ cut_i[num_cut] };
            auto R7 = di_0[ 0 ];
            auto R8 = di_1[ 0 ];
            SimdVec<TF,2> R9{ R7, R8 };
            auto R10 = py_5[ 0 ];
            auto R11 = py_1[ 0 ];
            auto R12 = py_0[ 0 ];
            SimdVec<TF,1> R13{ R12 };
            auto R14 = di_5[ 0 ];
            SimdVec<TF,2> R15{ R14, R7 };
            auto R16 = R15 - R9;
            auto R17 = R9 / R16;
            SimdVec<TF,2> R18{ R10, R12 };
            SimdVec<TF,2> R19{ R12, R11 };
            auto R20 = R19 - R18;
            auto R21 = R17 * R20;
            auto R22 = R19 + R21;
            auto R23 = R22[ 1 ];
            SimdVec<TF,1> R24{ R23 };
            auto R25 = px_5[ 0 ];
            SimdVec<TF,2> R26{ R25, R2 };
            auto R27 = R5 - R26;
            auto R28 = R17 * R27;
            auto R29 = R5 + R28;
            auto R30 = R29[ 1 ];
            SimdVec<TF,1> R31{ R30 };
            auto R32 = R22[ 0 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = R29[ 0 ];
            SimdVec<TF,1> R35{ R34 };
            px_0 = R35;
            py_0 = R33;
            px_2 = R31;
            py_2 = R24;
            py_1 = R13;
            pi_0 = R6;
            pi_2 = R6;
            px_1 = R3;
            pi_1 = R1;
            continue;
        }
        case_90: {
            nodes_size = 3;
            // mod=[5,6],6,[6,0], swith_cuts=1
            auto R0 = pi_6[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_0[ 0 ];
            SimdVec<TC,1> R3{ cut_i[num_cut] };
            auto R4 = px_6[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = di_0[ 0 ];
            SimdVec<TF,2> R7{ R2, R4 };
            auto R8 = di_6[ 0 ];
            SimdVec<TF,2> R9{ R6, R8 };
            auto R10 = py_5[ 0 ];
            auto R11 = py_6[ 0 ];
            SimdVec<TF,1> R12{ R11 };
            auto R13 = di_5[ 0 ];
            SimdVec<TF,2> R14{ R8, R13 };
            auto R15 = R14 - R9;
            auto R16 = R9 / R15;
            SimdVec<TF,2> R17{ R11, R10 };
            auto R18 = py_0[ 0 ];
            SimdVec<TF,2> R19{ R18, R11 };
            auto R20 = R19 - R17;
            auto R21 = R16 * R20;
            auto R22 = R19 + R21;
            auto R23 = R22[ 0 ];
            SimdVec<TF,1> R24{ R23 };
            auto R25 = px_5[ 0 ];
            SimdVec<TF,2> R26{ R4, R25 };
            auto R27 = R7 - R26;
            auto R28 = R16 * R27;
            auto R29 = R7 + R28;
            auto R30 = R29[ 0 ];
            SimdVec<TF,1> R31{ R30 };
            auto R32 = R22[ 1 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = R29[ 1 ];
            SimdVec<TF,1> R35{ R34 };
            px_0 = R35;
            py_0 = R33;
            px_2 = R31;
            py_2 = R24;
            py_1 = R12;
            pi_0 = R3;
            px_1 = R5;
            pi_2 = R3;
            pi_1 = R1;
            continue;
        }
        case_146: {
            nodes_size = 3;
            // mod=[5,6],6,[6,7], swith_cuts=0
            auto R0 = pi_6[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_5[ 0 ];
            SimdVec<TC,1> R3{ cut_i[num_cut] };
            auto R4 = px_7[ 0 ];
            SimdVec<TF,2> R5{ R2, R4 };
            auto R6 = di_5[ 0 ];
            auto R7 = py_6[ 0 ];
            SimdVec<TF,1> R8{ R7 };
            auto R9 = di_7[ 0 ];
            SimdVec<TF,2> R10{ R6, R9 };
            SimdVec<TF,2> R11{ R7, R7 };
            auto R12 = py_7[ 0 ];
            auto R13 = py_5[ 0 ];
            SimdVec<TF,2> R14{ R13, R12 };
            auto R15 = R14 - R11;
            auto R16 = px_6[ 0 ];
            SimdVec<TF,1> R17{ R16 };
            auto R18 = di_6[ 0 ];
            SimdVec<TF,2> R19{ R18, R18 };
            auto R20 = R19 - R10;
            auto R21 = R10 / R20;
            auto R22 = R21 * R15;
            auto R23 = R14 + R22;
            auto R24 = R23[ 1 ];
            SimdVec<TF,1> R25{ R24 };
            SimdVec<TF,2> R26{ R16, R16 };
            auto R27 = R5 - R26;
            auto R28 = R21 * R27;
            auto R29 = R5 + R28;
            auto R30 = R29[ 1 ];
            SimdVec<TF,1> R31{ R30 };
            auto R32 = R29[ 0 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = R23[ 0 ];
            SimdVec<TF,1> R35{ R34 };
            py_0 = R35;
            px_0 = R33;
            px_2 = R31;
            py_2 = R25;
            px_1 = R17;
            py_1 = R8;
            pi_0 = R3;
            pi_2 = R3;
            pi_1 = R1;
            continue;
        }
        case_111: {
            nodes_size = 3;
            // mod=[6,0],0,[0,1], swith_cuts=0
            auto R0 = pi_0[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_6[ 0 ];
            SimdVec<TC,1> R3{ cut_i[num_cut] };
            auto R4 = px_1[ 0 ];
            SimdVec<TF,2> R5{ R2, R4 };
            auto R6 = di_6[ 0 ];
            auto R7 = py_0[ 0 ];
            SimdVec<TF,1> R8{ R7 };
            auto R9 = di_1[ 0 ];
            SimdVec<TF,2> R10{ R6, R9 };
            SimdVec<TF,2> R11{ R7, R7 };
            auto R12 = py_1[ 0 ];
            auto R13 = py_6[ 0 ];
            SimdVec<TF,2> R14{ R13, R12 };
            auto R15 = R14 - R11;
            auto R16 = px_0[ 0 ];
            SimdVec<TF,1> R17{ R16 };
            auto R18 = di_0[ 0 ];
            SimdVec<TF,2> R19{ R18, R18 };
            auto R20 = R19 - R10;
            auto R21 = R10 / R20;
            auto R22 = R21 * R15;
            auto R23 = R14 + R22;
            auto R24 = R23[ 1 ];
            SimdVec<TF,1> R25{ R24 };
            SimdVec<TF,2> R26{ R16, R16 };
            auto R27 = R5 - R26;
            auto R28 = R21 * R27;
            auto R29 = R5 + R28;
            auto R30 = R29[ 1 ];
            SimdVec<TF,1> R31{ R30 };
            auto R32 = R29[ 0 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = R23[ 0 ];
            SimdVec<TF,1> R35{ R34 };
            py_0 = R35;
            px_0 = R33;
            px_2 = R31;
            py_2 = R25;
            px_1 = R17;
            py_1 = R8;
            pi_0 = R3;
            pi_2 = R3;
            pi_1 = R1;
            continue;
        }
        case_139: {
            nodes_size = 3;
            // mod=[6,7],7,[7,0], swith_cuts=0
            auto R0 = pi_7[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_6[ 0 ];
            SimdVec<TC,1> R3{ cut_i[num_cut] };
            auto R4 = px_7[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = di_6[ 0 ];
            SimdVec<TF,2> R7{ R2, R4 };
            auto R8 = di_7[ 0 ];
            SimdVec<TF,2> R9{ R6, R8 };
            auto R10 = py_0[ 0 ];
            auto R11 = py_7[ 0 ];
            SimdVec<TF,1> R12{ R11 };
            auto R13 = di_0[ 0 ];
            SimdVec<TF,2> R14{ R8, R13 };
            auto R15 = R14 - R9;
            auto R16 = R9 / R15;
            SimdVec<TF,2> R17{ R11, R10 };
            auto R18 = py_6[ 0 ];
            SimdVec<TF,2> R19{ R18, R11 };
            auto R20 = R19 - R17;
            auto R21 = R16 * R20;
            auto R22 = R19 + R21;
            auto R23 = R22[ 1 ];
            SimdVec<TF,1> R24{ R23 };
            auto R25 = px_0[ 0 ];
            SimdVec<TF,2> R26{ R4, R25 };
            auto R27 = R7 - R26;
            auto R28 = R16 * R27;
            auto R29 = R7 + R28;
            auto R30 = R29[ 1 ];
            SimdVec<TF,1> R31{ R30 };
            auto R32 = R22[ 0 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = R29[ 0 ];
            SimdVec<TF,1> R35{ R34 };
            px_0 = R35;
            py_0 = R33;
            px_2 = R31;
            py_2 = R24;
            py_1 = R12;
            pi_0 = R3;
            px_1 = R5;
            pi_2 = R3;
            pi_1 = R1;
            continue;
        }
        case_164: {
            nodes_size = 3;
            // mod=[7,0],0,[0,1], swith_cuts=0
            auto R0 = pi_0[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_0[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = di_0[ 0 ];
            SimdVec<TF,2> R5{ R4, R4 };
            SimdVec<TF,2> R6{ R2, R2 };
            SimdVec<TC,1> R7{ cut_i[num_cut] };
            auto R8 = di_7[ 0 ];
            auto R9 = di_1[ 0 ];
            SimdVec<TF,2> R10{ R8, R9 };
            auto R11 = R10 - R5;
            auto R12 = R5 / R11;
            auto R13 = py_1[ 0 ];
            auto R14 = py_7[ 0 ];
            SimdVec<TF,2> R15{ R14, R13 };
            auto R16 = py_0[ 0 ];
            SimdVec<TF,1> R17{ R16 };
            auto R18 = px_7[ 0 ];
            SimdVec<TF,2> R19{ R16, R16 };
            auto R20 = R19 - R15;
            auto R21 = R12 * R20;
            auto R22 = R19 + R21;
            auto R23 = R22[ 1 ];
            SimdVec<TF,1> R24{ R23 };
            auto R25 = px_1[ 0 ];
            SimdVec<TF,2> R26{ R18, R25 };
            auto R27 = R6 - R26;
            auto R28 = R12 * R27;
            auto R29 = R6 + R28;
            auto R30 = R29[ 1 ];
            SimdVec<TF,1> R31{ R30 };
            auto R32 = R29[ 0 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = R22[ 0 ];
            SimdVec<TF,1> R35{ R34 };
            py_0 = R35;
            px_0 = R33;
            px_2 = R31;
            py_2 = R24;
            py_1 = R17;
            pi_0 = R7;
            pi_2 = R7;
            px_1 = R3;
            pi_1 = R1;
            continue;
        }
        case_208: {
            nodes_size = 3;
            // mod=[7,8],[6,7],7, swith_cuts=1
            auto R0 = pi_7[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_7[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = di_7[ 0 ];
            SimdVec<TF,2> R5{ R4, R4 };
            SimdVec<TF,2> R6{ R2, R2 };
            SimdVec<TC,1> R7{ cut_i[num_cut] };
            auto R8 = di_6[ 0 ];
            auto R9 = di_8[ 0 ];
            SimdVec<TF,2> R10{ R8, R9 };
            auto R11 = R10 - R5;
            auto R12 = R5 / R11;
            auto R13 = py_8[ 0 ];
            auto R14 = py_6[ 0 ];
            SimdVec<TF,2> R15{ R14, R13 };
            auto R16 = py_7[ 0 ];
            SimdVec<TF,1> R17{ R16 };
            auto R18 = px_6[ 0 ];
            SimdVec<TF,2> R19{ R16, R16 };
            auto R20 = R19 - R15;
            auto R21 = R12 * R20;
            auto R22 = R19 + R21;
            auto R23 = R22[ 0 ];
            SimdVec<TF,1> R24{ R23 };
            auto R25 = px_8[ 0 ];
            SimdVec<TF,2> R26{ R18, R25 };
            auto R27 = R6 - R26;
            auto R28 = R12 * R27;
            auto R29 = R6 + R28;
            auto R30 = R29[ 0 ];
            SimdVec<TF,1> R31{ R30 };
            auto R32 = R29[ 1 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = R22[ 1 ];
            SimdVec<TF,1> R35{ R34 };
            py_0 = R35;
            px_0 = R33;
            px_1 = R31;
            py_1 = R24;
            py_2 = R17;
            pi_0 = R7;
            pi_1 = R7;
            px_2 = R3;
            pi_2 = R1;
            continue;
        }
        case_232: {
            nodes_size = 3;
            // mod=[8,0],0,[0,1], swith_cuts=0
            auto R0 = pi_0[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_0[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = di_0[ 0 ];
            SimdVec<TF,2> R5{ R4, R4 };
            SimdVec<TF,2> R6{ R2, R2 };
            SimdVec<TC,1> R7{ cut_i[num_cut] };
            auto R8 = di_8[ 0 ];
            auto R9 = di_1[ 0 ];
            SimdVec<TF,2> R10{ R8, R9 };
            auto R11 = R10 - R5;
            auto R12 = R5 / R11;
            auto R13 = py_1[ 0 ];
            auto R14 = py_8[ 0 ];
            SimdVec<TF,2> R15{ R14, R13 };
            auto R16 = py_0[ 0 ];
            SimdVec<TF,1> R17{ R16 };
            auto R18 = px_8[ 0 ];
            SimdVec<TF,2> R19{ R16, R16 };
            auto R20 = R19 - R15;
            auto R21 = R12 * R20;
            auto R22 = R19 + R21;
            auto R23 = R22[ 1 ];
            SimdVec<TF,1> R24{ R23 };
            auto R25 = px_1[ 0 ];
            SimdVec<TF,2> R26{ R18, R25 };
            auto R27 = R6 - R26;
            auto R28 = R12 * R27;
            auto R29 = R6 + R28;
            auto R30 = R29[ 1 ];
            SimdVec<TF,1> R31{ R30 };
            auto R32 = R29[ 0 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = R22[ 0 ];
            SimdVec<TF,1> R35{ R34 };
            py_0 = R35;
            px_0 = R33;
            px_2 = R31;
            py_2 = R24;
            py_1 = R17;
            pi_0 = R7;
            pi_2 = R7;
            px_1 = R3;
            pi_1 = R1;
            continue;
        }
        case_200: {
            nodes_size = 3;
            // mod=[8,0],[7,8],8, swith_cuts=1
            auto R0 = pi_8[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_7[ 0 ];
            SimdVec<TC,1> R3{ cut_i[num_cut] };
            auto R4 = px_0[ 0 ];
            SimdVec<TF,2> R5{ R2, R4 };
            auto R6 = di_7[ 0 ];
            auto R7 = py_8[ 0 ];
            SimdVec<TF,1> R8{ R7 };
            auto R9 = di_0[ 0 ];
            SimdVec<TF,2> R10{ R6, R9 };
            SimdVec<TF,2> R11{ R7, R7 };
            auto R12 = py_0[ 0 ];
            auto R13 = py_7[ 0 ];
            SimdVec<TF,2> R14{ R13, R12 };
            auto R15 = R14 - R11;
            auto R16 = px_8[ 0 ];
            SimdVec<TF,1> R17{ R16 };
            auto R18 = di_8[ 0 ];
            SimdVec<TF,2> R19{ R18, R18 };
            auto R20 = R19 - R10;
            auto R21 = R10 / R20;
            auto R22 = R21 * R15;
            auto R23 = R14 + R22;
            auto R24 = R23[ 0 ];
            SimdVec<TF,1> R25{ R24 };
            SimdVec<TF,2> R26{ R16, R16 };
            auto R27 = R5 - R26;
            auto R28 = R21 * R27;
            auto R29 = R5 + R28;
            auto R30 = R29[ 0 ];
            SimdVec<TF,1> R31{ R30 };
            auto R32 = R29[ 1 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = R23[ 1 ];
            SimdVec<TF,1> R35{ R34 };
            py_0 = R35;
            px_0 = R33;
            px_1 = R31;
            py_1 = R25;
            px_2 = R17;
            py_2 = R8;
            pi_0 = R3;
            pi_1 = R3;
            pi_2 = R1;
            continue;
        }
        case_230: {
            nodes_size = 4;
            // mod=0,1,[1,2],[8,0], swith_cuts=1
            SimdVec<TC,1> R0{ cut_i[num_cut] };
            auto R1 = px_0[ 0 ];
            SimdVec<TF,1> R2{ R1 };
            auto R3 = py_0[ 0 ];
            SimdVec<TF,1> R4{ R3 };
            auto R5 = pi_0[ 0 ];
            SimdVec<TC,1> R6{ R5 };
            auto R7 = px_1[ 0 ];
            SimdVec<TF,1> R8{ R7 };
            auto R9 = py_1[ 0 ];
            SimdVec<TF,1> R10{ R9 };
            auto R11 = pi_1[ 0 ];
            SimdVec<TC,1> R12{ R11 };
            auto R13 = px_2[ 0 ];
            SimdVec<TF,2> R14{ R1, R13 };
            auto R15 = di_0[ 0 ];
            auto R16 = py_8[ 0 ];
            SimdVec<TF,2> R17{ R16, R9 };
            auto R18 = py_2[ 0 ];
            SimdVec<TF,2> R19{ R3, R18 };
            auto R20 = R19 - R17;
            auto R21 = px_8[ 0 ];
            SimdVec<TF,2> R22{ R21, R7 };
            auto R23 = R14 - R22;
            auto R24 = di_1[ 0 ];
            auto R25 = di_8[ 0 ];
            SimdVec<TF,2> R26{ R25, R24 };
            auto R27 = di_2[ 0 ];
            SimdVec<TF,2> R28{ R15, R27 };
            auto R29 = R26 - R28;
            auto R30 = R28 / R29;
            auto R31 = R30 * R20;
            auto R32 = R19 + R31;
            auto R33 = R32[ 0 ];
            SimdVec<TF,1> R34{ R33 };
            auto R35 = R30 * R23;
            auto R36 = R14 + R35;
            auto R37 = R36[ 0 ];
            SimdVec<TF,1> R38{ R37 };
            auto R39 = R32[ 1 ];
            SimdVec<TF,1> R40{ R39 };
            auto R41 = R36[ 1 ];
            SimdVec<TF,1> R42{ R41 };
            px_2 = R42;
            py_2 = R40;
            px_3 = R38;
            py_3 = R34;
            pi_2 = R0;
            pi_1 = R12;
            py_1 = R10;
            px_1 = R8;
            pi_0 = R6;
            py_0 = R4;
            px_0 = R2;
            pi_3 = R0;
            continue;
        }
        case_29: {
            nodes_size = 4;
            // mod=0,[0,1],[3,4],4, swith_cuts=1
            auto R0 = pi_4[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_0[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_0[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_0[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_4[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = px_1[ 0 ];
            SimdVec<TF,2> R11{ R8, R10 };
            SimdVec<TC,1> R12{ cut_i[num_cut] };
            auto R13 = di_4[ 0 ];
            auto R14 = di_1[ 0 ];
            SimdVec<TF,2> R15{ R13, R14 };
            auto R16 = py_3[ 0 ];
            SimdVec<TF,2> R17{ R16, R4 };
            auto R18 = py_1[ 0 ];
            auto R19 = py_4[ 0 ];
            SimdVec<TF,1> R20{ R19 };
            auto R21 = di_3[ 0 ];
            SimdVec<TF,2> R22{ R19, R18 };
            auto R23 = R22 - R17;
            auto R24 = px_3[ 0 ];
            SimdVec<TF,2> R25{ R24, R2 };
            auto R26 = R11 - R25;
            auto R27 = di_0[ 0 ];
            SimdVec<TF,2> R28{ R21, R27 };
            auto R29 = R28 - R15;
            auto R30 = R15 / R29;
            auto R31 = R30 * R23;
            auto R32 = R22 + R31;
            auto R33 = R32[ 0 ];
            SimdVec<TF,1> R34{ R33 };
            auto R35 = R30 * R26;
            auto R36 = R11 + R35;
            auto R37 = R36[ 0 ];
            SimdVec<TF,1> R38{ R37 };
            auto R39 = R32[ 1 ];
            SimdVec<TF,1> R40{ R39 };
            auto R41 = R36[ 1 ];
            SimdVec<TF,1> R42{ R41 };
            px_1 = R42;
            py_1 = R40;
            px_2 = R38;
            py_2 = R34;
            py_3 = R20;
            pi_1 = R12;
            pi_2 = R12;
            px_3 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_3 = R1;
            continue;
        }
        case_54: {
            nodes_size = 4;
            // mod=0,[0,1],[4,5],5, swith_cuts=0
            auto R0 = pi_5[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_0[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_0[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_0[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_4[ 0 ];
            SimdVec<TF,2> R9{ R2, R8 };
            SimdVec<TC,1> R10{ cut_i[num_cut] };
            auto R11 = di_0[ 0 ];
            auto R12 = di_4[ 0 ];
            SimdVec<TF,2> R13{ R11, R12 };
            auto R14 = py_5[ 0 ];
            SimdVec<TF,1> R15{ R14 };
            auto R16 = di_1[ 0 ];
            auto R17 = py_1[ 0 ];
            SimdVec<TF,2> R18{ R17, R14 };
            auto R19 = py_4[ 0 ];
            SimdVec<TF,2> R20{ R4, R19 };
            auto R21 = R20 - R18;
            auto R22 = px_5[ 0 ];
            SimdVec<TF,1> R23{ R22 };
            auto R24 = di_5[ 0 ];
            SimdVec<TF,2> R25{ R16, R24 };
            auto R26 = R25 - R13;
            auto R27 = R13 / R26;
            auto R28 = R27 * R21;
            auto R29 = R20 + R28;
            auto R30 = R29[ 1 ];
            SimdVec<TF,1> R31{ R30 };
            auto R32 = px_1[ 0 ];
            SimdVec<TF,2> R33{ R32, R22 };
            auto R34 = R9 - R33;
            auto R35 = R27 * R34;
            auto R36 = R9 + R35;
            auto R37 = R36[ 1 ];
            SimdVec<TF,1> R38{ R37 };
            auto R39 = R29[ 0 ];
            SimdVec<TF,1> R40{ R39 };
            auto R41 = R36[ 0 ];
            SimdVec<TF,1> R42{ R41 };
            px_1 = R42;
            py_1 = R40;
            px_2 = R38;
            py_2 = R31;
            px_3 = R23;
            py_3 = R15;
            pi_1 = R10;
            pi_2 = R10;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_3 = R1;
            continue;
        }
        case_138: {
            nodes_size = 4;
            // mod=0,[0,1],[6,7],7, swith_cuts=1
            auto R0 = pi_7[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_0[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_0[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_0[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_7[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = di_7[ 0 ];
            SimdVec<TF,2> R11{ R8, R2 };
            SimdVec<TC,1> R12{ cut_i[num_cut] };
            auto R13 = di_0[ 0 ];
            SimdVec<TF,2> R14{ R10, R13 };
            auto R15 = di_6[ 0 ];
            auto R16 = py_1[ 0 ];
            auto R17 = py_6[ 0 ];
            SimdVec<TF,2> R18{ R17, R16 };
            auto R19 = py_7[ 0 ];
            SimdVec<TF,1> R20{ R19 };
            auto R21 = di_1[ 0 ];
            SimdVec<TF,2> R22{ R15, R21 };
            auto R23 = R22 - R14;
            auto R24 = R14 / R23;
            SimdVec<TF,2> R25{ R19, R4 };
            auto R26 = R25 - R18;
            auto R27 = R24 * R26;
            auto R28 = R25 + R27;
            auto R29 = R28[ 0 ];
            SimdVec<TF,1> R30{ R29 };
            auto R31 = px_6[ 0 ];
            auto R32 = R28[ 1 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = px_1[ 0 ];
            SimdVec<TF,2> R35{ R31, R34 };
            auto R36 = R11 - R35;
            auto R37 = R24 * R36;
            auto R38 = R11 + R37;
            auto R39 = R38[ 0 ];
            SimdVec<TF,1> R40{ R39 };
            auto R41 = R38[ 1 ];
            SimdVec<TF,1> R42{ R41 };
            px_1 = R42;
            px_2 = R40;
            py_1 = R33;
            py_2 = R30;
            py_3 = R20;
            pi_1 = R12;
            pi_2 = R12;
            px_3 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_3 = R1;
            continue;
        }
        case_199: {
            nodes_size = 4;
            // mod=0,[0,1],[7,8],8, swith_cuts=1
            auto R0 = pi_8[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_0[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_0[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_0[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_7[ 0 ];
            SimdVec<TC,1> R9{ cut_i[num_cut] };
            auto R10 = px_1[ 0 ];
            SimdVec<TF,2> R11{ R8, R10 };
            auto R12 = di_7[ 0 ];
            auto R13 = py_8[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = di_1[ 0 ];
            SimdVec<TF,2> R16{ R12, R15 };
            SimdVec<TF,2> R17{ R13, R4 };
            auto R18 = py_1[ 0 ];
            auto R19 = py_7[ 0 ];
            SimdVec<TF,2> R20{ R19, R18 };
            auto R21 = R20 - R17;
            auto R22 = px_8[ 0 ];
            SimdVec<TF,1> R23{ R22 };
            auto R24 = di_8[ 0 ];
            SimdVec<TF,2> R25{ R22, R2 };
            auto R26 = R11 - R25;
            auto R27 = di_0[ 0 ];
            SimdVec<TF,2> R28{ R24, R27 };
            auto R29 = R28 - R16;
            auto R30 = R16 / R29;
            auto R31 = R30 * R21;
            auto R32 = R20 + R31;
            auto R33 = R32[ 0 ];
            SimdVec<TF,1> R34{ R33 };
            auto R35 = R30 * R26;
            auto R36 = R11 + R35;
            auto R37 = R36[ 0 ];
            SimdVec<TF,1> R38{ R37 };
            auto R39 = R32[ 1 ];
            SimdVec<TF,1> R40{ R39 };
            auto R41 = R36[ 1 ];
            SimdVec<TF,1> R42{ R41 };
            px_1 = R42;
            py_1 = R40;
            px_2 = R38;
            py_2 = R34;
            px_3 = R23;
            py_3 = R14;
            pi_1 = R9;
            pi_2 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_3 = R1;
            continue;
        }
        case_2: {
            nodes_size = 4;
            // mod=1,2,[2,0],[0,1], swith_cuts=0
            SimdVec<TC,1> R0{ cut_i[num_cut] };
            auto R1 = px_1[ 0 ];
            SimdVec<TF,1> R2{ R1 };
            auto R3 = py_1[ 0 ];
            SimdVec<TF,1> R4{ R3 };
            auto R5 = pi_1[ 0 ];
            SimdVec<TC,1> R6{ R5 };
            auto R7 = px_2[ 0 ];
            SimdVec<TF,2> R8{ R7, R1 };
            SimdVec<TF,1> R9{ R7 };
            auto R10 = py_2[ 0 ];
            SimdVec<TF,2> R11{ R10, R3 };
            SimdVec<TF,1> R12{ R10 };
            auto R13 = pi_2[ 0 ];
            SimdVec<TC,1> R14{ R13 };
            auto R15 = px_0[ 0 ];
            SimdVec<TF,2> R16{ R15, R15 };
            auto R17 = R16 - R8;
            auto R18 = di_0[ 0 ];
            SimdVec<TF,2> R19{ R18, R18 };
            auto R20 = py_0[ 0 ];
            SimdVec<TF,2> R21{ R20, R20 };
            auto R22 = R21 - R11;
            auto R23 = di_1[ 0 ];
            auto R24 = di_2[ 0 ];
            SimdVec<TF,2> R25{ R24, R23 };
            auto R26 = R25 - R19;
            auto R27 = R19 / R26;
            auto R28 = R27 * R22;
            auto R29 = R21 + R28;
            auto R30 = R29[ 1 ];
            SimdVec<TF,1> R31{ R30 };
            auto R32 = R27 * R17;
            auto R33 = R16 + R32;
            auto R34 = R33[ 1 ];
            SimdVec<TF,1> R35{ R34 };
            auto R36 = R29[ 0 ];
            SimdVec<TF,1> R37{ R36 };
            auto R38 = R33[ 0 ];
            SimdVec<TF,1> R39{ R38 };
            px_2 = R39;
            py_2 = R37;
            px_3 = R35;
            py_3 = R31;
            pi_2 = R0;
            pi_1 = R14;
            py_1 = R12;
            px_1 = R9;
            pi_0 = R6;
            py_0 = R4;
            px_0 = R2;
            pi_3 = R0;
            continue;
        }
        case_5: {
            nodes_size = 4;
            // mod=1,[1,2],[2,0],0, swith_cuts=0
            auto R0 = pi_0[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_1[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_1[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_1[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_2[ 0 ];
            SimdVec<TF,2> R9{ R8, R8 };
            SimdVec<TC,1> R10{ cut_i[num_cut] };
            auto R11 = di_2[ 0 ];
            SimdVec<TF,2> R12{ R11, R11 };
            auto R13 = di_1[ 0 ];
            auto R14 = py_0[ 0 ];
            SimdVec<TF,1> R15{ R14 };
            auto R16 = di_0[ 0 ];
            SimdVec<TF,2> R17{ R13, R16 };
            auto R18 = R17 - R12;
            auto R19 = R12 / R18;
            SimdVec<TF,2> R20{ R4, R14 };
            auto R21 = py_2[ 0 ];
            SimdVec<TF,2> R22{ R21, R21 };
            auto R23 = R22 - R20;
            auto R24 = R19 * R23;
            auto R25 = R22 + R24;
            auto R26 = R25[ 1 ];
            SimdVec<TF,1> R27{ R26 };
            auto R28 = px_0[ 0 ];
            SimdVec<TF,1> R29{ R28 };
            SimdVec<TF,2> R30{ R2, R28 };
            auto R31 = R9 - R30;
            auto R32 = R19 * R31;
            auto R33 = R9 + R32;
            auto R34 = R33[ 1 ];
            SimdVec<TF,1> R35{ R34 };
            auto R36 = R25[ 0 ];
            SimdVec<TF,1> R37{ R36 };
            auto R38 = R33[ 0 ];
            SimdVec<TF,1> R39{ R38 };
            px_1 = R39;
            py_1 = R37;
            px_2 = R35;
            px_3 = R29;
            py_2 = R27;
            py_3 = R15;
            pi_1 = R10;
            pi_2 = R10;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_3 = R1;
            continue;
        }
        case_38: {
            nodes_size = 4;
            // mod=1,[1,2],[4,0],0, swith_cuts=1
            auto R0 = pi_0[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_1[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_1[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_1[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_0[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = di_0[ 0 ];
            SimdVec<TF,2> R11{ R8, R2 };
            SimdVec<TC,1> R12{ cut_i[num_cut] };
            auto R13 = di_1[ 0 ];
            SimdVec<TF,2> R14{ R10, R13 };
            auto R15 = di_4[ 0 ];
            auto R16 = py_2[ 0 ];
            auto R17 = py_4[ 0 ];
            SimdVec<TF,2> R18{ R17, R16 };
            auto R19 = py_0[ 0 ];
            SimdVec<TF,1> R20{ R19 };
            auto R21 = di_2[ 0 ];
            SimdVec<TF,2> R22{ R15, R21 };
            auto R23 = R22 - R14;
            auto R24 = R14 / R23;
            SimdVec<TF,2> R25{ R19, R4 };
            auto R26 = R25 - R18;
            auto R27 = R24 * R26;
            auto R28 = R25 + R27;
            auto R29 = R28[ 0 ];
            SimdVec<TF,1> R30{ R29 };
            auto R31 = px_4[ 0 ];
            auto R32 = R28[ 1 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = px_2[ 0 ];
            SimdVec<TF,2> R35{ R31, R34 };
            auto R36 = R11 - R35;
            auto R37 = R24 * R36;
            auto R38 = R11 + R37;
            auto R39 = R38[ 0 ];
            SimdVec<TF,1> R40{ R39 };
            auto R41 = R38[ 1 ];
            SimdVec<TF,1> R42{ R41 };
            px_1 = R42;
            px_2 = R40;
            py_1 = R33;
            py_2 = R30;
            py_3 = R20;
            pi_1 = R12;
            pi_2 = R12;
            px_3 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_3 = R1;
            continue;
        }
        case_67: {
            nodes_size = 4;
            // mod=1,[1,2],[5,0],0, swith_cuts=1
            auto R0 = pi_0[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_1[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_1[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_1[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_0[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = di_0[ 0 ];
            SimdVec<TF,2> R11{ R8, R2 };
            SimdVec<TC,1> R12{ cut_i[num_cut] };
            auto R13 = di_1[ 0 ];
            SimdVec<TF,2> R14{ R10, R13 };
            auto R15 = di_5[ 0 ];
            auto R16 = py_2[ 0 ];
            auto R17 = py_5[ 0 ];
            SimdVec<TF,2> R18{ R17, R16 };
            auto R19 = py_0[ 0 ];
            SimdVec<TF,1> R20{ R19 };
            auto R21 = di_2[ 0 ];
            SimdVec<TF,2> R22{ R15, R21 };
            auto R23 = R22 - R14;
            auto R24 = R14 / R23;
            SimdVec<TF,2> R25{ R19, R4 };
            auto R26 = R25 - R18;
            auto R27 = R24 * R26;
            auto R28 = R25 + R27;
            auto R29 = R28[ 0 ];
            SimdVec<TF,1> R30{ R29 };
            auto R31 = px_5[ 0 ];
            auto R32 = R28[ 1 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = px_2[ 0 ];
            SimdVec<TF,2> R35{ R31, R34 };
            auto R36 = R11 - R35;
            auto R37 = R24 * R36;
            auto R38 = R11 + R37;
            auto R39 = R38[ 0 ];
            SimdVec<TF,1> R40{ R39 };
            auto R41 = R38[ 1 ];
            SimdVec<TF,1> R42{ R41 };
            px_1 = R42;
            px_2 = R40;
            py_1 = R33;
            py_2 = R30;
            py_3 = R20;
            pi_1 = R12;
            pi_2 = R12;
            px_3 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_3 = R1;
            continue;
        }
        case_109: {
            nodes_size = 4;
            // mod=1,[1,2],[6,0],0, swith_cuts=0
            auto R0 = pi_0[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_1[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_1[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_1[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_2[ 0 ];
            SimdVec<TC,1> R9{ cut_i[num_cut] };
            auto R10 = px_6[ 0 ];
            SimdVec<TF,2> R11{ R8, R10 };
            auto R12 = di_2[ 0 ];
            auto R13 = py_0[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = di_6[ 0 ];
            SimdVec<TF,2> R16{ R12, R15 };
            SimdVec<TF,2> R17{ R4, R13 };
            auto R18 = py_6[ 0 ];
            auto R19 = py_2[ 0 ];
            SimdVec<TF,2> R20{ R19, R18 };
            auto R21 = R20 - R17;
            auto R22 = px_0[ 0 ];
            SimdVec<TF,1> R23{ R22 };
            auto R24 = di_1[ 0 ];
            SimdVec<TF,2> R25{ R2, R22 };
            auto R26 = R11 - R25;
            auto R27 = di_0[ 0 ];
            SimdVec<TF,2> R28{ R24, R27 };
            auto R29 = R28 - R16;
            auto R30 = R16 / R29;
            auto R31 = R30 * R21;
            auto R32 = R20 + R31;
            auto R33 = R32[ 1 ];
            SimdVec<TF,1> R34{ R33 };
            auto R35 = R30 * R26;
            auto R36 = R11 + R35;
            auto R37 = R36[ 1 ];
            SimdVec<TF,1> R38{ R37 };
            auto R39 = R32[ 0 ];
            SimdVec<TF,1> R40{ R39 };
            auto R41 = R36[ 0 ];
            SimdVec<TF,1> R42{ R41 };
            px_1 = R42;
            py_1 = R40;
            px_2 = R38;
            py_2 = R34;
            px_3 = R23;
            py_3 = R14;
            pi_1 = R9;
            pi_2 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_3 = R1;
            continue;
        }
        case_162: {
            nodes_size = 4;
            // mod=1,[1,2],[7,0],0, swith_cuts=1
            auto R0 = pi_0[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_1[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_1[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_1[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_7[ 0 ];
            SimdVec<TC,1> R9{ cut_i[num_cut] };
            auto R10 = px_2[ 0 ];
            SimdVec<TF,2> R11{ R8, R10 };
            auto R12 = di_7[ 0 ];
            auto R13 = py_0[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = di_2[ 0 ];
            SimdVec<TF,2> R16{ R12, R15 };
            SimdVec<TF,2> R17{ R13, R4 };
            auto R18 = py_2[ 0 ];
            auto R19 = py_7[ 0 ];
            SimdVec<TF,2> R20{ R19, R18 };
            auto R21 = R20 - R17;
            auto R22 = px_0[ 0 ];
            SimdVec<TF,1> R23{ R22 };
            auto R24 = di_0[ 0 ];
            SimdVec<TF,2> R25{ R22, R2 };
            auto R26 = R11 - R25;
            auto R27 = di_1[ 0 ];
            SimdVec<TF,2> R28{ R24, R27 };
            auto R29 = R28 - R16;
            auto R30 = R16 / R29;
            auto R31 = R30 * R21;
            auto R32 = R20 + R31;
            auto R33 = R32[ 0 ];
            SimdVec<TF,1> R34{ R33 };
            auto R35 = R30 * R26;
            auto R36 = R11 + R35;
            auto R37 = R36[ 0 ];
            SimdVec<TF,1> R38{ R37 };
            auto R39 = R32[ 1 ];
            SimdVec<TF,1> R40{ R39 };
            auto R41 = R36[ 1 ];
            SimdVec<TF,1> R42{ R41 };
            px_1 = R42;
            py_1 = R40;
            px_2 = R38;
            py_2 = R34;
            px_3 = R23;
            py_3 = R14;
            pi_1 = R9;
            pi_2 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_3 = R1;
            continue;
        }
        case_226: {
            nodes_size = 4;
            // mod=2,3,[3,4],[1,2], swith_cuts=0
            SimdVec<TC,1> R0{ cut_i[num_cut] };
            auto R1 = px_2[ 0 ];
            SimdVec<TF,1> R2{ R1 };
            auto R3 = py_2[ 0 ];
            SimdVec<TF,1> R4{ R3 };
            auto R5 = pi_2[ 0 ];
            SimdVec<TC,1> R6{ R5 };
            auto R7 = px_3[ 0 ];
            SimdVec<TF,1> R8{ R7 };
            auto R9 = py_3[ 0 ];
            SimdVec<TF,1> R10{ R9 };
            auto R11 = pi_3[ 0 ];
            SimdVec<TC,1> R12{ R11 };
            auto R13 = px_1[ 0 ];
            SimdVec<TF,2> R14{ R7, R13 };
            auto R15 = di_3[ 0 ];
            auto R16 = py_4[ 0 ];
            SimdVec<TF,2> R17{ R16, R3 };
            auto R18 = py_1[ 0 ];
            SimdVec<TF,2> R19{ R9, R18 };
            auto R20 = R19 - R17;
            auto R21 = px_4[ 0 ];
            SimdVec<TF,2> R22{ R21, R1 };
            auto R23 = R14 - R22;
            auto R24 = di_2[ 0 ];
            auto R25 = di_4[ 0 ];
            SimdVec<TF,2> R26{ R25, R24 };
            auto R27 = di_1[ 0 ];
            SimdVec<TF,2> R28{ R15, R27 };
            auto R29 = R26 - R28;
            auto R30 = R28 / R29;
            auto R31 = R30 * R20;
            auto R32 = R19 + R31;
            auto R33 = R32[ 1 ];
            SimdVec<TF,1> R34{ R33 };
            auto R35 = R30 * R23;
            auto R36 = R14 + R35;
            auto R37 = R36[ 1 ];
            SimdVec<TF,1> R38{ R37 };
            auto R39 = R32[ 0 ];
            SimdVec<TF,1> R40{ R39 };
            auto R41 = R36[ 0 ];
            SimdVec<TF,1> R42{ R41 };
            px_2 = R42;
            py_2 = R40;
            px_3 = R38;
            py_3 = R34;
            pi_2 = R0;
            pi_1 = R12;
            py_1 = R10;
            px_1 = R8;
            pi_0 = R6;
            py_0 = R4;
            px_0 = R2;
            pi_3 = R0;
            continue;
        }
        case_229: {
            nodes_size = 4;
            // mod=2,[2,3],[0,1],1, swith_cuts=0
            auto R0 = pi_1[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_2[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_2[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_2[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_0[ 0 ];
            SimdVec<TF,2> R9{ R2, R8 };
            SimdVec<TC,1> R10{ cut_i[num_cut] };
            auto R11 = di_2[ 0 ];
            auto R12 = di_0[ 0 ];
            SimdVec<TF,2> R13{ R11, R12 };
            auto R14 = py_1[ 0 ];
            SimdVec<TF,1> R15{ R14 };
            auto R16 = di_3[ 0 ];
            auto R17 = py_3[ 0 ];
            SimdVec<TF,2> R18{ R17, R14 };
            auto R19 = py_0[ 0 ];
            SimdVec<TF,2> R20{ R4, R19 };
            auto R21 = R20 - R18;
            auto R22 = px_1[ 0 ];
            SimdVec<TF,1> R23{ R22 };
            auto R24 = di_1[ 0 ];
            SimdVec<TF,2> R25{ R16, R24 };
            auto R26 = R25 - R13;
            auto R27 = R13 / R26;
            auto R28 = R27 * R21;
            auto R29 = R20 + R28;
            auto R30 = R29[ 1 ];
            SimdVec<TF,1> R31{ R30 };
            auto R32 = px_3[ 0 ];
            SimdVec<TF,2> R33{ R32, R22 };
            auto R34 = R9 - R33;
            auto R35 = R27 * R34;
            auto R36 = R9 + R35;
            auto R37 = R36[ 1 ];
            SimdVec<TF,1> R38{ R37 };
            auto R39 = R29[ 0 ];
            SimdVec<TF,1> R40{ R39 };
            auto R41 = R36[ 0 ];
            SimdVec<TF,1> R42{ R41 };
            px_1 = R42;
            py_1 = R40;
            px_2 = R38;
            py_2 = R31;
            px_3 = R23;
            py_3 = R15;
            pi_1 = R10;
            pi_2 = R10;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_3 = R1;
            continue;
        }
        case_36: {
            nodes_size = 4;
            // mod=2,[2,3],[0,1],1, swith_cuts=0
            auto R0 = pi_1[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_2[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_2[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_2[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_3[ 0 ];
            SimdVec<TC,1> R9{ cut_i[num_cut] };
            auto R10 = px_1[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = di_3[ 0 ];
            SimdVec<TF,2> R13{ R8, R10 };
            auto R14 = di_1[ 0 ];
            SimdVec<TF,2> R15{ R12, R14 };
            auto R16 = py_0[ 0 ];
            SimdVec<TF,2> R17{ R4, R16 };
            auto R18 = py_1[ 0 ];
            SimdVec<TF,1> R19{ R18 };
            auto R20 = di_2[ 0 ];
            auto R21 = py_3[ 0 ];
            SimdVec<TF,2> R22{ R21, R18 };
            auto R23 = R22 - R17;
            auto R24 = px_0[ 0 ];
            SimdVec<TF,2> R25{ R2, R24 };
            auto R26 = R13 - R25;
            auto R27 = di_0[ 0 ];
            SimdVec<TF,2> R28{ R20, R27 };
            auto R29 = R28 - R15;
            auto R30 = R15 / R29;
            auto R31 = R30 * R23;
            auto R32 = R22 + R31;
            auto R33 = R32[ 1 ];
            SimdVec<TF,1> R34{ R33 };
            auto R35 = R30 * R26;
            auto R36 = R13 + R35;
            auto R37 = R36[ 1 ];
            SimdVec<TF,1> R38{ R37 };
            auto R39 = R32[ 0 ];
            SimdVec<TF,1> R40{ R39 };
            auto R41 = R36[ 0 ];
            SimdVec<TF,1> R42{ R41 };
            px_1 = R42;
            py_1 = R40;
            px_2 = R38;
            py_2 = R34;
            py_3 = R19;
            pi_1 = R9;
            px_3 = R11;
            pi_2 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_3 = R1;
            continue;
        }
        case_107: {
            nodes_size = 4;
            // mod=2,[2,3],[0,1],1, swith_cuts=1
            auto R0 = pi_1[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_2[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_2[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_2[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_0[ 0 ];
            SimdVec<TF,2> R9{ R8, R2 };
            SimdVec<TC,1> R10{ cut_i[num_cut] };
            auto R11 = di_0[ 0 ];
            auto R12 = di_2[ 0 ];
            SimdVec<TF,2> R13{ R11, R12 };
            auto R14 = py_3[ 0 ];
            auto R15 = py_1[ 0 ];
            SimdVec<TF,1> R16{ R15 };
            auto R17 = di_1[ 0 ];
            SimdVec<TF,2> R18{ R15, R14 };
            auto R19 = py_0[ 0 ];
            SimdVec<TF,2> R20{ R19, R4 };
            auto R21 = R20 - R18;
            auto R22 = px_3[ 0 ];
            auto R23 = px_1[ 0 ];
            SimdVec<TF,1> R24{ R23 };
            auto R25 = di_3[ 0 ];
            SimdVec<TF,2> R26{ R17, R25 };
            auto R27 = R26 - R13;
            auto R28 = R13 / R27;
            auto R29 = R28 * R21;
            auto R30 = R20 + R29;
            auto R31 = R30[ 0 ];
            SimdVec<TF,1> R32{ R31 };
            SimdVec<TF,2> R33{ R23, R22 };
            auto R34 = R9 - R33;
            auto R35 = R28 * R34;
            auto R36 = R9 + R35;
            auto R37 = R36[ 0 ];
            SimdVec<TF,1> R38{ R37 };
            auto R39 = R30[ 1 ];
            SimdVec<TF,1> R40{ R39 };
            auto R41 = R36[ 1 ];
            SimdVec<TF,1> R42{ R41 };
            px_1 = R42;
            py_1 = R40;
            px_2 = R38;
            py_2 = R32;
            px_3 = R24;
            py_3 = R16;
            pi_1 = R10;
            pi_2 = R10;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_3 = R1;
            continue;
        }
        case_222: {
            nodes_size = 4;
            // mod=3,4,[4,5],[2,3], swith_cuts=0
            SimdVec<TC,1> R0{ cut_i[num_cut] };
            auto R1 = px_3[ 0 ];
            SimdVec<TF,1> R2{ R1 };
            auto R3 = py_3[ 0 ];
            SimdVec<TF,1> R4{ R3 };
            auto R5 = pi_3[ 0 ];
            SimdVec<TC,1> R6{ R5 };
            auto R7 = px_4[ 0 ];
            SimdVec<TF,2> R8{ R7, R1 };
            SimdVec<TF,1> R9{ R7 };
            auto R10 = py_4[ 0 ];
            SimdVec<TF,2> R11{ R10, R3 };
            SimdVec<TF,1> R12{ R10 };
            auto R13 = pi_4[ 0 ];
            SimdVec<TC,1> R14{ R13 };
            auto R15 = px_5[ 0 ];
            auto R16 = px_2[ 0 ];
            SimdVec<TF,2> R17{ R15, R16 };
            auto R18 = R17 - R8;
            auto R19 = py_2[ 0 ];
            auto R20 = py_5[ 0 ];
            SimdVec<TF,2> R21{ R20, R19 };
            auto R22 = R21 - R11;
            auto R23 = di_3[ 0 ];
            auto R24 = di_4[ 0 ];
            SimdVec<TF,2> R25{ R24, R23 };
            auto R26 = di_2[ 0 ];
            auto R27 = di_5[ 0 ];
            SimdVec<TF,2> R28{ R27, R26 };
            auto R29 = R25 - R28;
            auto R30 = R28 / R29;
            auto R31 = R30 * R22;
            auto R32 = R21 + R31;
            auto R33 = R32[ 1 ];
            SimdVec<TF,1> R34{ R33 };
            auto R35 = R30 * R18;
            auto R36 = R17 + R35;
            auto R37 = R36[ 1 ];
            SimdVec<TF,1> R38{ R37 };
            auto R39 = R32[ 0 ];
            SimdVec<TF,1> R40{ R39 };
            auto R41 = R36[ 0 ];
            SimdVec<TF,1> R42{ R41 };
            px_2 = R42;
            py_2 = R40;
            px_3 = R38;
            py_3 = R34;
            pi_2 = R0;
            pi_1 = R14;
            py_1 = R12;
            px_1 = R9;
            pi_0 = R6;
            py_0 = R4;
            px_0 = R2;
            pi_3 = R0;
            continue;
        }
        case_192: {
            nodes_size = 4;
            // mod=8,[8,0],[6,7],7, swith_cuts=1
            auto R0 = pi_7[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_8[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_8[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_8[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_7[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = px_0[ 0 ];
            SimdVec<TF,2> R11{ R8, R10 };
            SimdVec<TC,1> R12{ cut_i[num_cut] };
            auto R13 = di_7[ 0 ];
            auto R14 = di_0[ 0 ];
            SimdVec<TF,2> R15{ R13, R14 };
            auto R16 = py_6[ 0 ];
            SimdVec<TF,2> R17{ R16, R4 };
            auto R18 = py_0[ 0 ];
            auto R19 = py_7[ 0 ];
            SimdVec<TF,1> R20{ R19 };
            auto R21 = di_6[ 0 ];
            SimdVec<TF,2> R22{ R19, R18 };
            auto R23 = R22 - R17;
            auto R24 = px_6[ 0 ];
            SimdVec<TF,2> R25{ R24, R2 };
            auto R26 = R11 - R25;
            auto R27 = di_8[ 0 ];
            SimdVec<TF,2> R28{ R21, R27 };
            auto R29 = R28 - R15;
            auto R30 = R15 / R29;
            auto R31 = R30 * R23;
            auto R32 = R22 + R31;
            auto R33 = R32[ 0 ];
            SimdVec<TF,1> R34{ R33 };
            auto R35 = R30 * R26;
            auto R36 = R11 + R35;
            auto R37 = R36[ 0 ];
            SimdVec<TF,1> R38{ R37 };
            auto R39 = R32[ 1 ];
            SimdVec<TF,1> R40{ R39 };
            auto R41 = R36[ 1 ];
            SimdVec<TF,1> R42{ R41 };
            px_1 = R42;
            py_1 = R40;
            px_2 = R38;
            py_2 = R34;
            py_3 = R20;
            pi_1 = R12;
            pi_2 = R12;
            px_3 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_3 = R1;
            continue;
        }
        case_3: {
            nodes_size = 4;
            // mod=[0,1],[1,2],2,0, swith_cuts=0
            auto R0 = pi_0[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_1[ 0 ];
            auto R3 = pi_2[ 0 ];
            SimdVec<TC,1> R4{ R3 };
            auto R5 = px_2[ 0 ];
            SimdVec<TF,1> R6{ R5 };
            auto R7 = di_1[ 0 ];
            SimdVec<TF,2> R8{ R2, R5 };
            SimdVec<TC,1> R9{ cut_i[num_cut] };
            auto R10 = di_2[ 0 ];
            SimdVec<TF,2> R11{ R7, R10 };
            auto R12 = di_0[ 0 ];
            SimdVec<TF,2> R13{ R12, R7 };
            auto R14 = R13 - R11;
            auto R15 = R11 / R14;
            auto R16 = py_0[ 0 ];
            SimdVec<TF,1> R17{ R16 };
            auto R18 = px_0[ 0 ];
            SimdVec<TF,1> R19{ R18 };
            auto R20 = py_1[ 0 ];
            SimdVec<TF,2> R21{ R16, R20 };
            SimdVec<TF,2> R22{ R18, R2 };
            auto R23 = R8 - R22;
            auto R24 = R15 * R23;
            auto R25 = R8 + R24;
            auto R26 = R25[ 1 ];
            SimdVec<TF,1> R27{ R26 };
            auto R28 = py_2[ 0 ];
            SimdVec<TF,1> R29{ R28 };
            auto R30 = R25[ 0 ];
            SimdVec<TF,1> R31{ R30 };
            SimdVec<TF,2> R32{ R20, R28 };
            auto R33 = R32 - R21;
            auto R34 = R15 * R33;
            auto R35 = R32 + R34;
            auto R36 = R35[ 1 ];
            SimdVec<TF,1> R37{ R36 };
            auto R38 = R35[ 0 ];
            SimdVec<TF,1> R39{ R38 };
            py_0 = R39;
            py_1 = R37;
            px_0 = R31;
            py_2 = R29;
            px_1 = R27;
            px_3 = R19;
            py_3 = R17;
            pi_0 = R9;
            pi_1 = R9;
            px_2 = R6;
            pi_2 = R4;
            pi_3 = R1;
            continue;
        }
        case_89: {
            nodes_size = 4;
            // mod=[0,1],[5,6],6,0, swith_cuts=1
            auto R0 = pi_0[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_6[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = px_0[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = di_6[ 0 ];
            SimdVec<TF,2> R7{ R2, R4 };
            auto R8 = pi_6[ 0 ];
            SimdVec<TC,1> R9{ R8 };
            auto R10 = di_0[ 0 ];
            SimdVec<TF,2> R11{ R6, R10 };
            SimdVec<TC,1> R12{ cut_i[num_cut] };
            auto R13 = di_5[ 0 ];
            auto R14 = di_1[ 0 ];
            SimdVec<TF,2> R15{ R13, R14 };
            auto R16 = R15 - R11;
            auto R17 = R11 / R16;
            auto R18 = py_1[ 0 ];
            auto R19 = py_5[ 0 ];
            SimdVec<TF,2> R20{ R19, R18 };
            auto R21 = py_0[ 0 ];
            SimdVec<TF,1> R22{ R21 };
            auto R23 = px_5[ 0 ];
            auto R24 = py_6[ 0 ];
            SimdVec<TF,1> R25{ R24 };
            auto R26 = px_1[ 0 ];
            SimdVec<TF,2> R27{ R23, R26 };
            auto R28 = R7 - R27;
            auto R29 = R17 * R28;
            auto R30 = R7 + R29;
            auto R31 = R30[ 0 ];
            SimdVec<TF,1> R32{ R31 };
            SimdVec<TF,2> R33{ R24, R21 };
            auto R34 = R33 - R20;
            auto R35 = R17 * R34;
            auto R36 = R33 + R35;
            auto R37 = R36[ 0 ];
            SimdVec<TF,1> R38{ R37 };
            auto R39 = R30[ 1 ];
            SimdVec<TF,1> R40{ R39 };
            auto R41 = R36[ 1 ];
            SimdVec<TF,1> R42{ R41 };
            py_0 = R42;
            px_0 = R40;
            py_1 = R38;
            px_1 = R32;
            py_2 = R25;
            py_3 = R22;
            pi_0 = R12;
            pi_1 = R12;
            pi_2 = R9;
            px_3 = R5;
            px_2 = R3;
            pi_3 = R1;
            continue;
        }
        case_33: {
            nodes_size = 4;
            // mod=[1,2],2,3,[3,4], swith_cuts=1
            auto R0 = pi_3[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_3[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = px_1[ 0 ];
            SimdVec<TF,2> R5{ R2, R4 };
            auto R6 = pi_2[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = di_3[ 0 ];
            SimdVec<TC,1> R9{ cut_i[num_cut] };
            auto R10 = di_1[ 0 ];
            SimdVec<TF,2> R11{ R8, R10 };
            auto R12 = di_4[ 0 ];
            auto R13 = py_2[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = di_2[ 0 ];
            SimdVec<TF,2> R16{ R12, R15 };
            auto R17 = R16 - R11;
            auto R18 = R11 / R17;
            auto R19 = py_4[ 0 ];
            SimdVec<TF,2> R20{ R19, R13 };
            auto R21 = py_1[ 0 ];
            auto R22 = py_3[ 0 ];
            SimdVec<TF,1> R23{ R22 };
            auto R24 = px_4[ 0 ];
            SimdVec<TF,2> R25{ R22, R21 };
            auto R26 = R25 - R20;
            auto R27 = R18 * R26;
            auto R28 = R25 + R27;
            auto R29 = R28[ 0 ];
            SimdVec<TF,1> R30{ R29 };
            auto R31 = px_2[ 0 ];
            SimdVec<TF,1> R32{ R31 };
            auto R33 = R28[ 1 ];
            SimdVec<TF,1> R34{ R33 };
            SimdVec<TF,2> R35{ R24, R31 };
            auto R36 = R5 - R35;
            auto R37 = R18 * R36;
            auto R38 = R5 + R37;
            auto R39 = R38[ 0 ];
            SimdVec<TF,1> R40{ R39 };
            auto R41 = R38[ 1 ];
            SimdVec<TF,1> R42{ R41 };
            px_0 = R42;
            px_3 = R40;
            py_0 = R34;
            px_1 = R32;
            py_3 = R30;
            py_2 = R23;
            py_1 = R14;
            pi_0 = R9;
            pi_3 = R9;
            pi_1 = R7;
            px_2 = R3;
            pi_2 = R1;
            continue;
        }
        case_104: {
            nodes_size = 4;
            // mod=[1,2],2,3,[3,4], swith_cuts=1
            auto R0 = pi_3[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_4[ 0 ];
            auto R3 = pi_2[ 0 ];
            SimdVec<TC,1> R4{ R3 };
            auto R5 = px_1[ 0 ];
            SimdVec<TF,2> R6{ R2, R5 };
            SimdVec<TC,1> R7{ cut_i[num_cut] };
            auto R8 = di_4[ 0 ];
            auto R9 = di_1[ 0 ];
            SimdVec<TF,2> R10{ R8, R9 };
            auto R11 = py_2[ 0 ];
            SimdVec<TF,1> R12{ R11 };
            auto R13 = di_3[ 0 ];
            auto R14 = py_3[ 0 ];
            SimdVec<TF,1> R15{ R14 };
            auto R16 = di_2[ 0 ];
            SimdVec<TF,2> R17{ R13, R16 };
            auto R18 = R17 - R10;
            auto R19 = R10 / R18;
            SimdVec<TF,2> R20{ R14, R11 };
            auto R21 = py_1[ 0 ];
            auto R22 = py_4[ 0 ];
            SimdVec<TF,2> R23{ R22, R21 };
            auto R24 = R23 - R20;
            auto R25 = R19 * R24;
            auto R26 = R23 + R25;
            auto R27 = R26[ 0 ];
            SimdVec<TF,1> R28{ R27 };
            auto R29 = px_3[ 0 ];
            SimdVec<TF,1> R30{ R29 };
            auto R31 = px_2[ 0 ];
            SimdVec<TF,1> R32{ R31 };
            auto R33 = R26[ 1 ];
            SimdVec<TF,1> R34{ R33 };
            SimdVec<TF,2> R35{ R29, R31 };
            auto R36 = R6 - R35;
            auto R37 = R19 * R36;
            auto R38 = R6 + R37;
            auto R39 = R38[ 0 ];
            SimdVec<TF,1> R40{ R39 };
            auto R41 = R38[ 1 ];
            SimdVec<TF,1> R42{ R41 };
            px_0 = R42;
            px_3 = R40;
            py_0 = R34;
            px_1 = R32;
            px_2 = R30;
            py_3 = R28;
            py_2 = R15;
            py_1 = R12;
            pi_0 = R7;
            pi_3 = R7;
            pi_1 = R4;
            pi_2 = R1;
            continue;
        }
        case_26: {
            nodes_size = 4;
            // mod=[2,3],3,4,[4,0], swith_cuts=0
            auto R0 = pi_4[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_3[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = px_0[ 0 ];
            SimdVec<TF,2> R5{ R2, R4 };
            auto R6 = pi_3[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = di_3[ 0 ];
            SimdVec<TC,1> R9{ cut_i[num_cut] };
            auto R10 = di_0[ 0 ];
            SimdVec<TF,2> R11{ R8, R10 };
            auto R12 = di_2[ 0 ];
            auto R13 = py_4[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = di_4[ 0 ];
            SimdVec<TF,2> R16{ R12, R15 };
            auto R17 = R16 - R11;
            auto R18 = R11 / R17;
            auto R19 = py_2[ 0 ];
            SimdVec<TF,2> R20{ R19, R13 };
            auto R21 = py_0[ 0 ];
            auto R22 = py_3[ 0 ];
            SimdVec<TF,1> R23{ R22 };
            auto R24 = px_2[ 0 ];
            SimdVec<TF,2> R25{ R22, R21 };
            auto R26 = R25 - R20;
            auto R27 = R18 * R26;
            auto R28 = R25 + R27;
            auto R29 = R28[ 1 ];
            SimdVec<TF,1> R30{ R29 };
            auto R31 = px_4[ 0 ];
            SimdVec<TF,1> R32{ R31 };
            auto R33 = R28[ 0 ];
            SimdVec<TF,1> R34{ R33 };
            SimdVec<TF,2> R35{ R24, R31 };
            auto R36 = R5 - R35;
            auto R37 = R18 * R36;
            auto R38 = R5 + R37;
            auto R39 = R38[ 1 ];
            SimdVec<TF,1> R40{ R39 };
            auto R41 = R38[ 0 ];
            SimdVec<TF,1> R42{ R41 };
            px_0 = R42;
            px_3 = R40;
            py_0 = R34;
            px_2 = R32;
            py_3 = R30;
            py_1 = R23;
            py_2 = R14;
            pi_0 = R9;
            pi_3 = R9;
            pi_1 = R7;
            px_1 = R3;
            pi_2 = R1;
            continue;
        }
        case_100: {
            nodes_size = 4;
            // mod=[2,3],3,4,[4,5], swith_cuts=0
            auto R0 = pi_4[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_2[ 0 ];
            auto R3 = pi_3[ 0 ];
            SimdVec<TC,1> R4{ R3 };
            auto R5 = px_4[ 0 ];
            SimdVec<TF,1> R6{ R5 };
            auto R7 = di_2[ 0 ];
            SimdVec<TF,2> R8{ R2, R5 };
            SimdVec<TC,1> R9{ cut_i[num_cut] };
            auto R10 = di_4[ 0 ];
            SimdVec<TF,2> R11{ R7, R10 };
            auto R12 = di_3[ 0 ];
            auto R13 = py_5[ 0 ];
            auto R14 = py_3[ 0 ];
            SimdVec<TF,1> R15{ R14 };
            auto R16 = di_5[ 0 ];
            SimdVec<TF,2> R17{ R12, R16 };
            auto R18 = R17 - R11;
            auto R19 = R11 / R18;
            SimdVec<TF,2> R20{ R14, R13 };
            auto R21 = py_4[ 0 ];
            SimdVec<TF,1> R22{ R21 };
            auto R23 = px_3[ 0 ];
            SimdVec<TF,1> R24{ R23 };
            auto R25 = px_5[ 0 ];
            SimdVec<TF,2> R26{ R23, R25 };
            auto R27 = R8 - R26;
            auto R28 = R19 * R27;
            auto R29 = R8 + R28;
            auto R30 = R29[ 1 ];
            SimdVec<TF,1> R31{ R30 };
            auto R32 = py_2[ 0 ];
            SimdVec<TF,2> R33{ R32, R21 };
            auto R34 = R33 - R20;
            auto R35 = R19 * R34;
            auto R36 = R33 + R35;
            auto R37 = R36[ 1 ];
            SimdVec<TF,1> R38{ R37 };
            auto R39 = R29[ 0 ];
            SimdVec<TF,1> R40{ R39 };
            auto R41 = R36[ 0 ];
            SimdVec<TF,1> R42{ R41 };
            py_0 = R42;
            px_0 = R40;
            py_3 = R38;
            px_3 = R31;
            px_1 = R24;
            py_2 = R22;
            py_1 = R15;
            pi_0 = R9;
            pi_3 = R9;
            px_2 = R6;
            pi_1 = R4;
            pi_2 = R1;
            continue;
        }
        case_59: {
            nodes_size = 4;
            // mod=[2,3],3,4,[4,5], swith_cuts=0
            auto R0 = pi_4[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_2[ 0 ];
            auto R3 = pi_3[ 0 ];
            SimdVec<TC,1> R4{ R3 };
            auto R5 = px_5[ 0 ];
            SimdVec<TF,2> R6{ R2, R5 };
            SimdVec<TC,1> R7{ cut_i[num_cut] };
            auto R8 = di_2[ 0 ];
            auto R9 = di_5[ 0 ];
            SimdVec<TF,2> R10{ R8, R9 };
            auto R11 = py_4[ 0 ];
            SimdVec<TF,1> R12{ R11 };
            auto R13 = di_3[ 0 ];
            auto R14 = py_3[ 0 ];
            SimdVec<TF,1> R15{ R14 };
            auto R16 = di_4[ 0 ];
            SimdVec<TF,2> R17{ R13, R16 };
            auto R18 = R17 - R10;
            auto R19 = R10 / R18;
            SimdVec<TF,2> R20{ R14, R11 };
            auto R21 = py_5[ 0 ];
            auto R22 = py_2[ 0 ];
            SimdVec<TF,2> R23{ R22, R21 };
            auto R24 = R23 - R20;
            auto R25 = R19 * R24;
            auto R26 = R23 + R25;
            auto R27 = R26[ 1 ];
            SimdVec<TF,1> R28{ R27 };
            auto R29 = px_3[ 0 ];
            SimdVec<TF,1> R30{ R29 };
            auto R31 = px_4[ 0 ];
            SimdVec<TF,1> R32{ R31 };
            auto R33 = R26[ 0 ];
            SimdVec<TF,1> R34{ R33 };
            SimdVec<TF,2> R35{ R29, R31 };
            auto R36 = R6 - R35;
            auto R37 = R19 * R36;
            auto R38 = R6 + R37;
            auto R39 = R38[ 1 ];
            SimdVec<TF,1> R40{ R39 };
            auto R41 = R38[ 0 ];
            SimdVec<TF,1> R42{ R41 };
            px_0 = R42;
            px_3 = R40;
            py_0 = R34;
            px_2 = R32;
            px_1 = R30;
            py_3 = R28;
            py_1 = R15;
            py_2 = R12;
            pi_0 = R7;
            pi_3 = R7;
            pi_1 = R4;
            pi_2 = R1;
            continue;
        }
        case_155: {
            nodes_size = 4;
            // mod=[2,3],3,4,[4,5], swith_cuts=1
            auto R0 = pi_4[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_5[ 0 ];
            auto R3 = pi_3[ 0 ];
            SimdVec<TC,1> R4{ R3 };
            auto R5 = px_3[ 0 ];
            SimdVec<TF,1> R6{ R5 };
            auto R7 = di_5[ 0 ];
            SimdVec<TF,2> R8{ R2, R5 };
            SimdVec<TC,1> R9{ cut_i[num_cut] };
            auto R10 = di_3[ 0 ];
            SimdVec<TF,2> R11{ R7, R10 };
            auto R12 = di_4[ 0 ];
            auto R13 = py_2[ 0 ];
            auto R14 = py_4[ 0 ];
            SimdVec<TF,1> R15{ R14 };
            auto R16 = di_2[ 0 ];
            SimdVec<TF,2> R17{ R12, R16 };
            auto R18 = R17 - R11;
            auto R19 = R11 / R18;
            SimdVec<TF,2> R20{ R14, R13 };
            auto R21 = py_3[ 0 ];
            SimdVec<TF,1> R22{ R21 };
            auto R23 = px_4[ 0 ];
            SimdVec<TF,1> R24{ R23 };
            auto R25 = px_2[ 0 ];
            SimdVec<TF,2> R26{ R23, R25 };
            auto R27 = R8 - R26;
            auto R28 = R19 * R27;
            auto R29 = R8 + R28;
            auto R30 = R29[ 0 ];
            SimdVec<TF,1> R31{ R30 };
            auto R32 = py_5[ 0 ];
            SimdVec<TF,2> R33{ R32, R21 };
            auto R34 = R33 - R20;
            auto R35 = R19 * R34;
            auto R36 = R33 + R35;
            auto R37 = R36[ 0 ];
            SimdVec<TF,1> R38{ R37 };
            auto R39 = R29[ 1 ];
            SimdVec<TF,1> R40{ R39 };
            auto R41 = R36[ 1 ];
            SimdVec<TF,1> R42{ R41 };
            py_0 = R42;
            px_0 = R40;
            py_3 = R38;
            px_3 = R31;
            px_2 = R24;
            py_1 = R22;
            py_2 = R15;
            pi_0 = R9;
            pi_3 = R9;
            px_1 = R6;
            pi_1 = R4;
            pi_2 = R1;
            continue;
        }
        case_65: {
            nodes_size = 4;
            // mod=[2,3],[0,1],1,2, swith_cuts=0
            auto R0 = pi_2[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_2[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = px_0[ 0 ];
            SimdVec<TF,2> R5{ R2, R4 };
            auto R6 = pi_1[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = di_2[ 0 ];
            SimdVec<TC,1> R9{ cut_i[num_cut] };
            auto R10 = di_0[ 0 ];
            SimdVec<TF,2> R11{ R8, R10 };
            auto R12 = di_3[ 0 ];
            auto R13 = py_1[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = di_1[ 0 ];
            SimdVec<TF,2> R16{ R12, R15 };
            auto R17 = R16 - R11;
            auto R18 = R11 / R17;
            auto R19 = py_3[ 0 ];
            SimdVec<TF,2> R20{ R19, R13 };
            auto R21 = py_0[ 0 ];
            auto R22 = py_2[ 0 ];
            SimdVec<TF,1> R23{ R22 };
            auto R24 = px_3[ 0 ];
            SimdVec<TF,2> R25{ R22, R21 };
            auto R26 = R25 - R20;
            auto R27 = R18 * R26;
            auto R28 = R25 + R27;
            auto R29 = R28[ 1 ];
            SimdVec<TF,1> R30{ R29 };
            auto R31 = px_1[ 0 ];
            SimdVec<TF,1> R32{ R31 };
            auto R33 = R28[ 0 ];
            SimdVec<TF,1> R34{ R33 };
            SimdVec<TF,2> R35{ R24, R31 };
            auto R36 = R5 - R35;
            auto R37 = R18 * R36;
            auto R38 = R5 + R37;
            auto R39 = R38[ 1 ];
            SimdVec<TF,1> R40{ R39 };
            auto R41 = R38[ 0 ];
            SimdVec<TF,1> R42{ R41 };
            px_0 = R42;
            px_1 = R40;
            py_0 = R34;
            px_2 = R32;
            py_1 = R30;
            py_3 = R23;
            py_2 = R14;
            pi_0 = R9;
            pi_1 = R9;
            pi_2 = R7;
            px_3 = R3;
            pi_3 = R1;
            continue;
        }
        case_161: {
            nodes_size = 4;
            // mod=[2,3],[0,1],1,2, swith_cuts=1
            auto R0 = pi_2[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_0[ 0 ];
            auto R3 = pi_1[ 0 ];
            SimdVec<TC,1> R4{ R3 };
            auto R5 = px_2[ 0 ];
            SimdVec<TF,1> R6{ R5 };
            auto R7 = di_0[ 0 ];
            SimdVec<TF,2> R8{ R2, R5 };
            SimdVec<TC,1> R9{ cut_i[num_cut] };
            auto R10 = di_2[ 0 ];
            SimdVec<TF,2> R11{ R7, R10 };
            auto R12 = di_1[ 0 ];
            auto R13 = py_3[ 0 ];
            auto R14 = py_1[ 0 ];
            SimdVec<TF,1> R15{ R14 };
            auto R16 = di_3[ 0 ];
            SimdVec<TF,2> R17{ R12, R16 };
            auto R18 = R17 - R11;
            auto R19 = R11 / R18;
            SimdVec<TF,2> R20{ R14, R13 };
            auto R21 = py_2[ 0 ];
            SimdVec<TF,1> R22{ R21 };
            auto R23 = px_1[ 0 ];
            SimdVec<TF,1> R24{ R23 };
            auto R25 = px_3[ 0 ];
            SimdVec<TF,2> R26{ R23, R25 };
            auto R27 = R8 - R26;
            auto R28 = R19 * R27;
            auto R29 = R8 + R28;
            auto R30 = R29[ 0 ];
            SimdVec<TF,1> R31{ R30 };
            auto R32 = py_0[ 0 ];
            SimdVec<TF,2> R33{ R32, R21 };
            auto R34 = R33 - R20;
            auto R35 = R19 * R34;
            auto R36 = R33 + R35;
            auto R37 = R36[ 0 ];
            SimdVec<TF,1> R38{ R37 };
            auto R39 = R29[ 1 ];
            SimdVec<TF,1> R40{ R39 };
            auto R41 = R36[ 1 ];
            SimdVec<TF,1> R42{ R41 };
            py_0 = R42;
            px_0 = R40;
            py_1 = R38;
            px_1 = R31;
            px_2 = R24;
            py_3 = R22;
            py_2 = R15;
            pi_0 = R9;
            pi_1 = R9;
            px_3 = R6;
            pi_2 = R4;
            pi_3 = R1;
            continue;
        }
        case_50: {
            nodes_size = 4;
            // mod=[3,4],4,5,[5,0], swith_cuts=0
            auto R0 = pi_5[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_4[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = px_5[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = di_4[ 0 ];
            SimdVec<TF,2> R7{ R2, R4 };
            auto R8 = pi_4[ 0 ];
            SimdVec<TC,1> R9{ R8 };
            auto R10 = di_5[ 0 ];
            SimdVec<TF,2> R11{ R6, R10 };
            SimdVec<TC,1> R12{ cut_i[num_cut] };
            auto R13 = di_3[ 0 ];
            auto R14 = di_0[ 0 ];
            SimdVec<TF,2> R15{ R13, R14 };
            auto R16 = R15 - R11;
            auto R17 = R11 / R16;
            auto R18 = py_0[ 0 ];
            auto R19 = py_3[ 0 ];
            SimdVec<TF,2> R20{ R19, R18 };
            auto R21 = py_5[ 0 ];
            SimdVec<TF,1> R22{ R21 };
            auto R23 = px_3[ 0 ];
            auto R24 = py_4[ 0 ];
            SimdVec<TF,1> R25{ R24 };
            auto R26 = px_0[ 0 ];
            SimdVec<TF,2> R27{ R23, R26 };
            auto R28 = R7 - R27;
            auto R29 = R17 * R28;
            auto R30 = R7 + R29;
            auto R31 = R30[ 1 ];
            SimdVec<TF,1> R32{ R31 };
            SimdVec<TF,2> R33{ R24, R21 };
            auto R34 = R33 - R20;
            auto R35 = R17 * R34;
            auto R36 = R33 + R35;
            auto R37 = R36[ 1 ];
            SimdVec<TF,1> R38{ R37 };
            auto R39 = R30[ 0 ];
            SimdVec<TF,1> R40{ R39 };
            auto R41 = R36[ 0 ];
            SimdVec<TF,1> R42{ R41 };
            py_0 = R42;
            px_0 = R40;
            py_3 = R38;
            px_3 = R32;
            py_1 = R25;
            py_2 = R22;
            pi_0 = R12;
            pi_3 = R12;
            pi_1 = R9;
            px_2 = R5;
            px_1 = R3;
            pi_2 = R1;
            continue;
        }
        case_95: {
            nodes_size = 4;
            // mod=[3,4],4,5,[5,6], swith_cuts=0
            auto R0 = pi_5[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_3[ 0 ];
            auto R3 = pi_4[ 0 ];
            SimdVec<TC,1> R4{ R3 };
            auto R5 = px_5[ 0 ];
            SimdVec<TF,1> R6{ R5 };
            auto R7 = di_3[ 0 ];
            SimdVec<TF,2> R8{ R2, R5 };
            SimdVec<TC,1> R9{ cut_i[num_cut] };
            auto R10 = di_5[ 0 ];
            SimdVec<TF,2> R11{ R7, R10 };
            auto R12 = di_4[ 0 ];
            auto R13 = py_6[ 0 ];
            auto R14 = py_4[ 0 ];
            SimdVec<TF,1> R15{ R14 };
            auto R16 = di_6[ 0 ];
            SimdVec<TF,2> R17{ R12, R16 };
            auto R18 = R17 - R11;
            auto R19 = R11 / R18;
            SimdVec<TF,2> R20{ R14, R13 };
            auto R21 = py_5[ 0 ];
            SimdVec<TF,1> R22{ R21 };
            auto R23 = px_4[ 0 ];
            SimdVec<TF,1> R24{ R23 };
            auto R25 = px_6[ 0 ];
            SimdVec<TF,2> R26{ R23, R25 };
            auto R27 = R8 - R26;
            auto R28 = R19 * R27;
            auto R29 = R8 + R28;
            auto R30 = R29[ 1 ];
            SimdVec<TF,1> R31{ R30 };
            auto R32 = py_3[ 0 ];
            SimdVec<TF,2> R33{ R32, R21 };
            auto R34 = R33 - R20;
            auto R35 = R19 * R34;
            auto R36 = R33 + R35;
            auto R37 = R36[ 1 ];
            SimdVec<TF,1> R38{ R37 };
            auto R39 = R29[ 0 ];
            SimdVec<TF,1> R40{ R39 };
            auto R41 = R36[ 0 ];
            SimdVec<TF,1> R42{ R41 };
            py_0 = R42;
            px_0 = R40;
            py_3 = R38;
            px_3 = R31;
            px_1 = R24;
            py_2 = R22;
            py_1 = R15;
            pi_0 = R9;
            pi_3 = R9;
            px_2 = R6;
            pi_1 = R4;
            pi_2 = R1;
            continue;
        }
        case_218: {
            nodes_size = 4;
            // mod=[3,4],4,5,[5,6], swith_cuts=0
            auto R0 = pi_5[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_4[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = px_5[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = di_4[ 0 ];
            SimdVec<TF,2> R7{ R2, R4 };
            auto R8 = pi_4[ 0 ];
            SimdVec<TC,1> R9{ R8 };
            auto R10 = di_5[ 0 ];
            SimdVec<TF,2> R11{ R6, R10 };
            SimdVec<TC,1> R12{ cut_i[num_cut] };
            auto R13 = di_3[ 0 ];
            auto R14 = di_6[ 0 ];
            SimdVec<TF,2> R15{ R13, R14 };
            auto R16 = R15 - R11;
            auto R17 = R11 / R16;
            auto R18 = py_6[ 0 ];
            auto R19 = py_3[ 0 ];
            SimdVec<TF,2> R20{ R19, R18 };
            auto R21 = py_5[ 0 ];
            SimdVec<TF,1> R22{ R21 };
            auto R23 = px_3[ 0 ];
            auto R24 = py_4[ 0 ];
            SimdVec<TF,1> R25{ R24 };
            auto R26 = px_6[ 0 ];
            SimdVec<TF,2> R27{ R23, R26 };
            auto R28 = R7 - R27;
            auto R29 = R17 * R28;
            auto R30 = R7 + R29;
            auto R31 = R30[ 1 ];
            SimdVec<TF,1> R32{ R31 };
            SimdVec<TF,2> R33{ R24, R21 };
            auto R34 = R33 - R20;
            auto R35 = R17 * R34;
            auto R36 = R33 + R35;
            auto R37 = R36[ 1 ];
            SimdVec<TF,1> R38{ R37 };
            auto R39 = R30[ 0 ];
            SimdVec<TF,1> R40{ R39 };
            auto R41 = R36[ 0 ];
            SimdVec<TF,1> R42{ R41 };
            py_0 = R42;
            px_0 = R40;
            py_3 = R38;
            px_3 = R32;
            py_1 = R25;
            py_2 = R22;
            pi_0 = R12;
            pi_3 = R12;
            pi_1 = R9;
            px_2 = R5;
            px_1 = R3;
            pi_2 = R1;
            continue;
        }
        case_151: {
            nodes_size = 4;
            // mod=[3,4],4,5,[5,6], swith_cuts=1
            auto R0 = pi_5[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_6[ 0 ];
            auto R3 = pi_4[ 0 ];
            SimdVec<TC,1> R4{ R3 };
            auto R5 = px_3[ 0 ];
            SimdVec<TF,2> R6{ R2, R5 };
            SimdVec<TC,1> R7{ cut_i[num_cut] };
            auto R8 = di_6[ 0 ];
            auto R9 = di_3[ 0 ];
            SimdVec<TF,2> R10{ R8, R9 };
            auto R11 = py_4[ 0 ];
            SimdVec<TF,1> R12{ R11 };
            auto R13 = di_5[ 0 ];
            auto R14 = py_5[ 0 ];
            SimdVec<TF,1> R15{ R14 };
            auto R16 = di_4[ 0 ];
            SimdVec<TF,2> R17{ R13, R16 };
            auto R18 = R17 - R10;
            auto R19 = R10 / R18;
            SimdVec<TF,2> R20{ R14, R11 };
            auto R21 = py_3[ 0 ];
            auto R22 = py_6[ 0 ];
            SimdVec<TF,2> R23{ R22, R21 };
            auto R24 = R23 - R20;
            auto R25 = R19 * R24;
            auto R26 = R23 + R25;
            auto R27 = R26[ 0 ];
            SimdVec<TF,1> R28{ R27 };
            auto R29 = px_5[ 0 ];
            SimdVec<TF,1> R30{ R29 };
            auto R31 = px_4[ 0 ];
            SimdVec<TF,1> R32{ R31 };
            auto R33 = R26[ 1 ];
            SimdVec<TF,1> R34{ R33 };
            SimdVec<TF,2> R35{ R29, R31 };
            auto R36 = R6 - R35;
            auto R37 = R19 * R36;
            auto R38 = R6 + R37;
            auto R39 = R38[ 0 ];
            SimdVec<TF,1> R40{ R39 };
            auto R41 = R38[ 1 ];
            SimdVec<TF,1> R42{ R41 };
            px_0 = R42;
            px_3 = R40;
            py_0 = R34;
            px_1 = R32;
            px_2 = R30;
            py_3 = R28;
            py_2 = R15;
            py_1 = R12;
            pi_0 = R7;
            pi_3 = R7;
            pi_1 = R4;
            pi_2 = R1;
            continue;
        }
        case_84: {
            nodes_size = 4;
            // mod=[4,5],5,6,[6,0], swith_cuts=0
            auto R0 = pi_6[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_4[ 0 ];
            auto R3 = pi_5[ 0 ];
            SimdVec<TC,1> R4{ R3 };
            auto R5 = px_6[ 0 ];
            SimdVec<TF,1> R6{ R5 };
            auto R7 = di_4[ 0 ];
            SimdVec<TF,2> R8{ R2, R5 };
            SimdVec<TC,1> R9{ cut_i[num_cut] };
            auto R10 = di_6[ 0 ];
            SimdVec<TF,2> R11{ R7, R10 };
            auto R12 = di_5[ 0 ];
            auto R13 = py_0[ 0 ];
            auto R14 = py_5[ 0 ];
            SimdVec<TF,1> R15{ R14 };
            auto R16 = di_0[ 0 ];
            SimdVec<TF,2> R17{ R12, R16 };
            auto R18 = R17 - R11;
            auto R19 = R11 / R18;
            SimdVec<TF,2> R20{ R14, R13 };
            auto R21 = py_6[ 0 ];
            SimdVec<TF,1> R22{ R21 };
            auto R23 = px_5[ 0 ];
            SimdVec<TF,1> R24{ R23 };
            auto R25 = px_0[ 0 ];
            SimdVec<TF,2> R26{ R23, R25 };
            auto R27 = R8 - R26;
            auto R28 = R19 * R27;
            auto R29 = R8 + R28;
            auto R30 = R29[ 1 ];
            SimdVec<TF,1> R31{ R30 };
            auto R32 = py_4[ 0 ];
            SimdVec<TF,2> R33{ R32, R21 };
            auto R34 = R33 - R20;
            auto R35 = R19 * R34;
            auto R36 = R33 + R35;
            auto R37 = R36[ 1 ];
            SimdVec<TF,1> R38{ R37 };
            auto R39 = R29[ 0 ];
            SimdVec<TF,1> R40{ R39 };
            auto R41 = R36[ 0 ];
            SimdVec<TF,1> R42{ R41 };
            py_0 = R42;
            px_0 = R40;
            py_3 = R38;
            px_3 = R31;
            px_1 = R24;
            py_2 = R22;
            py_1 = R15;
            pi_0 = R9;
            pi_3 = R9;
            px_2 = R6;
            pi_1 = R4;
            pi_2 = R1;
            continue;
        }
        case_145: {
            nodes_size = 4;
            // mod=[4,5],5,6,[6,7], swith_cuts=0
            auto R0 = pi_6[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_4[ 0 ];
            auto R3 = pi_5[ 0 ];
            SimdVec<TC,1> R4{ R3 };
            auto R5 = px_6[ 0 ];
            SimdVec<TF,1> R6{ R5 };
            auto R7 = di_4[ 0 ];
            SimdVec<TF,2> R8{ R2, R5 };
            SimdVec<TC,1> R9{ cut_i[num_cut] };
            auto R10 = di_6[ 0 ];
            SimdVec<TF,2> R11{ R7, R10 };
            auto R12 = di_5[ 0 ];
            auto R13 = py_7[ 0 ];
            auto R14 = py_5[ 0 ];
            SimdVec<TF,1> R15{ R14 };
            auto R16 = di_7[ 0 ];
            SimdVec<TF,2> R17{ R12, R16 };
            auto R18 = R17 - R11;
            auto R19 = R11 / R18;
            SimdVec<TF,2> R20{ R14, R13 };
            auto R21 = py_6[ 0 ];
            SimdVec<TF,1> R22{ R21 };
            auto R23 = px_5[ 0 ];
            SimdVec<TF,1> R24{ R23 };
            auto R25 = px_7[ 0 ];
            SimdVec<TF,2> R26{ R23, R25 };
            auto R27 = R8 - R26;
            auto R28 = R19 * R27;
            auto R29 = R8 + R28;
            auto R30 = R29[ 1 ];
            SimdVec<TF,1> R31{ R30 };
            auto R32 = py_4[ 0 ];
            SimdVec<TF,2> R33{ R32, R21 };
            auto R34 = R33 - R20;
            auto R35 = R19 * R34;
            auto R36 = R33 + R35;
            auto R37 = R36[ 1 ];
            SimdVec<TF,1> R38{ R37 };
            auto R39 = R29[ 0 ];
            SimdVec<TF,1> R40{ R39 };
            auto R41 = R36[ 0 ];
            SimdVec<TF,1> R42{ R41 };
            py_0 = R42;
            px_0 = R40;
            py_3 = R38;
            px_3 = R31;
            px_1 = R24;
            py_2 = R22;
            py_1 = R15;
            pi_0 = R9;
            pi_3 = R9;
            px_2 = R6;
            pi_1 = R4;
            pi_2 = R1;
            continue;
        }
        case_214: {
            nodes_size = 4;
            // mod=[4,5],5,6,[6,7], swith_cuts=1
            auto R0 = pi_6[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_6[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = px_4[ 0 ];
            SimdVec<TF,2> R5{ R2, R4 };
            auto R6 = pi_5[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = di_6[ 0 ];
            SimdVec<TC,1> R9{ cut_i[num_cut] };
            auto R10 = di_4[ 0 ];
            SimdVec<TF,2> R11{ R8, R10 };
            auto R12 = di_7[ 0 ];
            auto R13 = py_5[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = di_5[ 0 ];
            SimdVec<TF,2> R16{ R12, R15 };
            auto R17 = R16 - R11;
            auto R18 = R11 / R17;
            auto R19 = py_7[ 0 ];
            SimdVec<TF,2> R20{ R19, R13 };
            auto R21 = py_4[ 0 ];
            auto R22 = py_6[ 0 ];
            SimdVec<TF,1> R23{ R22 };
            auto R24 = px_7[ 0 ];
            SimdVec<TF,2> R25{ R22, R21 };
            auto R26 = R25 - R20;
            auto R27 = R18 * R26;
            auto R28 = R25 + R27;
            auto R29 = R28[ 0 ];
            SimdVec<TF,1> R30{ R29 };
            auto R31 = px_5[ 0 ];
            SimdVec<TF,1> R32{ R31 };
            auto R33 = R28[ 1 ];
            SimdVec<TF,1> R34{ R33 };
            SimdVec<TF,2> R35{ R24, R31 };
            auto R36 = R5 - R35;
            auto R37 = R18 * R36;
            auto R38 = R5 + R37;
            auto R39 = R38[ 0 ];
            SimdVec<TF,1> R40{ R39 };
            auto R41 = R38[ 1 ];
            SimdVec<TF,1> R42{ R41 };
            px_0 = R42;
            px_3 = R40;
            py_0 = R34;
            px_1 = R32;
            py_3 = R30;
            py_2 = R23;
            py_1 = R14;
            pi_0 = R9;
            pi_3 = R9;
            pi_1 = R7;
            px_2 = R3;
            pi_2 = R1;
            continue;
        }
        case_132: {
            nodes_size = 4;
            // mod=[5,6],6,7,[7,0], swith_cuts=1
            auto R0 = pi_7[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_7[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = px_5[ 0 ];
            SimdVec<TF,2> R5{ R2, R4 };
            auto R6 = pi_6[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = di_7[ 0 ];
            SimdVec<TC,1> R9{ cut_i[num_cut] };
            auto R10 = di_5[ 0 ];
            SimdVec<TF,2> R11{ R8, R10 };
            auto R12 = di_0[ 0 ];
            auto R13 = py_6[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = di_6[ 0 ];
            SimdVec<TF,2> R16{ R12, R15 };
            auto R17 = R16 - R11;
            auto R18 = R11 / R17;
            auto R19 = py_0[ 0 ];
            SimdVec<TF,2> R20{ R19, R13 };
            auto R21 = py_5[ 0 ];
            auto R22 = py_7[ 0 ];
            SimdVec<TF,1> R23{ R22 };
            auto R24 = px_0[ 0 ];
            SimdVec<TF,2> R25{ R22, R21 };
            auto R26 = R25 - R20;
            auto R27 = R18 * R26;
            auto R28 = R25 + R27;
            auto R29 = R28[ 0 ];
            SimdVec<TF,1> R30{ R29 };
            auto R31 = px_6[ 0 ];
            SimdVec<TF,1> R32{ R31 };
            auto R33 = R28[ 1 ];
            SimdVec<TF,1> R34{ R33 };
            SimdVec<TF,2> R35{ R24, R31 };
            auto R36 = R5 - R35;
            auto R37 = R18 * R36;
            auto R38 = R5 + R37;
            auto R39 = R38[ 0 ];
            SimdVec<TF,1> R40{ R39 };
            auto R41 = R38[ 1 ];
            SimdVec<TF,1> R42{ R41 };
            px_0 = R42;
            px_3 = R40;
            py_0 = R34;
            px_1 = R32;
            py_3 = R30;
            py_2 = R23;
            py_1 = R14;
            pi_0 = R9;
            pi_3 = R9;
            pi_1 = R7;
            px_2 = R3;
            pi_2 = R1;
            continue;
        }
        case_207: {
            nodes_size = 4;
            // mod=[5,6],6,7,[7,8], swith_cuts=1
            auto R0 = pi_7[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_7[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = px_5[ 0 ];
            SimdVec<TF,2> R5{ R2, R4 };
            auto R6 = pi_6[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = di_7[ 0 ];
            SimdVec<TC,1> R9{ cut_i[num_cut] };
            auto R10 = di_5[ 0 ];
            SimdVec<TF,2> R11{ R8, R10 };
            auto R12 = di_8[ 0 ];
            auto R13 = py_6[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = di_6[ 0 ];
            SimdVec<TF,2> R16{ R12, R15 };
            auto R17 = R16 - R11;
            auto R18 = R11 / R17;
            auto R19 = py_8[ 0 ];
            SimdVec<TF,2> R20{ R19, R13 };
            auto R21 = py_5[ 0 ];
            auto R22 = py_7[ 0 ];
            SimdVec<TF,1> R23{ R22 };
            auto R24 = px_8[ 0 ];
            SimdVec<TF,2> R25{ R22, R21 };
            auto R26 = R25 - R20;
            auto R27 = R18 * R26;
            auto R28 = R25 + R27;
            auto R29 = R28[ 0 ];
            SimdVec<TF,1> R30{ R29 };
            auto R31 = px_6[ 0 ];
            SimdVec<TF,1> R32{ R31 };
            auto R33 = R28[ 1 ];
            SimdVec<TF,1> R34{ R33 };
            SimdVec<TF,2> R35{ R24, R31 };
            auto R36 = R5 - R35;
            auto R37 = R18 * R36;
            auto R38 = R5 + R37;
            auto R39 = R38[ 0 ];
            SimdVec<TF,1> R40{ R39 };
            auto R41 = R38[ 1 ];
            SimdVec<TF,1> R42{ R41 };
            px_0 = R42;
            px_3 = R40;
            py_0 = R34;
            px_1 = R32;
            py_3 = R30;
            py_2 = R23;
            py_1 = R14;
            pi_0 = R9;
            pi_3 = R9;
            pi_1 = R7;
            px_2 = R3;
            pi_2 = R1;
            continue;
        }
        case_15: {
            nodes_size = 5;
            // mod=0,1,2,[2,3],[3,0], swith_cuts=1
            SimdVec<TC,1> R0{ cut_i[num_cut] };
            auto R1 = px_0[ 0 ];
            SimdVec<TF,1> R2{ R1 };
            auto R3 = py_0[ 0 ];
            SimdVec<TF,1> R4{ R3 };
            auto R5 = pi_0[ 0 ];
            SimdVec<TC,1> R6{ R5 };
            auto R7 = px_1[ 0 ];
            SimdVec<TF,1> R8{ R7 };
            auto R9 = py_1[ 0 ];
            SimdVec<TF,1> R10{ R9 };
            auto R11 = pi_1[ 0 ];
            SimdVec<TC,1> R12{ R11 };
            auto R13 = px_2[ 0 ];
            SimdVec<TF,2> R14{ R1, R13 };
            SimdVec<TF,1> R15{ R13 };
            auto R16 = py_2[ 0 ];
            SimdVec<TF,2> R17{ R3, R16 };
            SimdVec<TF,1> R18{ R16 };
            auto R19 = pi_2[ 0 ];
            SimdVec<TC,1> R20{ R19 };
            auto R21 = px_3[ 0 ];
            SimdVec<TF,2> R22{ R21, R21 };
            auto R23 = R22 - R14;
            auto R24 = di_3[ 0 ];
            SimdVec<TF,2> R25{ R24, R24 };
            auto R26 = py_3[ 0 ];
            SimdVec<TF,2> R27{ R26, R26 };
            auto R28 = R27 - R17;
            auto R29 = di_2[ 0 ];
            auto R30 = di_0[ 0 ];
            SimdVec<TF,2> R31{ R30, R29 };
            auto R32 = R31 - R25;
            auto R33 = R25 / R32;
            auto R34 = R33 * R28;
            auto R35 = R27 + R34;
            auto R36 = R35[ 0 ];
            SimdVec<TF,1> R37{ R36 };
            auto R38 = R33 * R23;
            auto R39 = R22 + R38;
            auto R40 = R39[ 0 ];
            SimdVec<TF,1> R41{ R40 };
            auto R42 = R35[ 1 ];
            SimdVec<TF,1> R43{ R42 };
            auto R44 = R39[ 1 ];
            SimdVec<TF,1> R45{ R44 };
            px_3 = R45;
            py_3 = R43;
            px_4 = R41;
            py_4 = R37;
            pi_3 = R0;
            pi_2 = R20;
            py_2 = R18;
            px_2 = R15;
            pi_1 = R12;
            py_1 = R10;
            px_1 = R8;
            pi_0 = R6;
            py_0 = R4;
            px_0 = R2;
            pi_4 = R0;
            continue;
        }
        case_12: {
            nodes_size = 5;
            // mod=0,1,[1,2],[2,3],3, swith_cuts=0
            auto R0 = pi_3[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_0[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_0[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_0[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_1[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = py_1[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = pi_1[ 0 ];
            SimdVec<TC,1> R13{ R12 };
            auto R14 = px_2[ 0 ];
            SimdVec<TF,2> R15{ R8, R14 };
            SimdVec<TC,1> R16{ cut_i[num_cut] };
            auto R17 = di_1[ 0 ];
            auto R18 = di_2[ 0 ];
            SimdVec<TF,2> R19{ R17, R18 };
            auto R20 = py_3[ 0 ];
            SimdVec<TF,1> R21{ R20 };
            auto R22 = di_3[ 0 ];
            SimdVec<TF,2> R23{ R18, R22 };
            auto R24 = R23 - R19;
            auto R25 = R19 / R24;
            auto R26 = py_2[ 0 ];
            SimdVec<TF,2> R27{ R26, R20 };
            SimdVec<TF,2> R28{ R10, R26 };
            auto R29 = R28 - R27;
            auto R30 = R25 * R29;
            auto R31 = R28 + R30;
            auto R32 = R31[ 1 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = px_3[ 0 ];
            SimdVec<TF,1> R35{ R34 };
            auto R36 = R31[ 0 ];
            SimdVec<TF,1> R37{ R36 };
            SimdVec<TF,2> R38{ R14, R34 };
            auto R39 = R15 - R38;
            auto R40 = R25 * R39;
            auto R41 = R15 + R40;
            auto R42 = R41[ 1 ];
            SimdVec<TF,1> R43{ R42 };
            auto R44 = R41[ 0 ];
            SimdVec<TF,1> R45{ R44 };
            px_2 = R45;
            px_3 = R43;
            py_2 = R37;
            px_4 = R35;
            py_3 = R33;
            py_4 = R21;
            pi_2 = R16;
            pi_3 = R16;
            pi_1 = R13;
            py_1 = R11;
            px_1 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_4 = R1;
            continue;
        }
        case_53: {
            nodes_size = 5;
            // mod=0,1,[1,2],[4,5],5, swith_cuts=0
            auto R0 = pi_5[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_0[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_0[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_0[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_1[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = py_1[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = pi_1[ 0 ];
            SimdVec<TC,1> R13{ R12 };
            auto R14 = px_4[ 0 ];
            SimdVec<TF,2> R15{ R8, R14 };
            SimdVec<TC,1> R16{ cut_i[num_cut] };
            auto R17 = di_1[ 0 ];
            auto R18 = di_4[ 0 ];
            SimdVec<TF,2> R19{ R17, R18 };
            auto R20 = py_5[ 0 ];
            SimdVec<TF,1> R21{ R20 };
            auto R22 = di_2[ 0 ];
            auto R23 = py_2[ 0 ];
            SimdVec<TF,2> R24{ R23, R20 };
            auto R25 = py_4[ 0 ];
            SimdVec<TF,2> R26{ R10, R25 };
            auto R27 = R26 - R24;
            auto R28 = px_5[ 0 ];
            SimdVec<TF,1> R29{ R28 };
            auto R30 = di_5[ 0 ];
            SimdVec<TF,2> R31{ R22, R30 };
            auto R32 = R31 - R19;
            auto R33 = R19 / R32;
            auto R34 = R33 * R27;
            auto R35 = R26 + R34;
            auto R36 = R35[ 1 ];
            SimdVec<TF,1> R37{ R36 };
            auto R38 = px_2[ 0 ];
            SimdVec<TF,2> R39{ R38, R28 };
            auto R40 = R15 - R39;
            auto R41 = R33 * R40;
            auto R42 = R15 + R41;
            auto R43 = R42[ 1 ];
            SimdVec<TF,1> R44{ R43 };
            auto R45 = R35[ 0 ];
            SimdVec<TF,1> R46{ R45 };
            auto R47 = R42[ 0 ];
            SimdVec<TF,1> R48{ R47 };
            px_2 = R48;
            py_2 = R46;
            px_3 = R44;
            py_3 = R37;
            px_4 = R29;
            py_4 = R21;
            pi_2 = R16;
            pi_3 = R16;
            pi_1 = R13;
            py_1 = R11;
            px_1 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_4 = R1;
            continue;
        }
        case_198: {
            nodes_size = 5;
            // mod=0,1,[1,2],[7,8],8, swith_cuts=0
            auto R0 = pi_8[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_0[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_0[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_0[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_1[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = py_1[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = pi_1[ 0 ];
            SimdVec<TC,1> R13{ R12 };
            auto R14 = px_8[ 0 ];
            SimdVec<TF,1> R15{ R14 };
            auto R16 = di_1[ 0 ];
            SimdVec<TF,2> R17{ R8, R14 };
            SimdVec<TC,1> R18{ cut_i[num_cut] };
            auto R19 = di_8[ 0 ];
            SimdVec<TF,2> R20{ R16, R19 };
            auto R21 = di_2[ 0 ];
            auto R22 = py_7[ 0 ];
            auto R23 = py_2[ 0 ];
            SimdVec<TF,2> R24{ R23, R22 };
            auto R25 = py_8[ 0 ];
            SimdVec<TF,1> R26{ R25 };
            auto R27 = di_7[ 0 ];
            SimdVec<TF,2> R28{ R21, R27 };
            auto R29 = R28 - R20;
            auto R30 = R20 / R29;
            SimdVec<TF,2> R31{ R10, R25 };
            auto R32 = R31 - R24;
            auto R33 = R30 * R32;
            auto R34 = R31 + R33;
            auto R35 = R34[ 1 ];
            SimdVec<TF,1> R36{ R35 };
            auto R37 = px_2[ 0 ];
            auto R38 = R34[ 0 ];
            SimdVec<TF,1> R39{ R38 };
            auto R40 = px_7[ 0 ];
            SimdVec<TF,2> R41{ R37, R40 };
            auto R42 = R17 - R41;
            auto R43 = R30 * R42;
            auto R44 = R17 + R43;
            auto R45 = R44[ 1 ];
            SimdVec<TF,1> R46{ R45 };
            auto R47 = R44[ 0 ];
            SimdVec<TF,1> R48{ R47 };
            px_2 = R48;
            px_3 = R46;
            py_2 = R39;
            py_3 = R36;
            py_4 = R26;
            pi_2 = R18;
            pi_3 = R18;
            px_4 = R15;
            pi_1 = R13;
            py_1 = R11;
            px_1 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_4 = R1;
            continue;
        }
        case_10: {
            nodes_size = 5;
            // mod=0,[0,1],[1,2],2,3, swith_cuts=0
            auto R0 = pi_3[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_0[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_0[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_0[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_1[ 0 ];
            SimdVec<TF,2> R9{ R2, R8 };
            auto R10 = py_3[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = di_0[ 0 ];
            auto R13 = px_3[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = di_1[ 0 ];
            SimdVec<TF,2> R16{ R12, R15 };
            auto R17 = pi_2[ 0 ];
            SimdVec<TC,1> R18{ R17 };
            auto R19 = di_2[ 0 ];
            SimdVec<TF,2> R20{ R15, R19 };
            auto R21 = R20 - R16;
            auto R22 = R16 / R21;
            SimdVec<TC,1> R23{ cut_i[num_cut] };
            auto R24 = px_2[ 0 ];
            SimdVec<TF,1> R25{ R24 };
            auto R26 = py_1[ 0 ];
            SimdVec<TF,2> R27{ R4, R26 };
            SimdVec<TF,2> R28{ R8, R24 };
            auto R29 = R9 - R28;
            auto R30 = R22 * R29;
            auto R31 = R9 + R30;
            auto R32 = R31[ 1 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = py_2[ 0 ];
            SimdVec<TF,1> R35{ R34 };
            auto R36 = R31[ 0 ];
            SimdVec<TF,1> R37{ R36 };
            SimdVec<TF,2> R38{ R26, R34 };
            auto R39 = R27 - R38;
            auto R40 = R22 * R39;
            auto R41 = R27 + R40;
            auto R42 = R41[ 1 ];
            SimdVec<TF,1> R43{ R42 };
            auto R44 = R41[ 0 ];
            SimdVec<TF,1> R45{ R44 };
            py_1 = R45;
            py_2 = R43;
            px_1 = R37;
            py_3 = R35;
            pi_1 = R23;
            px_2 = R33;
            px_3 = R25;
            pi_2 = R23;
            pi_3 = R18;
            px_4 = R14;
            py_4 = R11;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_4 = R1;
            continue;
        }
        case_49: {
            nodes_size = 5;
            // mod=0,[0,1],[3,4],4,5, swith_cuts=1
            auto R0 = pi_5[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_0[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_0[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_0[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_3[ 0 ];
            SimdVec<TF,2> R9{ R8, R2 };
            auto R10 = py_5[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = di_3[ 0 ];
            auto R13 = px_5[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = di_0[ 0 ];
            SimdVec<TF,2> R16{ R12, R15 };
            auto R17 = pi_4[ 0 ];
            SimdVec<TC,1> R18{ R17 };
            auto R19 = di_4[ 0 ];
            SimdVec<TC,1> R20{ cut_i[num_cut] };
            auto R21 = di_1[ 0 ];
            SimdVec<TF,2> R22{ R19, R21 };
            auto R23 = R22 - R16;
            auto R24 = R16 / R23;
            auto R25 = px_4[ 0 ];
            SimdVec<TF,1> R26{ R25 };
            auto R27 = px_1[ 0 ];
            SimdVec<TF,2> R28{ R25, R27 };
            auto R29 = R9 - R28;
            auto R30 = R24 * R29;
            auto R31 = R9 + R30;
            auto R32 = R31[ 0 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = py_3[ 0 ];
            SimdVec<TF,2> R35{ R34, R4 };
            auto R36 = R31[ 1 ];
            SimdVec<TF,1> R37{ R36 };
            auto R38 = py_4[ 0 ];
            SimdVec<TF,1> R39{ R38 };
            auto R40 = py_1[ 0 ];
            SimdVec<TF,2> R41{ R38, R40 };
            auto R42 = R35 - R41;
            auto R43 = R24 * R42;
            auto R44 = R35 + R43;
            auto R45 = R44[ 0 ];
            SimdVec<TF,1> R46{ R45 };
            auto R47 = R44[ 1 ];
            SimdVec<TF,1> R48{ R47 };
            py_1 = R48;
            py_2 = R46;
            py_3 = R39;
            px_1 = R37;
            px_2 = R33;
            px_3 = R26;
            pi_1 = R20;
            pi_2 = R20;
            pi_3 = R18;
            px_4 = R14;
            py_4 = R11;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_4 = R1;
            continue;
        }
        case_83: {
            nodes_size = 5;
            // mod=0,[0,1],[4,5],5,6, swith_cuts=0
            auto R0 = pi_6[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_0[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_0[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_0[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_4[ 0 ];
            SimdVec<TF,2> R9{ R2, R8 };
            auto R10 = py_6[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = di_0[ 0 ];
            auto R13 = px_6[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = di_4[ 0 ];
            SimdVec<TF,2> R16{ R12, R15 };
            auto R17 = pi_5[ 0 ];
            SimdVec<TC,1> R18{ R17 };
            auto R19 = di_1[ 0 ];
            SimdVec<TC,1> R20{ cut_i[num_cut] };
            auto R21 = di_5[ 0 ];
            SimdVec<TF,2> R22{ R19, R21 };
            auto R23 = R22 - R16;
            auto R24 = R16 / R23;
            auto R25 = px_1[ 0 ];
            auto R26 = py_5[ 0 ];
            SimdVec<TF,1> R27{ R26 };
            auto R28 = px_5[ 0 ];
            SimdVec<TF,1> R29{ R28 };
            auto R30 = py_4[ 0 ];
            SimdVec<TF,2> R31{ R4, R30 };
            SimdVec<TF,2> R32{ R25, R28 };
            auto R33 = R9 - R32;
            auto R34 = R24 * R33;
            auto R35 = R9 + R34;
            auto R36 = R35[ 1 ];
            SimdVec<TF,1> R37{ R36 };
            auto R38 = py_1[ 0 ];
            SimdVec<TF,2> R39{ R38, R26 };
            auto R40 = R31 - R39;
            auto R41 = R24 * R40;
            auto R42 = R31 + R41;
            auto R43 = R42[ 1 ];
            SimdVec<TF,1> R44{ R43 };
            auto R45 = R35[ 0 ];
            SimdVec<TF,1> R46{ R45 };
            auto R47 = R42[ 0 ];
            SimdVec<TF,1> R48{ R47 };
            py_1 = R48;
            px_1 = R46;
            py_2 = R44;
            px_2 = R37;
            px_3 = R29;
            py_3 = R27;
            pi_1 = R20;
            pi_2 = R20;
            pi_3 = R18;
            px_4 = R14;
            py_4 = R11;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_4 = R1;
            continue;
        }
        case_131: {
            nodes_size = 5;
            // mod=0,[0,1],[5,6],6,7, swith_cuts=0
            auto R0 = pi_7[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_0[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_0[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_0[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_1[ 0 ];
            auto R9 = py_7[ 0 ];
            SimdVec<TF,1> R10{ R9 };
            auto R11 = px_5[ 0 ];
            SimdVec<TF,2> R12{ R8, R11 };
            auto R13 = px_7[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = di_1[ 0 ];
            auto R16 = pi_6[ 0 ];
            SimdVec<TC,1> R17{ R16 };
            auto R18 = di_5[ 0 ];
            SimdVec<TF,2> R19{ R15, R18 };
            SimdVec<TC,1> R20{ cut_i[num_cut] };
            auto R21 = di_0[ 0 ];
            auto R22 = di_6[ 0 ];
            SimdVec<TF,2> R23{ R21, R22 };
            auto R24 = R23 - R19;
            auto R25 = R19 / R24;
            auto R26 = py_6[ 0 ];
            SimdVec<TF,1> R27{ R26 };
            auto R28 = px_6[ 0 ];
            SimdVec<TF,1> R29{ R28 };
            auto R30 = py_1[ 0 ];
            SimdVec<TF,2> R31{ R2, R28 };
            auto R32 = R12 - R31;
            auto R33 = R25 * R32;
            auto R34 = R12 + R33;
            auto R35 = R34[ 1 ];
            SimdVec<TF,1> R36{ R35 };
            auto R37 = py_5[ 0 ];
            SimdVec<TF,2> R38{ R30, R37 };
            auto R39 = R34[ 0 ];
            SimdVec<TF,1> R40{ R39 };
            SimdVec<TF,2> R41{ R4, R26 };
            auto R42 = R38 - R41;
            auto R43 = R25 * R42;
            auto R44 = R38 + R43;
            auto R45 = R44[ 1 ];
            SimdVec<TF,1> R46{ R45 };
            auto R47 = R44[ 0 ];
            SimdVec<TF,1> R48{ R47 };
            py_1 = R48;
            py_2 = R46;
            px_1 = R40;
            px_2 = R36;
            px_3 = R29;
            py_3 = R27;
            pi_1 = R20;
            pi_2 = R20;
            pi_3 = R17;
            px_4 = R14;
            py_4 = R10;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_4 = R1;
            continue;
        }
        case_62: {
            nodes_size = 5;
            // mod=1,2,3,[3,4],[0,1], swith_cuts=0
            SimdVec<TC,1> R0{ cut_i[num_cut] };
            auto R1 = px_1[ 0 ];
            SimdVec<TF,1> R2{ R1 };
            auto R3 = py_1[ 0 ];
            SimdVec<TF,1> R4{ R3 };
            auto R5 = pi_1[ 0 ];
            SimdVec<TC,1> R6{ R5 };
            auto R7 = px_2[ 0 ];
            SimdVec<TF,1> R8{ R7 };
            auto R9 = py_2[ 0 ];
            SimdVec<TF,1> R10{ R9 };
            auto R11 = pi_2[ 0 ];
            SimdVec<TC,1> R12{ R11 };
            auto R13 = px_3[ 0 ];
            SimdVec<TF,2> R14{ R13, R1 };
            SimdVec<TF,1> R15{ R13 };
            auto R16 = py_3[ 0 ];
            SimdVec<TF,2> R17{ R16, R3 };
            SimdVec<TF,1> R18{ R16 };
            auto R19 = pi_3[ 0 ];
            SimdVec<TC,1> R20{ R19 };
            auto R21 = di_3[ 0 ];
            auto R22 = di_1[ 0 ];
            SimdVec<TF,2> R23{ R21, R22 };
            auto R24 = py_0[ 0 ];
            auto R25 = py_4[ 0 ];
            SimdVec<TF,2> R26{ R25, R24 };
            auto R27 = R17 - R26;
            auto R28 = px_0[ 0 ];
            auto R29 = px_4[ 0 ];
            SimdVec<TF,2> R30{ R29, R28 };
            auto R31 = R14 - R30;
            auto R32 = di_0[ 0 ];
            auto R33 = di_4[ 0 ];
            SimdVec<TF,2> R34{ R33, R32 };
            auto R35 = R34 - R23;
            auto R36 = R23 / R35;
            auto R37 = R36 * R27;
            auto R38 = R17 + R37;
            auto R39 = R38[ 1 ];
            SimdVec<TF,1> R40{ R39 };
            auto R41 = R36 * R31;
            auto R42 = R14 + R41;
            auto R43 = R42[ 1 ];
            SimdVec<TF,1> R44{ R43 };
            auto R45 = R38[ 0 ];
            SimdVec<TF,1> R46{ R45 };
            auto R47 = R42[ 0 ];
            SimdVec<TF,1> R48{ R47 };
            px_3 = R48;
            py_3 = R46;
            px_4 = R44;
            py_4 = R40;
            pi_3 = R0;
            pi_2 = R20;
            py_2 = R18;
            px_2 = R15;
            pi_1 = R12;
            py_1 = R10;
            px_1 = R8;
            pi_0 = R6;
            py_0 = R4;
            px_0 = R2;
            pi_4 = R0;
            continue;
        }
        case_158: {
            nodes_size = 5;
            // mod=1,2,3,[3,4],[0,1], swith_cuts=1
            SimdVec<TC,1> R0{ cut_i[num_cut] };
            auto R1 = px_1[ 0 ];
            SimdVec<TF,1> R2{ R1 };
            auto R3 = py_1[ 0 ];
            SimdVec<TF,1> R4{ R3 };
            auto R5 = pi_1[ 0 ];
            SimdVec<TC,1> R6{ R5 };
            auto R7 = px_2[ 0 ];
            SimdVec<TF,1> R8{ R7 };
            auto R9 = py_2[ 0 ];
            SimdVec<TF,1> R10{ R9 };
            auto R11 = pi_2[ 0 ];
            SimdVec<TC,1> R12{ R11 };
            auto R13 = px_3[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = py_3[ 0 ];
            SimdVec<TF,1> R16{ R15 };
            auto R17 = pi_3[ 0 ];
            SimdVec<TC,1> R18{ R17 };
            auto R19 = px_0[ 0 ];
            SimdVec<TF,2> R20{ R19, R13 };
            auto R21 = di_0[ 0 ];
            auto R22 = py_4[ 0 ];
            SimdVec<TF,2> R23{ R3, R22 };
            auto R24 = py_0[ 0 ];
            SimdVec<TF,2> R25{ R24, R15 };
            auto R26 = R25 - R23;
            auto R27 = px_4[ 0 ];
            SimdVec<TF,2> R28{ R1, R27 };
            auto R29 = R20 - R28;
            auto R30 = di_4[ 0 ];
            auto R31 = di_1[ 0 ];
            SimdVec<TF,2> R32{ R31, R30 };
            auto R33 = di_3[ 0 ];
            SimdVec<TF,2> R34{ R21, R33 };
            auto R35 = R32 - R34;
            auto R36 = R34 / R35;
            auto R37 = R36 * R26;
            auto R38 = R25 + R37;
            auto R39 = R38[ 0 ];
            SimdVec<TF,1> R40{ R39 };
            auto R41 = R36 * R29;
            auto R42 = R20 + R41;
            auto R43 = R42[ 0 ];
            SimdVec<TF,1> R44{ R43 };
            auto R45 = R38[ 1 ];
            SimdVec<TF,1> R46{ R45 };
            auto R47 = R42[ 1 ];
            SimdVec<TF,1> R48{ R47 };
            px_3 = R48;
            py_3 = R46;
            px_4 = R44;
            py_4 = R40;
            pi_3 = R0;
            pi_2 = R18;
            py_2 = R16;
            px_2 = R14;
            pi_1 = R12;
            py_1 = R10;
            px_1 = R8;
            pi_0 = R6;
            py_0 = R4;
            px_0 = R2;
            pi_4 = R0;
            continue;
        }
        case_106: {
            nodes_size = 5;
            // mod=1,2,[2,3],[6,0],0, swith_cuts=1
            auto R0 = pi_0[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_1[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_1[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_1[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_2[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = py_2[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = pi_2[ 0 ];
            SimdVec<TC,1> R13{ R12 };
            auto R14 = px_0[ 0 ];
            SimdVec<TF,1> R15{ R14 };
            auto R16 = px_3[ 0 ];
            SimdVec<TF,2> R17{ R14, R16 };
            SimdVec<TC,1> R18{ cut_i[num_cut] };
            auto R19 = di_0[ 0 ];
            auto R20 = di_3[ 0 ];
            SimdVec<TF,2> R21{ R19, R20 };
            auto R22 = py_6[ 0 ];
            SimdVec<TF,2> R23{ R22, R10 };
            auto R24 = py_3[ 0 ];
            auto R25 = py_0[ 0 ];
            SimdVec<TF,1> R26{ R25 };
            auto R27 = di_6[ 0 ];
            SimdVec<TF,2> R28{ R25, R24 };
            auto R29 = R28 - R23;
            auto R30 = px_6[ 0 ];
            SimdVec<TF,2> R31{ R30, R8 };
            auto R32 = R17 - R31;
            auto R33 = di_2[ 0 ];
            SimdVec<TF,2> R34{ R27, R33 };
            auto R35 = R34 - R21;
            auto R36 = R21 / R35;
            auto R37 = R36 * R29;
            auto R38 = R28 + R37;
            auto R39 = R38[ 0 ];
            SimdVec<TF,1> R40{ R39 };
            auto R41 = R36 * R32;
            auto R42 = R17 + R41;
            auto R43 = R42[ 0 ];
            SimdVec<TF,1> R44{ R43 };
            auto R45 = R38[ 1 ];
            SimdVec<TF,1> R46{ R45 };
            auto R47 = R42[ 1 ];
            SimdVec<TF,1> R48{ R47 };
            px_2 = R48;
            py_2 = R46;
            px_3 = R44;
            py_3 = R40;
            py_4 = R26;
            pi_2 = R18;
            pi_3 = R18;
            px_4 = R15;
            pi_1 = R13;
            py_1 = R11;
            px_1 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_4 = R1;
            continue;
        }
        case_88: {
            nodes_size = 5;
            // mod=1,[1,2],[5,6],6,0, swith_cuts=0
            auto R0 = pi_0[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_1[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_1[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_1[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_2[ 0 ];
            auto R9 = py_0[ 0 ];
            SimdVec<TF,1> R10{ R9 };
            auto R11 = px_6[ 0 ];
            SimdVec<TF,1> R12{ R11 };
            auto R13 = di_2[ 0 ];
            SimdVec<TF,2> R14{ R8, R11 };
            auto R15 = px_0[ 0 ];
            SimdVec<TF,1> R16{ R15 };
            auto R17 = di_6[ 0 ];
            SimdVec<TF,2> R18{ R13, R17 };
            auto R19 = pi_6[ 0 ];
            SimdVec<TC,1> R20{ R19 };
            auto R21 = di_1[ 0 ];
            SimdVec<TC,1> R22{ cut_i[num_cut] };
            auto R23 = di_5[ 0 ];
            SimdVec<TF,2> R24{ R21, R23 };
            auto R25 = R24 - R18;
            auto R26 = R18 / R25;
            auto R27 = px_5[ 0 ];
            SimdVec<TF,2> R28{ R2, R27 };
            auto R29 = R14 - R28;
            auto R30 = R26 * R29;
            auto R31 = R14 + R30;
            auto R32 = R31[ 1 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = py_2[ 0 ];
            auto R35 = R31[ 0 ];
            SimdVec<TF,1> R36{ R35 };
            auto R37 = py_6[ 0 ];
            SimdVec<TF,1> R38{ R37 };
            auto R39 = py_5[ 0 ];
            SimdVec<TF,2> R40{ R4, R39 };
            SimdVec<TF,2> R41{ R34, R37 };
            auto R42 = R41 - R40;
            auto R43 = R26 * R42;
            auto R44 = R41 + R43;
            auto R45 = R44[ 1 ];
            SimdVec<TF,1> R46{ R45 };
            auto R47 = R44[ 0 ];
            SimdVec<TF,1> R48{ R47 };
            py_1 = R48;
            py_2 = R46;
            py_3 = R38;
            px_1 = R36;
            px_2 = R33;
            pi_1 = R22;
            pi_2 = R22;
            pi_3 = R20;
            px_4 = R16;
            px_3 = R12;
            py_4 = R10;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_4 = R1;
            continue;
        }
        case_137: {
            nodes_size = 5;
            // mod=1,[1,2],[6,7],7,0, swith_cuts=0
            auto R0 = pi_0[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_1[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_1[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_1[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_7[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = di_1[ 0 ];
            SimdVec<TF,2> R11{ R2, R8 };
            auto R12 = py_0[ 0 ];
            SimdVec<TF,1> R13{ R12 };
            auto R14 = di_7[ 0 ];
            SimdVec<TF,2> R15{ R10, R14 };
            auto R16 = px_0[ 0 ];
            SimdVec<TF,1> R17{ R16 };
            auto R18 = di_2[ 0 ];
            auto R19 = pi_7[ 0 ];
            SimdVec<TC,1> R20{ R19 };
            auto R21 = di_6[ 0 ];
            SimdVec<TF,2> R22{ R18, R21 };
            auto R23 = R22 - R15;
            auto R24 = R15 / R23;
            SimdVec<TC,1> R25{ cut_i[num_cut] };
            auto R26 = px_2[ 0 ];
            auto R27 = px_6[ 0 ];
            SimdVec<TF,2> R28{ R26, R27 };
            auto R29 = R11 - R28;
            auto R30 = R24 * R29;
            auto R31 = R11 + R30;
            auto R32 = R31[ 1 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = py_7[ 0 ];
            SimdVec<TF,1> R35{ R34 };
            auto R36 = py_2[ 0 ];
            SimdVec<TF,2> R37{ R4, R34 };
            auto R38 = R31[ 0 ];
            SimdVec<TF,1> R39{ R38 };
            auto R40 = py_6[ 0 ];
            SimdVec<TF,2> R41{ R36, R40 };
            auto R42 = R37 - R41;
            auto R43 = R24 * R42;
            auto R44 = R37 + R43;
            auto R45 = R44[ 1 ];
            SimdVec<TF,1> R46{ R45 };
            auto R47 = R44[ 0 ];
            SimdVec<TF,1> R48{ R47 };
            py_1 = R48;
            py_2 = R46;
            px_1 = R39;
            py_3 = R35;
            px_2 = R33;
            pi_1 = R25;
            pi_2 = R25;
            pi_3 = R20;
            px_4 = R17;
            py_4 = R13;
            px_3 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_4 = R1;
            continue;
        }
        case_225: {
            nodes_size = 5;
            // mod=2,3,[3,4],[0,1],1, swith_cuts=0
            auto R0 = pi_1[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_2[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_2[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_2[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_3[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = py_3[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = pi_3[ 0 ];
            SimdVec<TC,1> R13{ R12 };
            auto R14 = px_1[ 0 ];
            SimdVec<TF,1> R15{ R14 };
            auto R16 = di_3[ 0 ];
            SimdVec<TF,2> R17{ R8, R14 };
            SimdVec<TC,1> R18{ cut_i[num_cut] };
            auto R19 = di_1[ 0 ];
            SimdVec<TF,2> R20{ R16, R19 };
            auto R21 = di_4[ 0 ];
            auto R22 = py_0[ 0 ];
            auto R23 = py_4[ 0 ];
            SimdVec<TF,2> R24{ R23, R22 };
            auto R25 = py_1[ 0 ];
            SimdVec<TF,1> R26{ R25 };
            auto R27 = di_0[ 0 ];
            SimdVec<TF,2> R28{ R21, R27 };
            auto R29 = R28 - R20;
            auto R30 = R20 / R29;
            SimdVec<TF,2> R31{ R10, R25 };
            auto R32 = R31 - R24;
            auto R33 = R30 * R32;
            auto R34 = R31 + R33;
            auto R35 = R34[ 1 ];
            SimdVec<TF,1> R36{ R35 };
            auto R37 = px_4[ 0 ];
            auto R38 = R34[ 0 ];
            SimdVec<TF,1> R39{ R38 };
            auto R40 = px_0[ 0 ];
            SimdVec<TF,2> R41{ R37, R40 };
            auto R42 = R17 - R41;
            auto R43 = R30 * R42;
            auto R44 = R17 + R43;
            auto R45 = R44[ 1 ];
            SimdVec<TF,1> R46{ R45 };
            auto R47 = R44[ 0 ];
            SimdVec<TF,1> R48{ R47 };
            px_2 = R48;
            px_3 = R46;
            py_2 = R39;
            py_3 = R36;
            py_4 = R26;
            pi_2 = R18;
            pi_3 = R18;
            px_4 = R15;
            pi_1 = R13;
            py_1 = R11;
            px_1 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_4 = R1;
            continue;
        }
        case_228: {
            nodes_size = 5;
            // mod=2,[2,3],[8,0],0,1, swith_cuts=0
            auto R0 = pi_1[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_2[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_2[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_2[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_8[ 0 ];
            SimdVec<TF,2> R9{ R2, R8 };
            auto R10 = py_1[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = di_2[ 0 ];
            auto R13 = px_1[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = di_8[ 0 ];
            SimdVec<TF,2> R16{ R12, R15 };
            auto R17 = pi_0[ 0 ];
            SimdVec<TC,1> R18{ R17 };
            auto R19 = di_3[ 0 ];
            SimdVec<TC,1> R20{ cut_i[num_cut] };
            auto R21 = di_0[ 0 ];
            SimdVec<TF,2> R22{ R19, R21 };
            auto R23 = R22 - R16;
            auto R24 = R16 / R23;
            auto R25 = px_3[ 0 ];
            auto R26 = py_0[ 0 ];
            SimdVec<TF,1> R27{ R26 };
            auto R28 = px_0[ 0 ];
            SimdVec<TF,1> R29{ R28 };
            auto R30 = py_8[ 0 ];
            SimdVec<TF,2> R31{ R4, R30 };
            SimdVec<TF,2> R32{ R25, R28 };
            auto R33 = R9 - R32;
            auto R34 = R24 * R33;
            auto R35 = R9 + R34;
            auto R36 = R35[ 1 ];
            SimdVec<TF,1> R37{ R36 };
            auto R38 = py_3[ 0 ];
            SimdVec<TF,2> R39{ R38, R26 };
            auto R40 = R31 - R39;
            auto R41 = R24 * R40;
            auto R42 = R31 + R41;
            auto R43 = R42[ 1 ];
            SimdVec<TF,1> R44{ R43 };
            auto R45 = R35[ 0 ];
            SimdVec<TF,1> R46{ R45 };
            auto R47 = R42[ 0 ];
            SimdVec<TF,1> R48{ R47 };
            py_1 = R48;
            px_1 = R46;
            py_2 = R44;
            px_2 = R37;
            px_3 = R29;
            py_3 = R27;
            pi_1 = R20;
            pi_2 = R20;
            pi_3 = R18;
            px_4 = R14;
            py_4 = R11;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_4 = R1;
            continue;
        }
        case_94: {
            nodes_size = 5;
            // mod=3,4,5,[5,6],[2,3], swith_cuts=1
            SimdVec<TC,1> R0{ cut_i[num_cut] };
            auto R1 = px_3[ 0 ];
            SimdVec<TF,1> R2{ R1 };
            auto R3 = py_3[ 0 ];
            SimdVec<TF,1> R4{ R3 };
            auto R5 = pi_3[ 0 ];
            SimdVec<TC,1> R6{ R5 };
            auto R7 = px_4[ 0 ];
            SimdVec<TF,1> R8{ R7 };
            auto R9 = py_4[ 0 ];
            SimdVec<TF,1> R10{ R9 };
            auto R11 = pi_4[ 0 ];
            SimdVec<TC,1> R12{ R11 };
            auto R13 = px_5[ 0 ];
            SimdVec<TF,2> R14{ R1, R13 };
            SimdVec<TF,1> R15{ R13 };
            auto R16 = py_5[ 0 ];
            SimdVec<TF,2> R17{ R3, R16 };
            SimdVec<TF,1> R18{ R16 };
            auto R19 = pi_5[ 0 ];
            SimdVec<TC,1> R20{ R19 };
            auto R21 = px_2[ 0 ];
            auto R22 = px_6[ 0 ];
            SimdVec<TF,2> R23{ R21, R22 };
            auto R24 = R23 - R14;
            auto R25 = py_6[ 0 ];
            auto R26 = py_2[ 0 ];
            SimdVec<TF,2> R27{ R26, R25 };
            auto R28 = R27 - R17;
            auto R29 = di_5[ 0 ];
            auto R30 = di_3[ 0 ];
            SimdVec<TF,2> R31{ R30, R29 };
            auto R32 = di_6[ 0 ];
            auto R33 = di_2[ 0 ];
            SimdVec<TF,2> R34{ R33, R32 };
            auto R35 = R31 - R34;
            auto R36 = R34 / R35;
            auto R37 = R36 * R28;
            auto R38 = R27 + R37;
            auto R39 = R38[ 0 ];
            SimdVec<TF,1> R40{ R39 };
            auto R41 = R36 * R24;
            auto R42 = R23 + R41;
            auto R43 = R42[ 0 ];
            SimdVec<TF,1> R44{ R43 };
            auto R45 = R38[ 1 ];
            SimdVec<TF,1> R46{ R45 };
            auto R47 = R42[ 1 ];
            SimdVec<TF,1> R48{ R47 };
            px_3 = R48;
            py_3 = R46;
            px_4 = R44;
            py_4 = R40;
            pi_3 = R0;
            pi_2 = R20;
            py_2 = R18;
            px_2 = R15;
            pi_1 = R12;
            py_1 = R10;
            px_1 = R8;
            pi_0 = R6;
            py_0 = R4;
            px_0 = R2;
            pi_4 = R0;
            continue;
        }
        case_103: {
            nodes_size = 5;
            // mod=3,[3,4],[0,1],1,2, swith_cuts=1
            auto R0 = pi_2[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_3[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_3[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_3[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_0[ 0 ];
            auto R9 = py_2[ 0 ];
            SimdVec<TF,1> R10{ R9 };
            auto R11 = px_4[ 0 ];
            SimdVec<TF,2> R12{ R8, R11 };
            auto R13 = px_2[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = di_0[ 0 ];
            auto R16 = pi_1[ 0 ];
            SimdVec<TC,1> R17{ R16 };
            auto R18 = di_4[ 0 ];
            SimdVec<TF,2> R19{ R15, R18 };
            SimdVec<TC,1> R20{ cut_i[num_cut] };
            auto R21 = di_1[ 0 ];
            auto R22 = di_3[ 0 ];
            SimdVec<TF,2> R23{ R21, R22 };
            auto R24 = R23 - R19;
            auto R25 = R19 / R24;
            auto R26 = py_1[ 0 ];
            SimdVec<TF,1> R27{ R26 };
            auto R28 = px_1[ 0 ];
            SimdVec<TF,1> R29{ R28 };
            auto R30 = py_0[ 0 ];
            SimdVec<TF,2> R31{ R28, R2 };
            auto R32 = R12 - R31;
            auto R33 = R25 * R32;
            auto R34 = R12 + R33;
            auto R35 = R34[ 0 ];
            SimdVec<TF,1> R36{ R35 };
            auto R37 = py_4[ 0 ];
            SimdVec<TF,2> R38{ R30, R37 };
            auto R39 = R34[ 1 ];
            SimdVec<TF,1> R40{ R39 };
            SimdVec<TF,2> R41{ R26, R4 };
            auto R42 = R38 - R41;
            auto R43 = R25 * R42;
            auto R44 = R38 + R43;
            auto R45 = R44[ 0 ];
            SimdVec<TF,1> R46{ R45 };
            auto R47 = R44[ 1 ];
            SimdVec<TF,1> R48{ R47 };
            py_1 = R48;
            py_2 = R46;
            px_1 = R40;
            px_2 = R36;
            px_3 = R29;
            py_3 = R27;
            pi_1 = R20;
            pi_2 = R20;
            pi_3 = R17;
            px_4 = R14;
            py_4 = R10;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_4 = R1;
            continue;
        }
        case_46: {
            nodes_size = 5;
            // mod=4,5,[5,0],[2,3],3, swith_cuts=1
            auto R0 = pi_3[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_4[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_4[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_4[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_5[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = py_5[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = pi_5[ 0 ];
            SimdVec<TC,1> R13{ R12 };
            auto R14 = px_3[ 0 ];
            SimdVec<TF,1> R15{ R14 };
            auto R16 = di_3[ 0 ];
            SimdVec<TF,2> R17{ R14, R8 };
            SimdVec<TC,1> R18{ cut_i[num_cut] };
            auto R19 = di_5[ 0 ];
            SimdVec<TF,2> R20{ R16, R19 };
            auto R21 = di_2[ 0 ];
            auto R22 = py_0[ 0 ];
            auto R23 = py_2[ 0 ];
            SimdVec<TF,2> R24{ R23, R22 };
            auto R25 = py_3[ 0 ];
            SimdVec<TF,1> R26{ R25 };
            auto R27 = di_0[ 0 ];
            SimdVec<TF,2> R28{ R21, R27 };
            auto R29 = R28 - R20;
            auto R30 = R20 / R29;
            SimdVec<TF,2> R31{ R25, R10 };
            auto R32 = R31 - R24;
            auto R33 = R30 * R32;
            auto R34 = R31 + R33;
            auto R35 = R34[ 0 ];
            SimdVec<TF,1> R36{ R35 };
            auto R37 = px_2[ 0 ];
            auto R38 = R34[ 1 ];
            SimdVec<TF,1> R39{ R38 };
            auto R40 = px_0[ 0 ];
            SimdVec<TF,2> R41{ R37, R40 };
            auto R42 = R17 - R41;
            auto R43 = R30 * R42;
            auto R44 = R17 + R43;
            auto R45 = R44[ 0 ];
            SimdVec<TF,1> R46{ R45 };
            auto R47 = R44[ 1 ];
            SimdVec<TF,1> R48{ R47 };
            px_2 = R48;
            px_3 = R46;
            py_2 = R39;
            py_3 = R36;
            py_4 = R26;
            pi_2 = R18;
            pi_3 = R18;
            px_4 = R15;
            pi_1 = R13;
            py_1 = R11;
            px_1 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_4 = R1;
            continue;
        }
        case_9: {
            nodes_size = 5;
            // mod=[0,1],1,2,3,[3,0], swith_cuts=1
            auto R0 = pi_3[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_3[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = px_0[ 0 ];
            SimdVec<TF,2> R5{ R2, R4 };
            auto R6 = pi_2[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = di_3[ 0 ];
            auto R9 = py_2[ 0 ];
            SimdVec<TF,1> R10{ R9 };
            auto R11 = di_0[ 0 ];
            SimdVec<TF,2> R12{ R8, R11 };
            auto R13 = px_2[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = di_1[ 0 ];
            SimdVec<TF,2> R16{ R11, R15 };
            auto R17 = R16 - R12;
            auto R18 = R12 / R17;
            auto R19 = pi_1[ 0 ];
            SimdVec<TC,1> R20{ R19 };
            auto R21 = px_1[ 0 ];
            SimdVec<TF,1> R22{ R21 };
            auto R23 = py_3[ 0 ];
            SimdVec<TF,1> R24{ R23 };
            auto R25 = py_0[ 0 ];
            SimdVec<TF,2> R26{ R23, R25 };
            SimdVec<TF,2> R27{ R4, R21 };
            auto R28 = R5 - R27;
            auto R29 = R18 * R28;
            auto R30 = R5 + R29;
            auto R31 = R30[ 0 ];
            SimdVec<TF,1> R32{ R31 };
            auto R33 = py_1[ 0 ];
            SimdVec<TF,1> R34{ R33 };
            SimdVec<TC,1> R35{ cut_i[num_cut] };
            auto R36 = R30[ 1 ];
            SimdVec<TF,1> R37{ R36 };
            SimdVec<TF,2> R38{ R25, R33 };
            auto R39 = R26 - R38;
            auto R40 = R18 * R39;
            auto R41 = R26 + R40;
            auto R42 = R41[ 0 ];
            SimdVec<TF,1> R43{ R42 };
            auto R44 = R41[ 1 ];
            SimdVec<TF,1> R45{ R44 };
            py_0 = R45;
            py_4 = R43;
            pi_0 = R35;
            px_0 = R37;
            pi_4 = R35;
            py_1 = R34;
            px_4 = R32;
            py_3 = R24;
            px_1 = R22;
            pi_1 = R20;
            px_2 = R14;
            py_2 = R10;
            pi_2 = R7;
            px_3 = R3;
            pi_3 = R1;
            continue;
        }
        case_154: {
            nodes_size = 5;
            // mod=[1,2],2,3,4,[4,5], swith_cuts=0
            auto R0 = pi_4[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_1[ 0 ];
            auto R3 = pi_3[ 0 ];
            SimdVec<TC,1> R4{ R3 };
            auto R5 = px_4[ 0 ];
            SimdVec<TF,1> R6{ R5 };
            auto R7 = di_1[ 0 ];
            SimdVec<TF,2> R8{ R2, R5 };
            auto R9 = py_3[ 0 ];
            SimdVec<TF,1> R10{ R9 };
            auto R11 = di_4[ 0 ];
            SimdVec<TF,2> R12{ R7, R11 };
            auto R13 = px_3[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = di_2[ 0 ];
            auto R16 = pi_2[ 0 ];
            SimdVec<TC,1> R17{ R16 };
            auto R18 = di_5[ 0 ];
            SimdVec<TF,2> R19{ R15, R18 };
            auto R20 = R19 - R12;
            auto R21 = R12 / R20;
            SimdVec<TC,1> R22{ cut_i[num_cut] };
            auto R23 = px_2[ 0 ];
            SimdVec<TF,1> R24{ R23 };
            auto R25 = px_5[ 0 ];
            SimdVec<TF,2> R26{ R23, R25 };
            auto R27 = R8 - R26;
            auto R28 = R21 * R27;
            auto R29 = R8 + R28;
            auto R30 = R29[ 1 ];
            SimdVec<TF,1> R31{ R30 };
            auto R32 = py_1[ 0 ];
            auto R33 = R29[ 0 ];
            SimdVec<TF,1> R34{ R33 };
            auto R35 = py_4[ 0 ];
            SimdVec<TF,1> R36{ R35 };
            auto R37 = py_2[ 0 ];
            SimdVec<TF,1> R38{ R37 };
            auto R39 = py_5[ 0 ];
            SimdVec<TF,2> R40{ R37, R39 };
            SimdVec<TF,2> R41{ R32, R35 };
            auto R42 = R41 - R40;
            auto R43 = R21 * R42;
            auto R44 = R41 + R43;
            auto R45 = R44[ 1 ];
            SimdVec<TF,1> R46{ R45 };
            auto R47 = R44[ 0 ];
            SimdVec<TF,1> R48{ R47 };
            py_0 = R48;
            py_4 = R46;
            pi_0 = R22;
            py_1 = R38;
            py_3 = R36;
            px_0 = R34;
            px_4 = R31;
            px_1 = R24;
            pi_4 = R22;
            pi_1 = R17;
            px_2 = R14;
            py_2 = R10;
            px_3 = R6;
            pi_2 = R4;
            pi_3 = R1;
            continue;
        }
        case_99: {
            nodes_size = 5;
            // mod=[1,2],2,3,4,[4,5], swith_cuts=0
            auto R0 = pi_4[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_2[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = px_5[ 0 ];
            SimdVec<TF,2> R5{ R2, R4 };
            auto R6 = pi_3[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = di_2[ 0 ];
            auto R9 = py_3[ 0 ];
            SimdVec<TF,1> R10{ R9 };
            auto R11 = di_5[ 0 ];
            SimdVec<TF,2> R12{ R8, R11 };
            auto R13 = px_3[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = di_1[ 0 ];
            auto R16 = pi_2[ 0 ];
            SimdVec<TC,1> R17{ R16 };
            auto R18 = di_4[ 0 ];
            SimdVec<TF,2> R19{ R15, R18 };
            auto R20 = R19 - R12;
            auto R21 = R12 / R20;
            SimdVec<TC,1> R22{ cut_i[num_cut] };
            auto R23 = px_1[ 0 ];
            auto R24 = px_4[ 0 ];
            SimdVec<TF,1> R25{ R24 };
            auto R26 = py_2[ 0 ];
            SimdVec<TF,1> R27{ R26 };
            auto R28 = py_5[ 0 ];
            SimdVec<TF,2> R29{ R26, R28 };
            SimdVec<TF,2> R30{ R23, R24 };
            auto R31 = R5 - R30;
            auto R32 = R21 * R31;
            auto R33 = R5 + R32;
            auto R34 = R33[ 1 ];
            SimdVec<TF,1> R35{ R34 };
            auto R36 = py_1[ 0 ];
            auto R37 = R33[ 0 ];
            SimdVec<TF,1> R38{ R37 };
            auto R39 = py_4[ 0 ];
            SimdVec<TF,1> R40{ R39 };
            SimdVec<TF,2> R41{ R36, R39 };
            auto R42 = R29 - R41;
            auto R43 = R21 * R42;
            auto R44 = R29 + R43;
            auto R45 = R44[ 1 ];
            SimdVec<TF,1> R46{ R45 };
            auto R47 = R44[ 0 ];
            SimdVec<TF,1> R48{ R47 };
            py_0 = R48;
            py_4 = R46;
            py_3 = R40;
            px_0 = R38;
            px_4 = R35;
            py_1 = R27;
            px_3 = R25;
            pi_0 = R22;
            pi_4 = R22;
            pi_1 = R17;
            px_2 = R14;
            py_2 = R10;
            pi_2 = R7;
            px_1 = R3;
            pi_3 = R1;
            continue;
        }
        case_58: {
            nodes_size = 5;
            // mod=[1,2],2,3,4,[4,5], swith_cuts=1
            auto R0 = pi_4[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_4[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = px_2[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = di_4[ 0 ];
            SimdVec<TF,2> R7{ R2, R4 };
            auto R8 = pi_3[ 0 ];
            SimdVec<TC,1> R9{ R8 };
            auto R10 = di_2[ 0 ];
            SimdVec<TF,2> R11{ R6, R10 };
            auto R12 = py_3[ 0 ];
            SimdVec<TF,1> R13{ R12 };
            auto R14 = di_5[ 0 ];
            auto R15 = px_3[ 0 ];
            SimdVec<TF,1> R16{ R15 };
            auto R17 = di_1[ 0 ];
            SimdVec<TF,2> R18{ R14, R17 };
            auto R19 = R18 - R11;
            auto R20 = R11 / R19;
            auto R21 = pi_2[ 0 ];
            SimdVec<TC,1> R22{ R21 };
            auto R23 = px_5[ 0 ];
            SimdVec<TC,1> R24{ cut_i[num_cut] };
            auto R25 = px_1[ 0 ];
            SimdVec<TF,2> R26{ R23, R25 };
            auto R27 = R7 - R26;
            auto R28 = R20 * R27;
            auto R29 = R7 + R28;
            auto R30 = R29[ 0 ];
            SimdVec<TF,1> R31{ R30 };
            auto R32 = py_4[ 0 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = py_2[ 0 ];
            SimdVec<TF,1> R35{ R34 };
            auto R36 = py_5[ 0 ];
            SimdVec<TF,2> R37{ R32, R34 };
            auto R38 = R29[ 1 ];
            SimdVec<TF,1> R39{ R38 };
            auto R40 = py_1[ 0 ];
            SimdVec<TF,2> R41{ R36, R40 };
            auto R42 = R37 - R41;
            auto R43 = R20 * R42;
            auto R44 = R37 + R43;
            auto R45 = R44[ 0 ];
            SimdVec<TF,1> R46{ R45 };
            auto R47 = R44[ 1 ];
            SimdVec<TF,1> R48{ R47 };
            py_0 = R48;
            py_4 = R46;
            pi_0 = R24;
            px_0 = R39;
            py_1 = R35;
            py_3 = R33;
            px_4 = R31;
            pi_4 = R24;
            pi_1 = R22;
            px_2 = R16;
            py_2 = R13;
            pi_2 = R9;
            px_1 = R5;
            px_3 = R3;
            pi_3 = R1;
            continue;
        }
        case_150: {
            nodes_size = 5;
            // mod=[2,3],3,4,5,[5,6], swith_cuts=0
            auto R0 = pi_5[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_2[ 0 ];
            auto R3 = pi_4[ 0 ];
            SimdVec<TC,1> R4{ R3 };
            auto R5 = px_5[ 0 ];
            SimdVec<TF,1> R6{ R5 };
            auto R7 = di_2[ 0 ];
            SimdVec<TF,2> R8{ R2, R5 };
            auto R9 = py_4[ 0 ];
            SimdVec<TF,1> R10{ R9 };
            auto R11 = di_5[ 0 ];
            SimdVec<TF,2> R12{ R7, R11 };
            auto R13 = px_4[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = di_3[ 0 ];
            auto R16 = pi_3[ 0 ];
            SimdVec<TC,1> R17{ R16 };
            auto R18 = di_6[ 0 ];
            SimdVec<TF,2> R19{ R15, R18 };
            auto R20 = R19 - R12;
            auto R21 = R12 / R20;
            SimdVec<TC,1> R22{ cut_i[num_cut] };
            auto R23 = px_3[ 0 ];
            SimdVec<TF,1> R24{ R23 };
            auto R25 = px_6[ 0 ];
            SimdVec<TF,2> R26{ R23, R25 };
            auto R27 = R8 - R26;
            auto R28 = R21 * R27;
            auto R29 = R8 + R28;
            auto R30 = R29[ 1 ];
            SimdVec<TF,1> R31{ R30 };
            auto R32 = py_2[ 0 ];
            auto R33 = R29[ 0 ];
            SimdVec<TF,1> R34{ R33 };
            auto R35 = py_5[ 0 ];
            SimdVec<TF,1> R36{ R35 };
            auto R37 = py_3[ 0 ];
            SimdVec<TF,1> R38{ R37 };
            auto R39 = py_6[ 0 ];
            SimdVec<TF,2> R40{ R37, R39 };
            SimdVec<TF,2> R41{ R32, R35 };
            auto R42 = R41 - R40;
            auto R43 = R21 * R42;
            auto R44 = R41 + R43;
            auto R45 = R44[ 1 ];
            SimdVec<TF,1> R46{ R45 };
            auto R47 = R44[ 0 ];
            SimdVec<TF,1> R48{ R47 };
            py_0 = R48;
            py_4 = R46;
            pi_0 = R22;
            py_1 = R38;
            py_3 = R36;
            px_0 = R34;
            px_4 = R31;
            px_1 = R24;
            pi_4 = R22;
            pi_1 = R17;
            px_2 = R14;
            py_2 = R10;
            px_3 = R6;
            pi_2 = R4;
            pi_3 = R1;
            continue;
        }
        case_79: {
            nodes_size = 5;
            // mod=[3,4],4,5,6,[6,0], swith_cuts=1
            auto R0 = pi_6[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_6[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = px_3[ 0 ];
            SimdVec<TF,2> R5{ R2, R4 };
            auto R6 = pi_5[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = di_6[ 0 ];
            auto R9 = py_5[ 0 ];
            SimdVec<TF,1> R10{ R9 };
            auto R11 = di_3[ 0 ];
            SimdVec<TF,2> R12{ R8, R11 };
            auto R13 = px_5[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = di_0[ 0 ];
            auto R16 = pi_4[ 0 ];
            SimdVec<TC,1> R17{ R16 };
            auto R18 = di_4[ 0 ];
            SimdVec<TF,2> R19{ R15, R18 };
            auto R20 = R19 - R12;
            auto R21 = R12 / R20;
            SimdVec<TC,1> R22{ cut_i[num_cut] };
            auto R23 = px_0[ 0 ];
            auto R24 = px_4[ 0 ];
            SimdVec<TF,1> R25{ R24 };
            auto R26 = py_6[ 0 ];
            SimdVec<TF,1> R27{ R26 };
            auto R28 = py_3[ 0 ];
            SimdVec<TF,2> R29{ R26, R28 };
            SimdVec<TF,2> R30{ R23, R24 };
            auto R31 = R5 - R30;
            auto R32 = R21 * R31;
            auto R33 = R5 + R32;
            auto R34 = R33[ 0 ];
            SimdVec<TF,1> R35{ R34 };
            auto R36 = py_0[ 0 ];
            auto R37 = R33[ 1 ];
            SimdVec<TF,1> R38{ R37 };
            auto R39 = py_4[ 0 ];
            SimdVec<TF,1> R40{ R39 };
            SimdVec<TF,2> R41{ R36, R39 };
            auto R42 = R29 - R41;
            auto R43 = R21 * R42;
            auto R44 = R29 + R43;
            auto R45 = R44[ 0 ];
            SimdVec<TF,1> R46{ R45 };
            auto R47 = R44[ 1 ];
            SimdVec<TF,1> R48{ R47 };
            py_0 = R48;
            py_4 = R46;
            py_1 = R40;
            px_0 = R38;
            px_4 = R35;
            py_3 = R27;
            px_1 = R25;
            pi_0 = R22;
            pi_4 = R22;
            pi_1 = R17;
            px_2 = R14;
            py_2 = R10;
            pi_2 = R7;
            px_3 = R3;
            pi_3 = R1;
            continue;
        }
        case_213: {
            nodes_size = 5;
            // mod=[3,4],4,5,6,[6,7], swith_cuts=1
            auto R0 = pi_6[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_6[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = px_3[ 0 ];
            SimdVec<TF,2> R5{ R2, R4 };
            auto R6 = pi_5[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = di_6[ 0 ];
            auto R9 = py_5[ 0 ];
            SimdVec<TF,1> R10{ R9 };
            auto R11 = di_3[ 0 ];
            SimdVec<TF,2> R12{ R8, R11 };
            auto R13 = px_5[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = di_7[ 0 ];
            auto R16 = pi_4[ 0 ];
            SimdVec<TC,1> R17{ R16 };
            auto R18 = di_4[ 0 ];
            SimdVec<TF,2> R19{ R15, R18 };
            auto R20 = R19 - R12;
            auto R21 = R12 / R20;
            SimdVec<TC,1> R22{ cut_i[num_cut] };
            auto R23 = px_7[ 0 ];
            auto R24 = px_4[ 0 ];
            SimdVec<TF,1> R25{ R24 };
            auto R26 = py_6[ 0 ];
            SimdVec<TF,1> R27{ R26 };
            auto R28 = py_3[ 0 ];
            SimdVec<TF,2> R29{ R26, R28 };
            SimdVec<TF,2> R30{ R23, R24 };
            auto R31 = R5 - R30;
            auto R32 = R21 * R31;
            auto R33 = R5 + R32;
            auto R34 = R33[ 0 ];
            SimdVec<TF,1> R35{ R34 };
            auto R36 = py_7[ 0 ];
            auto R37 = R33[ 1 ];
            SimdVec<TF,1> R38{ R37 };
            auto R39 = py_4[ 0 ];
            SimdVec<TF,1> R40{ R39 };
            SimdVec<TF,2> R41{ R36, R39 };
            auto R42 = R29 - R41;
            auto R43 = R21 * R42;
            auto R44 = R29 + R43;
            auto R45 = R44[ 0 ];
            SimdVec<TF,1> R46{ R45 };
            auto R47 = R44[ 1 ];
            SimdVec<TF,1> R48{ R47 };
            py_0 = R48;
            py_4 = R46;
            py_1 = R40;
            px_0 = R38;
            px_4 = R35;
            py_3 = R27;
            px_1 = R25;
            pi_0 = R22;
            pi_4 = R22;
            pi_1 = R17;
            px_2 = R14;
            py_2 = R10;
            pi_2 = R7;
            px_3 = R3;
            pi_3 = R1;
            continue;
        }
        case_144: {
            nodes_size = 5;
            // mod=[3,4],4,5,6,[6,7], swith_cuts=1
            auto R0 = pi_6[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_7[ 0 ];
            auto R3 = pi_5[ 0 ];
            SimdVec<TC,1> R4{ R3 };
            auto R5 = px_3[ 0 ];
            SimdVec<TF,2> R6{ R2, R5 };
            auto R7 = py_5[ 0 ];
            SimdVec<TF,1> R8{ R7 };
            auto R9 = di_7[ 0 ];
            auto R10 = px_5[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = di_3[ 0 ];
            SimdVec<TF,2> R13{ R9, R12 };
            auto R14 = pi_4[ 0 ];
            SimdVec<TC,1> R15{ R14 };
            auto R16 = di_6[ 0 ];
            SimdVec<TC,1> R17{ cut_i[num_cut] };
            auto R18 = di_4[ 0 ];
            SimdVec<TF,2> R19{ R16, R18 };
            auto R20 = R19 - R13;
            auto R21 = R13 / R20;
            auto R22 = px_6[ 0 ];
            SimdVec<TF,1> R23{ R22 };
            auto R24 = px_4[ 0 ];
            SimdVec<TF,1> R25{ R24 };
            auto R26 = py_7[ 0 ];
            SimdVec<TF,2> R27{ R22, R24 };
            auto R28 = R6 - R27;
            auto R29 = R21 * R28;
            auto R30 = R6 + R29;
            auto R31 = R30[ 0 ];
            SimdVec<TF,1> R32{ R31 };
            auto R33 = py_3[ 0 ];
            SimdVec<TF,2> R34{ R26, R33 };
            auto R35 = R30[ 1 ];
            SimdVec<TF,1> R36{ R35 };
            auto R37 = py_6[ 0 ];
            SimdVec<TF,1> R38{ R37 };
            auto R39 = py_4[ 0 ];
            SimdVec<TF,1> R40{ R39 };
            SimdVec<TF,2> R41{ R37, R39 };
            auto R42 = R34 - R41;
            auto R43 = R21 * R42;
            auto R44 = R34 + R43;
            auto R45 = R44[ 0 ];
            SimdVec<TF,1> R46{ R45 };
            auto R47 = R44[ 1 ];
            SimdVec<TF,1> R48{ R47 };
            py_0 = R48;
            py_4 = R46;
            py_1 = R40;
            py_3 = R38;
            px_0 = R36;
            px_4 = R32;
            px_1 = R25;
            px_3 = R23;
            pi_0 = R17;
            pi_4 = R17;
            pi_1 = R15;
            px_2 = R11;
            py_2 = R8;
            pi_2 = R4;
            pi_3 = R1;
            continue;
        }
        case_126: {
            nodes_size = 5;
            // mod=[4,5],5,6,7,[7,0], swith_cuts=1
            auto R0 = pi_7[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_0[ 0 ];
            auto R3 = pi_6[ 0 ];
            SimdVec<TC,1> R4{ R3 };
            auto R5 = px_4[ 0 ];
            SimdVec<TF,2> R6{ R2, R5 };
            auto R7 = py_6[ 0 ];
            SimdVec<TF,1> R8{ R7 };
            auto R9 = di_0[ 0 ];
            auto R10 = px_6[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = di_4[ 0 ];
            SimdVec<TF,2> R13{ R9, R12 };
            auto R14 = pi_5[ 0 ];
            SimdVec<TC,1> R15{ R14 };
            auto R16 = di_7[ 0 ];
            SimdVec<TC,1> R17{ cut_i[num_cut] };
            auto R18 = di_5[ 0 ];
            SimdVec<TF,2> R19{ R16, R18 };
            auto R20 = R19 - R13;
            auto R21 = R13 / R20;
            auto R22 = px_7[ 0 ];
            SimdVec<TF,1> R23{ R22 };
            auto R24 = px_5[ 0 ];
            SimdVec<TF,1> R25{ R24 };
            auto R26 = py_0[ 0 ];
            SimdVec<TF,2> R27{ R22, R24 };
            auto R28 = R6 - R27;
            auto R29 = R21 * R28;
            auto R30 = R6 + R29;
            auto R31 = R30[ 0 ];
            SimdVec<TF,1> R32{ R31 };
            auto R33 = py_4[ 0 ];
            SimdVec<TF,2> R34{ R26, R33 };
            auto R35 = R30[ 1 ];
            SimdVec<TF,1> R36{ R35 };
            auto R37 = py_7[ 0 ];
            SimdVec<TF,1> R38{ R37 };
            auto R39 = py_5[ 0 ];
            SimdVec<TF,1> R40{ R39 };
            SimdVec<TF,2> R41{ R37, R39 };
            auto R42 = R34 - R41;
            auto R43 = R21 * R42;
            auto R44 = R34 + R43;
            auto R45 = R44[ 0 ];
            SimdVec<TF,1> R46{ R45 };
            auto R47 = R44[ 1 ];
            SimdVec<TF,1> R48{ R47 };
            py_0 = R48;
            py_4 = R46;
            py_1 = R40;
            py_3 = R38;
            px_0 = R36;
            px_4 = R32;
            px_1 = R25;
            px_3 = R23;
            pi_0 = R17;
            pi_4 = R17;
            pi_1 = R15;
            px_2 = R11;
            py_2 = R8;
            pi_2 = R4;
            pi_3 = R1;
            continue;
        }
        case_206: {
            nodes_size = 5;
            // mod=[4,5],5,6,7,[7,8], swith_cuts=0
            auto R0 = pi_7[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_4[ 0 ];
            auto R3 = pi_6[ 0 ];
            SimdVec<TC,1> R4{ R3 };
            auto R5 = px_7[ 0 ];
            SimdVec<TF,1> R6{ R5 };
            auto R7 = di_4[ 0 ];
            SimdVec<TF,2> R8{ R2, R5 };
            auto R9 = py_6[ 0 ];
            SimdVec<TF,1> R10{ R9 };
            auto R11 = di_7[ 0 ];
            SimdVec<TF,2> R12{ R7, R11 };
            auto R13 = px_6[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = di_5[ 0 ];
            auto R16 = pi_5[ 0 ];
            SimdVec<TC,1> R17{ R16 };
            auto R18 = di_8[ 0 ];
            SimdVec<TF,2> R19{ R15, R18 };
            auto R20 = R19 - R12;
            auto R21 = R12 / R20;
            SimdVec<TC,1> R22{ cut_i[num_cut] };
            auto R23 = px_5[ 0 ];
            SimdVec<TF,1> R24{ R23 };
            auto R25 = px_8[ 0 ];
            SimdVec<TF,2> R26{ R23, R25 };
            auto R27 = R8 - R26;
            auto R28 = R21 * R27;
            auto R29 = R8 + R28;
            auto R30 = R29[ 1 ];
            SimdVec<TF,1> R31{ R30 };
            auto R32 = py_4[ 0 ];
            auto R33 = R29[ 0 ];
            SimdVec<TF,1> R34{ R33 };
            auto R35 = py_7[ 0 ];
            SimdVec<TF,1> R36{ R35 };
            auto R37 = py_5[ 0 ];
            SimdVec<TF,1> R38{ R37 };
            auto R39 = py_8[ 0 ];
            SimdVec<TF,2> R40{ R37, R39 };
            SimdVec<TF,2> R41{ R32, R35 };
            auto R42 = R41 - R40;
            auto R43 = R21 * R42;
            auto R44 = R41 + R43;
            auto R45 = R44[ 1 ];
            SimdVec<TF,1> R46{ R45 };
            auto R47 = R44[ 0 ];
            SimdVec<TF,1> R48{ R47 };
            py_0 = R48;
            py_4 = R46;
            pi_0 = R22;
            py_1 = R38;
            py_3 = R36;
            px_0 = R34;
            px_4 = R31;
            px_1 = R24;
            pi_4 = R22;
            pi_1 = R17;
            px_2 = R14;
            py_2 = R10;
            px_3 = R6;
            pi_2 = R4;
            pi_3 = R1;
            continue;
        }
        case_64: {
            nodes_size = 5;
            // mod=[5,0],0,1,2,[2,3], swith_cuts=1
            auto R0 = pi_2[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_3[ 0 ];
            auto R3 = pi_1[ 0 ];
            SimdVec<TC,1> R4{ R3 };
            auto R5 = px_5[ 0 ];
            SimdVec<TF,2> R6{ R2, R5 };
            auto R7 = py_1[ 0 ];
            SimdVec<TF,1> R8{ R7 };
            auto R9 = di_3[ 0 ];
            auto R10 = px_1[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = di_5[ 0 ];
            SimdVec<TF,2> R13{ R9, R12 };
            auto R14 = pi_0[ 0 ];
            SimdVec<TC,1> R15{ R14 };
            auto R16 = di_2[ 0 ];
            SimdVec<TC,1> R17{ cut_i[num_cut] };
            auto R18 = di_0[ 0 ];
            SimdVec<TF,2> R19{ R16, R18 };
            auto R20 = R19 - R13;
            auto R21 = R13 / R20;
            auto R22 = px_2[ 0 ];
            SimdVec<TF,1> R23{ R22 };
            auto R24 = px_0[ 0 ];
            SimdVec<TF,1> R25{ R24 };
            auto R26 = py_3[ 0 ];
            SimdVec<TF,2> R27{ R22, R24 };
            auto R28 = R6 - R27;
            auto R29 = R21 * R28;
            auto R30 = R6 + R29;
            auto R31 = R30[ 0 ];
            SimdVec<TF,1> R32{ R31 };
            auto R33 = py_5[ 0 ];
            SimdVec<TF,2> R34{ R26, R33 };
            auto R35 = R30[ 1 ];
            SimdVec<TF,1> R36{ R35 };
            auto R37 = py_2[ 0 ];
            SimdVec<TF,1> R38{ R37 };
            auto R39 = py_0[ 0 ];
            SimdVec<TF,1> R40{ R39 };
            SimdVec<TF,2> R41{ R37, R39 };
            auto R42 = R34 - R41;
            auto R43 = R21 * R42;
            auto R44 = R34 + R43;
            auto R45 = R44[ 0 ];
            SimdVec<TF,1> R46{ R45 };
            auto R47 = R44[ 1 ];
            SimdVec<TF,1> R48{ R47 };
            py_0 = R48;
            py_4 = R46;
            py_1 = R40;
            py_3 = R38;
            px_0 = R36;
            px_4 = R32;
            px_1 = R25;
            px_3 = R23;
            pi_0 = R17;
            pi_4 = R17;
            pi_1 = R15;
            px_2 = R11;
            py_2 = R8;
            pi_2 = R4;
            pi_3 = R1;
            continue;
        }
        case_185: {
            nodes_size = 5;
            // mod=[5,6],6,7,8,[8,0], swith_cuts=0
            auto R0 = pi_8[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_5[ 0 ];
            auto R3 = pi_7[ 0 ];
            SimdVec<TC,1> R4{ R3 };
            auto R5 = px_8[ 0 ];
            SimdVec<TF,1> R6{ R5 };
            auto R7 = di_5[ 0 ];
            SimdVec<TF,2> R8{ R2, R5 };
            auto R9 = py_7[ 0 ];
            SimdVec<TF,1> R10{ R9 };
            auto R11 = di_8[ 0 ];
            SimdVec<TF,2> R12{ R7, R11 };
            auto R13 = px_7[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = di_6[ 0 ];
            auto R16 = pi_6[ 0 ];
            SimdVec<TC,1> R17{ R16 };
            auto R18 = di_0[ 0 ];
            SimdVec<TF,2> R19{ R15, R18 };
            auto R20 = R19 - R12;
            auto R21 = R12 / R20;
            SimdVec<TC,1> R22{ cut_i[num_cut] };
            auto R23 = px_6[ 0 ];
            SimdVec<TF,1> R24{ R23 };
            auto R25 = px_0[ 0 ];
            SimdVec<TF,2> R26{ R23, R25 };
            auto R27 = R8 - R26;
            auto R28 = R21 * R27;
            auto R29 = R8 + R28;
            auto R30 = R29[ 1 ];
            SimdVec<TF,1> R31{ R30 };
            auto R32 = py_5[ 0 ];
            auto R33 = R29[ 0 ];
            SimdVec<TF,1> R34{ R33 };
            auto R35 = py_8[ 0 ];
            SimdVec<TF,1> R36{ R35 };
            auto R37 = py_6[ 0 ];
            SimdVec<TF,1> R38{ R37 };
            auto R39 = py_0[ 0 ];
            SimdVec<TF,2> R40{ R37, R39 };
            SimdVec<TF,2> R41{ R32, R35 };
            auto R42 = R41 - R40;
            auto R43 = R21 * R42;
            auto R44 = R41 + R43;
            auto R45 = R44[ 1 ];
            SimdVec<TF,1> R46{ R45 };
            auto R47 = R44[ 0 ];
            SimdVec<TF,1> R48{ R47 };
            py_0 = R48;
            py_4 = R46;
            pi_0 = R22;
            py_1 = R38;
            py_3 = R36;
            px_0 = R34;
            px_4 = R31;
            px_1 = R24;
            pi_4 = R22;
            pi_1 = R17;
            px_2 = R14;
            py_2 = R10;
            px_3 = R6;
            pi_2 = R4;
            pi_3 = R1;
            continue;
        }
        case_191: {
            nodes_size = 5;
            // mod=[6,7],7,8,0,[0,1], swith_cuts=0
            auto R0 = pi_0[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_6[ 0 ];
            auto R3 = pi_8[ 0 ];
            SimdVec<TC,1> R4{ R3 };
            auto R5 = px_0[ 0 ];
            SimdVec<TF,1> R6{ R5 };
            auto R7 = di_6[ 0 ];
            SimdVec<TF,2> R8{ R2, R5 };
            auto R9 = py_8[ 0 ];
            SimdVec<TF,1> R10{ R9 };
            auto R11 = di_0[ 0 ];
            SimdVec<TF,2> R12{ R7, R11 };
            auto R13 = px_8[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = di_7[ 0 ];
            auto R16 = pi_7[ 0 ];
            SimdVec<TC,1> R17{ R16 };
            auto R18 = di_1[ 0 ];
            SimdVec<TF,2> R19{ R15, R18 };
            auto R20 = R19 - R12;
            auto R21 = R12 / R20;
            SimdVec<TC,1> R22{ cut_i[num_cut] };
            auto R23 = px_7[ 0 ];
            SimdVec<TF,1> R24{ R23 };
            auto R25 = px_1[ 0 ];
            SimdVec<TF,2> R26{ R23, R25 };
            auto R27 = R8 - R26;
            auto R28 = R21 * R27;
            auto R29 = R8 + R28;
            auto R30 = R29[ 1 ];
            SimdVec<TF,1> R31{ R30 };
            auto R32 = py_6[ 0 ];
            auto R33 = R29[ 0 ];
            SimdVec<TF,1> R34{ R33 };
            auto R35 = py_0[ 0 ];
            SimdVec<TF,1> R36{ R35 };
            auto R37 = py_7[ 0 ];
            SimdVec<TF,1> R38{ R37 };
            auto R39 = py_1[ 0 ];
            SimdVec<TF,2> R40{ R37, R39 };
            SimdVec<TF,2> R41{ R32, R35 };
            auto R42 = R41 - R40;
            auto R43 = R21 * R42;
            auto R44 = R41 + R43;
            auto R45 = R44[ 1 ];
            SimdVec<TF,1> R46{ R45 };
            auto R47 = R44[ 0 ];
            SimdVec<TF,1> R48{ R47 };
            py_0 = R48;
            py_4 = R46;
            pi_0 = R22;
            py_1 = R38;
            py_3 = R36;
            px_0 = R34;
            px_4 = R31;
            px_1 = R24;
            pi_4 = R22;
            pi_1 = R17;
            px_2 = R14;
            py_2 = R10;
            px_3 = R6;
            pi_2 = R4;
            pi_3 = R1;
            continue;
        }
        case_160: {
            nodes_size = 5;
            // mod=[7,0],0,1,2,[2,3], swith_cuts=1
            auto R0 = pi_2[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_2[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = px_7[ 0 ];
            SimdVec<TF,2> R5{ R2, R4 };
            auto R6 = pi_1[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = di_2[ 0 ];
            auto R9 = py_1[ 0 ];
            SimdVec<TF,1> R10{ R9 };
            auto R11 = di_7[ 0 ];
            SimdVec<TF,2> R12{ R8, R11 };
            auto R13 = px_1[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = di_3[ 0 ];
            auto R16 = pi_0[ 0 ];
            SimdVec<TC,1> R17{ R16 };
            auto R18 = di_0[ 0 ];
            SimdVec<TF,2> R19{ R15, R18 };
            auto R20 = R19 - R12;
            auto R21 = R12 / R20;
            SimdVec<TC,1> R22{ cut_i[num_cut] };
            auto R23 = px_3[ 0 ];
            auto R24 = px_0[ 0 ];
            SimdVec<TF,1> R25{ R24 };
            auto R26 = py_2[ 0 ];
            SimdVec<TF,1> R27{ R26 };
            auto R28 = py_7[ 0 ];
            SimdVec<TF,2> R29{ R26, R28 };
            SimdVec<TF,2> R30{ R23, R24 };
            auto R31 = R5 - R30;
            auto R32 = R21 * R31;
            auto R33 = R5 + R32;
            auto R34 = R33[ 0 ];
            SimdVec<TF,1> R35{ R34 };
            auto R36 = py_3[ 0 ];
            auto R37 = R33[ 1 ];
            SimdVec<TF,1> R38{ R37 };
            auto R39 = py_0[ 0 ];
            SimdVec<TF,1> R40{ R39 };
            SimdVec<TF,2> R41{ R36, R39 };
            auto R42 = R29 - R41;
            auto R43 = R21 * R42;
            auto R44 = R29 + R43;
            auto R45 = R44[ 0 ];
            SimdVec<TF,1> R46{ R45 };
            auto R47 = R44[ 1 ];
            SimdVec<TF,1> R48{ R47 };
            py_0 = R48;
            py_4 = R46;
            py_1 = R40;
            px_0 = R38;
            px_4 = R35;
            py_3 = R27;
            px_1 = R25;
            pi_0 = R22;
            pi_4 = R22;
            pi_1 = R17;
            px_2 = R14;
            py_2 = R10;
            pi_2 = R7;
            px_3 = R3;
            pi_3 = R1;
            continue;
        }
        case_87: {
            nodes_size = 6;
            // mod=0,1,2,[2,3],[5,6],6, swith_cuts=0
            auto R0 = pi_6[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_0[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_0[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_0[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_1[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = py_1[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = pi_1[ 0 ];
            SimdVec<TC,1> R13{ R12 };
            auto R14 = px_2[ 0 ];
            SimdVec<TF,1> R15{ R14 };
            auto R16 = py_2[ 0 ];
            SimdVec<TF,1> R17{ R16 };
            auto R18 = pi_2[ 0 ];
            SimdVec<TC,1> R19{ R18 };
            auto R20 = px_5[ 0 ];
            SimdVec<TF,2> R21{ R14, R20 };
            SimdVec<TC,1> R22{ cut_i[num_cut] };
            auto R23 = di_2[ 0 ];
            auto R24 = di_5[ 0 ];
            SimdVec<TF,2> R25{ R23, R24 };
            auto R26 = py_6[ 0 ];
            SimdVec<TF,1> R27{ R26 };
            auto R28 = di_3[ 0 ];
            auto R29 = py_3[ 0 ];
            SimdVec<TF,2> R30{ R29, R26 };
            auto R31 = py_5[ 0 ];
            SimdVec<TF,2> R32{ R16, R31 };
            auto R33 = R32 - R30;
            auto R34 = px_6[ 0 ];
            SimdVec<TF,1> R35{ R34 };
            auto R36 = di_6[ 0 ];
            SimdVec<TF,2> R37{ R28, R36 };
            auto R38 = R37 - R25;
            auto R39 = R25 / R38;
            auto R40 = R39 * R33;
            auto R41 = R32 + R40;
            auto R42 = R41[ 1 ];
            SimdVec<TF,1> R43{ R42 };
            auto R44 = px_3[ 0 ];
            SimdVec<TF,2> R45{ R44, R34 };
            auto R46 = R21 - R45;
            auto R47 = R39 * R46;
            auto R48 = R21 + R47;
            auto R49 = R48[ 1 ];
            SimdVec<TF,1> R50{ R49 };
            auto R51 = R41[ 0 ];
            SimdVec<TF,1> R52{ R51 };
            auto R53 = R48[ 0 ];
            SimdVec<TF,1> R54{ R53 };
            px_3 = R54;
            py_3 = R52;
            px_4 = R50;
            py_4 = R43;
            px_5 = R35;
            py_5 = R27;
            pi_3 = R22;
            pi_4 = R22;
            pi_2 = R19;
            py_2 = R17;
            px_2 = R15;
            pi_1 = R13;
            py_1 = R11;
            px_1 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_5 = R1;
            continue;
        }
        case_197: {
            nodes_size = 6;
            // mod=0,1,2,[2,3],[7,8],8, swith_cuts=0
            auto R0 = pi_8[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_0[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_0[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_0[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_1[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = py_1[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = pi_1[ 0 ];
            SimdVec<TC,1> R13{ R12 };
            auto R14 = px_2[ 0 ];
            SimdVec<TF,1> R15{ R14 };
            auto R16 = py_2[ 0 ];
            SimdVec<TF,1> R17{ R16 };
            auto R18 = pi_2[ 0 ];
            SimdVec<TC,1> R19{ R18 };
            auto R20 = px_3[ 0 ];
            SimdVec<TC,1> R21{ cut_i[num_cut] };
            auto R22 = px_8[ 0 ];
            SimdVec<TF,1> R23{ R22 };
            auto R24 = di_3[ 0 ];
            SimdVec<TF,2> R25{ R20, R22 };
            auto R26 = di_8[ 0 ];
            SimdVec<TF,2> R27{ R24, R26 };
            auto R28 = py_7[ 0 ];
            SimdVec<TF,2> R29{ R16, R28 };
            auto R30 = py_8[ 0 ];
            SimdVec<TF,1> R31{ R30 };
            auto R32 = di_2[ 0 ];
            auto R33 = py_3[ 0 ];
            SimdVec<TF,2> R34{ R33, R30 };
            auto R35 = R34 - R29;
            auto R36 = px_7[ 0 ];
            SimdVec<TF,2> R37{ R14, R36 };
            auto R38 = R25 - R37;
            auto R39 = di_7[ 0 ];
            SimdVec<TF,2> R40{ R32, R39 };
            auto R41 = R40 - R27;
            auto R42 = R27 / R41;
            auto R43 = R42 * R35;
            auto R44 = R34 + R43;
            auto R45 = R44[ 1 ];
            SimdVec<TF,1> R46{ R45 };
            auto R47 = R42 * R38;
            auto R48 = R25 + R47;
            auto R49 = R48[ 1 ];
            SimdVec<TF,1> R50{ R49 };
            auto R51 = R44[ 0 ];
            SimdVec<TF,1> R52{ R51 };
            auto R53 = R48[ 0 ];
            SimdVec<TF,1> R54{ R53 };
            px_3 = R54;
            py_3 = R52;
            px_4 = R50;
            py_4 = R46;
            py_5 = R31;
            pi_3 = R21;
            px_5 = R23;
            pi_4 = R21;
            pi_2 = R19;
            py_2 = R17;
            px_2 = R15;
            pi_1 = R13;
            py_1 = R11;
            px_1 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_5 = R1;
            continue;
        }
        case_82: {
            nodes_size = 6;
            // mod=0,1,[1,2],[4,5],5,6, swith_cuts=0
            auto R0 = pi_6[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_0[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_0[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_0[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_1[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = py_1[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = pi_1[ 0 ];
            SimdVec<TC,1> R13{ R12 };
            auto R14 = px_5[ 0 ];
            SimdVec<TF,1> R15{ R14 };
            auto R16 = di_1[ 0 ];
            SimdVec<TF,2> R17{ R8, R14 };
            auto R18 = py_6[ 0 ];
            SimdVec<TF,1> R19{ R18 };
            auto R20 = di_5[ 0 ];
            SimdVec<TF,2> R21{ R16, R20 };
            auto R22 = px_6[ 0 ];
            SimdVec<TF,1> R23{ R22 };
            auto R24 = di_2[ 0 ];
            auto R25 = pi_5[ 0 ];
            SimdVec<TC,1> R26{ R25 };
            auto R27 = di_4[ 0 ];
            SimdVec<TF,2> R28{ R24, R27 };
            auto R29 = R28 - R21;
            auto R30 = R21 / R29;
            SimdVec<TC,1> R31{ cut_i[num_cut] };
            auto R32 = px_2[ 0 ];
            auto R33 = px_4[ 0 ];
            SimdVec<TF,2> R34{ R32, R33 };
            auto R35 = R17 - R34;
            auto R36 = R30 * R35;
            auto R37 = R17 + R36;
            auto R38 = R37[ 1 ];
            SimdVec<TF,1> R39{ R38 };
            auto R40 = py_5[ 0 ];
            SimdVec<TF,1> R41{ R40 };
            auto R42 = py_2[ 0 ];
            SimdVec<TF,2> R43{ R10, R40 };
            auto R44 = R37[ 0 ];
            SimdVec<TF,1> R45{ R44 };
            auto R46 = py_4[ 0 ];
            SimdVec<TF,2> R47{ R42, R46 };
            auto R48 = R43 - R47;
            auto R49 = R30 * R48;
            auto R50 = R43 + R49;
            auto R51 = R50[ 1 ];
            SimdVec<TF,1> R52{ R51 };
            auto R53 = R50[ 0 ];
            SimdVec<TF,1> R54{ R53 };
            py_2 = R54;
            py_3 = R52;
            px_2 = R45;
            py_4 = R41;
            px_3 = R39;
            pi_2 = R31;
            pi_3 = R31;
            pi_4 = R26;
            px_5 = R23;
            py_5 = R19;
            px_4 = R15;
            pi_1 = R13;
            py_1 = R11;
            px_1 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_5 = R1;
            continue;
        }
        case_130: {
            nodes_size = 6;
            // mod=0,1,[1,2],[5,6],6,7, swith_cuts=0
            auto R0 = pi_7[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_0[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_0[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_0[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_1[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = py_1[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = pi_1[ 0 ];
            SimdVec<TC,1> R13{ R12 };
            auto R14 = px_6[ 0 ];
            SimdVec<TF,1> R15{ R14 };
            auto R16 = di_1[ 0 ];
            SimdVec<TF,2> R17{ R8, R14 };
            auto R18 = py_7[ 0 ];
            SimdVec<TF,1> R19{ R18 };
            auto R20 = di_6[ 0 ];
            SimdVec<TF,2> R21{ R16, R20 };
            auto R22 = px_7[ 0 ];
            SimdVec<TF,1> R23{ R22 };
            auto R24 = di_2[ 0 ];
            auto R25 = pi_6[ 0 ];
            SimdVec<TC,1> R26{ R25 };
            auto R27 = di_5[ 0 ];
            SimdVec<TF,2> R28{ R24, R27 };
            auto R29 = R28 - R21;
            auto R30 = R21 / R29;
            SimdVec<TC,1> R31{ cut_i[num_cut] };
            auto R32 = px_2[ 0 ];
            auto R33 = px_5[ 0 ];
            SimdVec<TF,2> R34{ R32, R33 };
            auto R35 = R17 - R34;
            auto R36 = R30 * R35;
            auto R37 = R17 + R36;
            auto R38 = R37[ 1 ];
            SimdVec<TF,1> R39{ R38 };
            auto R40 = py_6[ 0 ];
            SimdVec<TF,1> R41{ R40 };
            auto R42 = py_2[ 0 ];
            SimdVec<TF,2> R43{ R10, R40 };
            auto R44 = R37[ 0 ];
            SimdVec<TF,1> R45{ R44 };
            auto R46 = py_5[ 0 ];
            SimdVec<TF,2> R47{ R42, R46 };
            auto R48 = R43 - R47;
            auto R49 = R30 * R48;
            auto R50 = R43 + R49;
            auto R51 = R50[ 1 ];
            SimdVec<TF,1> R52{ R51 };
            auto R53 = R50[ 0 ];
            SimdVec<TF,1> R54{ R53 };
            py_2 = R54;
            py_3 = R52;
            px_2 = R45;
            py_4 = R41;
            px_3 = R39;
            pi_2 = R31;
            pi_3 = R31;
            pi_4 = R26;
            px_5 = R23;
            py_5 = R19;
            px_4 = R15;
            pi_1 = R13;
            py_1 = R11;
            px_1 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_5 = R1;
            continue;
        }
        case_190: {
            nodes_size = 6;
            // mod=0,1,[1,2],[6,7],7,8, swith_cuts=0
            auto R0 = pi_8[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_0[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_0[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_0[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_1[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = py_1[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = pi_1[ 0 ];
            SimdVec<TC,1> R13{ R12 };
            auto R14 = px_6[ 0 ];
            SimdVec<TF,2> R15{ R8, R14 };
            auto R16 = py_8[ 0 ];
            SimdVec<TF,1> R17{ R16 };
            auto R18 = di_1[ 0 ];
            auto R19 = px_8[ 0 ];
            SimdVec<TF,1> R20{ R19 };
            auto R21 = di_6[ 0 ];
            SimdVec<TF,2> R22{ R18, R21 };
            auto R23 = pi_7[ 0 ];
            SimdVec<TC,1> R24{ R23 };
            auto R25 = di_2[ 0 ];
            SimdVec<TC,1> R26{ cut_i[num_cut] };
            auto R27 = di_7[ 0 ];
            SimdVec<TF,2> R28{ R25, R27 };
            auto R29 = R28 - R22;
            auto R30 = R22 / R29;
            auto R31 = px_2[ 0 ];
            auto R32 = py_7[ 0 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = px_7[ 0 ];
            SimdVec<TF,1> R35{ R34 };
            auto R36 = py_6[ 0 ];
            SimdVec<TF,2> R37{ R10, R36 };
            SimdVec<TF,2> R38{ R31, R34 };
            auto R39 = R15 - R38;
            auto R40 = R30 * R39;
            auto R41 = R15 + R40;
            auto R42 = R41[ 1 ];
            SimdVec<TF,1> R43{ R42 };
            auto R44 = py_2[ 0 ];
            SimdVec<TF,2> R45{ R44, R32 };
            auto R46 = R37 - R45;
            auto R47 = R30 * R46;
            auto R48 = R37 + R47;
            auto R49 = R48[ 1 ];
            SimdVec<TF,1> R50{ R49 };
            auto R51 = R41[ 0 ];
            SimdVec<TF,1> R52{ R51 };
            auto R53 = R48[ 0 ];
            SimdVec<TF,1> R54{ R53 };
            py_2 = R54;
            px_2 = R52;
            py_3 = R50;
            px_3 = R43;
            px_4 = R35;
            py_4 = R33;
            pi_2 = R26;
            pi_3 = R26;
            pi_4 = R24;
            px_5 = R20;
            py_5 = R17;
            pi_1 = R13;
            py_1 = R11;
            px_1 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_5 = R1;
            continue;
        }
        case_125: {
            nodes_size = 6;
            // mod=0,[0,1],[4,5],5,6,7, swith_cuts=1
            auto R0 = pi_7[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_0[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_0[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_0[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_4[ 0 ];
            SimdVec<TF,2> R9{ R8, R2 };
            auto R10 = py_7[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = di_4[ 0 ];
            auto R13 = px_7[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = di_0[ 0 ];
            SimdVec<TF,2> R16{ R12, R15 };
            auto R17 = pi_6[ 0 ];
            SimdVec<TC,1> R18{ R17 };
            auto R19 = di_5[ 0 ];
            auto R20 = py_6[ 0 ];
            SimdVec<TF,1> R21{ R20 };
            auto R22 = di_1[ 0 ];
            SimdVec<TF,2> R23{ R19, R22 };
            auto R24 = R23 - R16;
            auto R25 = R16 / R24;
            auto R26 = px_6[ 0 ];
            SimdVec<TF,1> R27{ R26 };
            auto R28 = px_5[ 0 ];
            SimdVec<TF,1> R29{ R28 };
            auto R30 = px_1[ 0 ];
            SimdVec<TF,2> R31{ R28, R30 };
            auto R32 = R9 - R31;
            auto R33 = R25 * R32;
            auto R34 = R9 + R33;
            auto R35 = R34[ 0 ];
            SimdVec<TF,1> R36{ R35 };
            auto R37 = py_4[ 0 ];
            SimdVec<TF,2> R38{ R37, R4 };
            auto R39 = R34[ 1 ];
            SimdVec<TF,1> R40{ R39 };
            auto R41 = py_5[ 0 ];
            SimdVec<TF,1> R42{ R41 };
            auto R43 = py_1[ 0 ];
            SimdVec<TF,2> R44{ R41, R43 };
            auto R45 = R38 - R44;
            auto R46 = R25 * R45;
            auto R47 = R38 + R46;
            auto R48 = R47[ 0 ];
            SimdVec<TF,1> R49{ R48 };
            SimdVec<TC,1> R50{ cut_i[num_cut] };
            auto R51 = pi_5[ 0 ];
            SimdVec<TC,1> R52{ R51 };
            auto R53 = R47[ 1 ];
            SimdVec<TF,1> R54{ R53 };
            py_1 = R54;
            pi_1 = R50;
            pi_3 = R52;
            pi_2 = R50;
            py_2 = R49;
            py_3 = R42;
            px_1 = R40;
            px_2 = R36;
            px_3 = R29;
            px_4 = R27;
            py_4 = R21;
            pi_4 = R18;
            px_5 = R14;
            py_5 = R11;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_5 = R1;
            continue;
        }
        case_184: {
            nodes_size = 6;
            // mod=0,[0,1],[5,6],6,7,8, swith_cuts=0
            auto R0 = pi_8[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_0[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_0[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_0[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_5[ 0 ];
            SimdVec<TF,2> R9{ R2, R8 };
            auto R10 = py_8[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = di_0[ 0 ];
            auto R13 = px_8[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = di_5[ 0 ];
            SimdVec<TF,2> R16{ R12, R15 };
            auto R17 = pi_7[ 0 ];
            SimdVec<TC,1> R18{ R17 };
            auto R19 = di_1[ 0 ];
            auto R20 = py_7[ 0 ];
            SimdVec<TF,1> R21{ R20 };
            auto R22 = di_6[ 0 ];
            SimdVec<TF,2> R23{ R19, R22 };
            auto R24 = R23 - R16;
            auto R25 = R16 / R24;
            auto R26 = px_7[ 0 ];
            SimdVec<TF,1> R27{ R26 };
            auto R28 = px_1[ 0 ];
            auto R29 = pi_6[ 0 ];
            SimdVec<TC,1> R30{ R29 };
            auto R31 = px_6[ 0 ];
            SimdVec<TF,1> R32{ R31 };
            auto R33 = py_5[ 0 ];
            SimdVec<TF,2> R34{ R4, R33 };
            SimdVec<TF,2> R35{ R28, R31 };
            auto R36 = R9 - R35;
            auto R37 = R25 * R36;
            auto R38 = R9 + R37;
            auto R39 = R38[ 1 ];
            SimdVec<TF,1> R40{ R39 };
            auto R41 = py_1[ 0 ];
            auto R42 = R38[ 0 ];
            SimdVec<TF,1> R43{ R42 };
            auto R44 = py_6[ 0 ];
            SimdVec<TF,1> R45{ R44 };
            SimdVec<TC,1> R46{ cut_i[num_cut] };
            SimdVec<TF,2> R47{ R41, R44 };
            auto R48 = R34 - R47;
            auto R49 = R25 * R48;
            auto R50 = R34 + R49;
            auto R51 = R50[ 1 ];
            SimdVec<TF,1> R52{ R51 };
            auto R53 = R50[ 0 ];
            SimdVec<TF,1> R54{ R53 };
            py_1 = R54;
            py_2 = R52;
            pi_1 = R46;
            pi_2 = R46;
            py_3 = R45;
            px_1 = R43;
            px_2 = R40;
            px_3 = R32;
            pi_3 = R30;
            px_4 = R27;
            py_4 = R21;
            pi_4 = R18;
            px_5 = R14;
            py_5 = R11;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_5 = R1;
            continue;
        }
        case_98: {
            nodes_size = 6;
            // mod=1,2,3,4,[4,5],[0,1], swith_cuts=1
            SimdVec<TC,1> R0{ cut_i[num_cut] };
            auto R1 = px_1[ 0 ];
            SimdVec<TF,1> R2{ R1 };
            auto R3 = py_1[ 0 ];
            SimdVec<TF,1> R4{ R3 };
            auto R5 = pi_1[ 0 ];
            SimdVec<TC,1> R6{ R5 };
            auto R7 = px_2[ 0 ];
            SimdVec<TF,1> R8{ R7 };
            auto R9 = py_2[ 0 ];
            SimdVec<TF,1> R10{ R9 };
            auto R11 = pi_2[ 0 ];
            SimdVec<TC,1> R12{ R11 };
            auto R13 = px_3[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = py_3[ 0 ];
            SimdVec<TF,1> R16{ R15 };
            auto R17 = pi_3[ 0 ];
            SimdVec<TC,1> R18{ R17 };
            auto R19 = px_4[ 0 ];
            SimdVec<TF,1> R20{ R19 };
            auto R21 = py_4[ 0 ];
            SimdVec<TF,1> R22{ R21 };
            auto R23 = pi_4[ 0 ];
            SimdVec<TC,1> R24{ R23 };
            auto R25 = px_0[ 0 ];
            SimdVec<TF,2> R26{ R25, R19 };
            auto R27 = di_0[ 0 ];
            auto R28 = py_5[ 0 ];
            SimdVec<TF,2> R29{ R3, R28 };
            auto R30 = py_0[ 0 ];
            SimdVec<TF,2> R31{ R30, R21 };
            auto R32 = R31 - R29;
            auto R33 = px_5[ 0 ];
            SimdVec<TF,2> R34{ R1, R33 };
            auto R35 = R26 - R34;
            auto R36 = di_5[ 0 ];
            auto R37 = di_1[ 0 ];
            SimdVec<TF,2> R38{ R37, R36 };
            auto R39 = di_4[ 0 ];
            SimdVec<TF,2> R40{ R27, R39 };
            auto R41 = R38 - R40;
            auto R42 = R40 / R41;
            auto R43 = R42 * R32;
            auto R44 = R31 + R43;
            auto R45 = R44[ 0 ];
            SimdVec<TF,1> R46{ R45 };
            auto R47 = R42 * R35;
            auto R48 = R26 + R47;
            auto R49 = R48[ 0 ];
            SimdVec<TF,1> R50{ R49 };
            auto R51 = R44[ 1 ];
            SimdVec<TF,1> R52{ R51 };
            auto R53 = R48[ 1 ];
            SimdVec<TF,1> R54{ R53 };
            px_4 = R54;
            py_4 = R52;
            px_5 = R50;
            py_5 = R46;
            pi_4 = R0;
            pi_3 = R24;
            py_3 = R22;
            px_3 = R20;
            pi_2 = R18;
            py_2 = R16;
            px_2 = R14;
            pi_1 = R12;
            py_1 = R10;
            px_1 = R8;
            pi_0 = R6;
            py_0 = R4;
            px_0 = R2;
            pi_5 = R0;
            continue;
        }
        case_27: {
            nodes_size = 6;
            // mod=2,[2,3],[3,4],4,0,1, swith_cuts=1
            auto R0 = pi_1[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_2[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_2[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_2[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_4[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = di_4[ 0 ];
            SimdVec<TF,2> R11{ R8, R2 };
            auto R12 = py_1[ 0 ];
            SimdVec<TF,1> R13{ R12 };
            auto R14 = di_2[ 0 ];
            SimdVec<TF,2> R15{ R10, R14 };
            auto R16 = px_1[ 0 ];
            SimdVec<TF,1> R17{ R16 };
            auto R18 = di_3[ 0 ];
            SimdVec<TF,2> R19{ R18, R18 };
            auto R20 = R19 - R15;
            auto R21 = R15 / R20;
            auto R22 = pi_0[ 0 ];
            SimdVec<TC,1> R23{ R22 };
            auto R24 = px_3[ 0 ];
            SimdVec<TF,2> R25{ R24, R24 };
            auto R26 = R11 - R25;
            auto R27 = R21 * R26;
            auto R28 = R11 + R27;
            auto R29 = R28[ 0 ];
            SimdVec<TF,1> R30{ R29 };
            auto R31 = py_4[ 0 ];
            SimdVec<TF,1> R32{ R31 };
            auto R33 = py_3[ 0 ];
            SimdVec<TF,2> R34{ R33, R33 };
            SimdVec<TF,2> R35{ R31, R4 };
            auto R36 = R35 - R34;
            auto R37 = R21 * R36;
            auto R38 = R35 + R37;
            auto R39 = R38[ 0 ];
            SimdVec<TF,1> R40{ R39 };
            SimdVec<TC,1> R41{ cut_i[num_cut] };
            auto R42 = pi_4[ 0 ];
            SimdVec<TC,1> R43{ R42 };
            auto R44 = px_0[ 0 ];
            SimdVec<TF,1> R45{ R44 };
            auto R46 = py_0[ 0 ];
            SimdVec<TF,1> R47{ R46 };
            auto R48 = R28[ 1 ];
            SimdVec<TF,1> R49{ R48 };
            auto R50 = R38[ 1 ];
            SimdVec<TF,1> R51{ R50 };
            py_1 = R51;
            px_1 = R49;
            pi_1 = R41;
            py_4 = R47;
            px_4 = R45;
            pi_3 = R43;
            pi_2 = R41;
            py_2 = R40;
            py_3 = R32;
            px_2 = R30;
            pi_4 = R23;
            px_5 = R17;
            py_5 = R13;
            px_3 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_5 = R1;
            continue;
        }
        case_22: {
            nodes_size = 6;
            // mod=3,4,0,[0,1],[1,2],2, swith_cuts=1
            auto R0 = pi_2[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_3[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_3[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_3[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_4[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = py_4[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = pi_4[ 0 ];
            SimdVec<TC,1> R13{ R12 };
            auto R14 = px_0[ 0 ];
            SimdVec<TF,1> R15{ R14 };
            auto R16 = py_0[ 0 ];
            SimdVec<TF,1> R17{ R16 };
            auto R18 = pi_0[ 0 ];
            SimdVec<TC,1> R19{ R18 };
            auto R20 = px_2[ 0 ];
            SimdVec<TF,1> R21{ R20 };
            auto R22 = di_2[ 0 ];
            SimdVec<TF,2> R23{ R20, R14 };
            SimdVec<TC,1> R24{ cut_i[num_cut] };
            auto R25 = di_0[ 0 ];
            SimdVec<TF,2> R26{ R22, R25 };
            auto R27 = di_1[ 0 ];
            SimdVec<TF,2> R28{ R27, R27 };
            auto R29 = R28 - R26;
            auto R30 = R26 / R29;
            auto R31 = py_1[ 0 ];
            SimdVec<TF,2> R32{ R31, R31 };
            auto R33 = py_2[ 0 ];
            SimdVec<TF,1> R34{ R33 };
            auto R35 = px_1[ 0 ];
            SimdVec<TF,2> R36{ R35, R35 };
            auto R37 = R23 - R36;
            auto R38 = R30 * R37;
            auto R39 = R23 + R38;
            auto R40 = R39[ 0 ];
            SimdVec<TF,1> R41{ R40 };
            SimdVec<TF,2> R42{ R33, R16 };
            auto R43 = R42 - R32;
            auto R44 = R30 * R43;
            auto R45 = R42 + R44;
            auto R46 = R45[ 0 ];
            SimdVec<TF,1> R47{ R46 };
            auto R48 = R45[ 1 ];
            SimdVec<TF,1> R49{ R48 };
            auto R50 = R39[ 1 ];
            SimdVec<TF,1> R51{ R50 };
            px_3 = R51;
            py_3 = R49;
            py_4 = R47;
            px_4 = R41;
            py_5 = R34;
            pi_3 = R24;
            pi_4 = R24;
            px_5 = R21;
            pi_2 = R19;
            py_2 = R17;
            px_2 = R15;
            pi_1 = R13;
            py_1 = R11;
            px_1 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_5 = R1;
            continue;
        }
        case_217: {
            nodes_size = 6;
            // mod=3,4,5,[5,6],[1,2],2, swith_cuts=1
            auto R0 = pi_2[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_3[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_3[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_3[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_4[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = py_4[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = pi_4[ 0 ];
            SimdVec<TC,1> R13{ R12 };
            auto R14 = px_5[ 0 ];
            SimdVec<TF,1> R15{ R14 };
            auto R16 = py_5[ 0 ];
            SimdVec<TF,1> R17{ R16 };
            auto R18 = pi_5[ 0 ];
            SimdVec<TC,1> R19{ R18 };
            auto R20 = px_2[ 0 ];
            SimdVec<TF,1> R21{ R20 };
            auto R22 = px_6[ 0 ];
            SimdVec<TF,2> R23{ R20, R22 };
            SimdVec<TC,1> R24{ cut_i[num_cut] };
            auto R25 = di_2[ 0 ];
            auto R26 = di_6[ 0 ];
            SimdVec<TF,2> R27{ R25, R26 };
            auto R28 = py_1[ 0 ];
            SimdVec<TF,2> R29{ R28, R16 };
            auto R30 = py_6[ 0 ];
            auto R31 = py_2[ 0 ];
            SimdVec<TF,1> R32{ R31 };
            auto R33 = di_1[ 0 ];
            SimdVec<TF,2> R34{ R31, R30 };
            auto R35 = R34 - R29;
            auto R36 = px_1[ 0 ];
            SimdVec<TF,2> R37{ R36, R14 };
            auto R38 = R23 - R37;
            auto R39 = di_5[ 0 ];
            SimdVec<TF,2> R40{ R33, R39 };
            auto R41 = R40 - R27;
            auto R42 = R27 / R41;
            auto R43 = R42 * R35;
            auto R44 = R34 + R43;
            auto R45 = R44[ 0 ];
            SimdVec<TF,1> R46{ R45 };
            auto R47 = R42 * R38;
            auto R48 = R23 + R47;
            auto R49 = R48[ 0 ];
            SimdVec<TF,1> R50{ R49 };
            auto R51 = R44[ 1 ];
            SimdVec<TF,1> R52{ R51 };
            auto R53 = R48[ 1 ];
            SimdVec<TF,1> R54{ R53 };
            px_3 = R54;
            py_3 = R52;
            px_4 = R50;
            py_4 = R46;
            py_5 = R32;
            pi_3 = R24;
            pi_4 = R24;
            px_5 = R21;
            pi_2 = R19;
            py_2 = R17;
            px_2 = R15;
            pi_1 = R13;
            py_1 = R11;
            px_1 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_5 = R1;
            continue;
        }
        case_21: {
            nodes_size = 6;
            // mod=4,[4,0],[0,1],1,2,3, swith_cuts=1
            auto R0 = pi_3[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_4[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_4[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_4[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_0[ 0 ];
            SimdVec<TF,2> R9{ R8, R2 };
            auto R10 = py_3[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = di_0[ 0 ];
            auto R13 = px_3[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = di_4[ 0 ];
            SimdVec<TF,2> R16{ R12, R15 };
            auto R17 = pi_2[ 0 ];
            SimdVec<TC,1> R18{ R17 };
            auto R19 = di_1[ 0 ];
            SimdVec<TF,2> R20{ R19, R12 };
            auto R21 = R20 - R16;
            auto R22 = R16 / R21;
            auto R23 = py_2[ 0 ];
            SimdVec<TF,1> R24{ R23 };
            auto R25 = px_1[ 0 ];
            SimdVec<TF,1> R26{ R25 };
            auto R27 = py_0[ 0 ];
            SimdVec<TF,2> R28{ R27, R4 };
            SimdVec<TF,2> R29{ R25, R8 };
            auto R30 = R9 - R29;
            auto R31 = R22 * R30;
            auto R32 = R9 + R31;
            auto R33 = R32[ 0 ];
            SimdVec<TF,1> R34{ R33 };
            auto R35 = py_1[ 0 ];
            SimdVec<TF,1> R36{ R35 };
            SimdVec<TC,1> R37{ cut_i[num_cut] };
            auto R38 = pi_1[ 0 ];
            SimdVec<TC,1> R39{ R38 };
            auto R40 = px_2[ 0 ];
            SimdVec<TF,1> R41{ R40 };
            auto R42 = R32[ 1 ];
            SimdVec<TF,1> R43{ R42 };
            SimdVec<TF,2> R44{ R35, R27 };
            auto R45 = R28 - R44;
            auto R46 = R22 * R45;
            auto R47 = R28 + R46;
            auto R48 = R47[ 0 ];
            SimdVec<TF,1> R49{ R48 };
            auto R50 = R47[ 1 ];
            SimdVec<TF,1> R51{ R50 };
            py_1 = R51;
            py_2 = R49;
            pi_1 = R37;
            px_1 = R43;
            px_4 = R41;
            pi_3 = R39;
            pi_2 = R37;
            py_3 = R36;
            px_2 = R34;
            px_3 = R26;
            py_4 = R24;
            pi_4 = R18;
            px_5 = R14;
            py_5 = R11;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_5 = R1;
            continue;
        }
        case_149: {
            nodes_size = 6;
            // mod=5,[5,6],[1,2],2,3,4, swith_cuts=0
            auto R0 = pi_4[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_5[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_5[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_5[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_6[ 0 ];
            auto R9 = py_4[ 0 ];
            SimdVec<TF,1> R10{ R9 };
            auto R11 = px_2[ 0 ];
            SimdVec<TF,1> R12{ R11 };
            auto R13 = di_6[ 0 ];
            SimdVec<TF,2> R14{ R8, R11 };
            auto R15 = px_4[ 0 ];
            SimdVec<TF,1> R16{ R15 };
            auto R17 = di_2[ 0 ];
            SimdVec<TF,2> R18{ R13, R17 };
            auto R19 = pi_3[ 0 ];
            SimdVec<TC,1> R20{ R19 };
            auto R21 = di_5[ 0 ];
            auto R22 = py_3[ 0 ];
            SimdVec<TF,1> R23{ R22 };
            auto R24 = di_1[ 0 ];
            SimdVec<TF,2> R25{ R21, R24 };
            auto R26 = R25 - R18;
            auto R27 = R18 / R26;
            auto R28 = px_3[ 0 ];
            SimdVec<TF,1> R29{ R28 };
            auto R30 = px_1[ 0 ];
            SimdVec<TF,2> R31{ R2, R30 };
            auto R32 = R14 - R31;
            auto R33 = R27 * R32;
            auto R34 = R14 + R33;
            auto R35 = R34[ 1 ];
            SimdVec<TF,1> R36{ R35 };
            auto R37 = py_6[ 0 ];
            auto R38 = R34[ 0 ];
            SimdVec<TF,1> R39{ R38 };
            auto R40 = py_2[ 0 ];
            SimdVec<TF,1> R41{ R40 };
            auto R42 = py_1[ 0 ];
            SimdVec<TF,2> R43{ R4, R42 };
            SimdVec<TF,2> R44{ R37, R40 };
            auto R45 = R44 - R43;
            auto R46 = R27 * R45;
            auto R47 = R44 + R46;
            auto R48 = R47[ 1 ];
            SimdVec<TF,1> R49{ R48 };
            SimdVec<TC,1> R50{ cut_i[num_cut] };
            auto R51 = pi_2[ 0 ];
            SimdVec<TC,1> R52{ R51 };
            auto R53 = R47[ 0 ];
            SimdVec<TF,1> R54{ R53 };
            py_1 = R54;
            pi_1 = R50;
            pi_3 = R52;
            pi_2 = R50;
            py_2 = R49;
            py_3 = R41;
            px_1 = R39;
            px_2 = R36;
            px_4 = R29;
            py_4 = R23;
            pi_4 = R20;
            px_5 = R16;
            px_3 = R12;
            py_5 = R10;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_5 = R1;
            continue;
        }
        case_93: {
            nodes_size = 6;
            // mod=5,[5,6],[1,2],2,3,4, swith_cuts=1
            auto R0 = pi_4[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_5[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_5[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_5[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_2[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = di_2[ 0 ];
            SimdVec<TF,2> R11{ R8, R2 };
            auto R12 = py_4[ 0 ];
            SimdVec<TF,1> R13{ R12 };
            auto R14 = di_5[ 0 ];
            SimdVec<TF,2> R15{ R10, R14 };
            auto R16 = px_4[ 0 ];
            SimdVec<TF,1> R17{ R16 };
            auto R18 = di_1[ 0 ];
            auto R19 = pi_3[ 0 ];
            SimdVec<TC,1> R20{ R19 };
            auto R21 = di_6[ 0 ];
            SimdVec<TF,2> R22{ R18, R21 };
            auto R23 = R22 - R15;
            auto R24 = R15 / R23;
            auto R25 = py_3[ 0 ];
            SimdVec<TF,1> R26{ R25 };
            auto R27 = px_1[ 0 ];
            auto R28 = px_3[ 0 ];
            SimdVec<TF,1> R29{ R28 };
            auto R30 = px_6[ 0 ];
            SimdVec<TF,2> R31{ R27, R30 };
            auto R32 = R11 - R31;
            auto R33 = R24 * R32;
            auto R34 = R11 + R33;
            auto R35 = R34[ 0 ];
            SimdVec<TF,1> R36{ R35 };
            auto R37 = py_2[ 0 ];
            SimdVec<TF,1> R38{ R37 };
            auto R39 = py_1[ 0 ];
            SimdVec<TF,2> R40{ R37, R4 };
            auto R41 = R34[ 1 ];
            SimdVec<TF,1> R42{ R41 };
            auto R43 = py_6[ 0 ];
            SimdVec<TF,2> R44{ R39, R43 };
            auto R45 = R40 - R44;
            auto R46 = R24 * R45;
            auto R47 = R40 + R46;
            auto R48 = R47[ 0 ];
            SimdVec<TF,1> R49{ R48 };
            SimdVec<TC,1> R50{ cut_i[num_cut] };
            auto R51 = pi_2[ 0 ];
            SimdVec<TC,1> R52{ R51 };
            auto R53 = R47[ 1 ];
            SimdVec<TF,1> R54{ R53 };
            py_1 = R54;
            pi_1 = R50;
            pi_3 = R52;
            pi_2 = R50;
            py_2 = R49;
            px_1 = R42;
            py_3 = R38;
            px_2 = R36;
            px_4 = R29;
            py_4 = R26;
            pi_4 = R20;
            px_5 = R17;
            py_5 = R13;
            px_3 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_5 = R1;
            continue;
        }
        case_78: {
            nodes_size = 6;
            // mod=6,0,[0,1],[3,4],4,5, swith_cuts=1
            auto R0 = pi_5[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_6[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_6[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_6[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_0[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = py_0[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = pi_0[ 0 ];
            SimdVec<TC,1> R13{ R12 };
            auto R14 = px_3[ 0 ];
            auto R15 = py_5[ 0 ];
            SimdVec<TF,1> R16{ R15 };
            auto R17 = px_1[ 0 ];
            SimdVec<TF,2> R18{ R14, R17 };
            auto R19 = px_5[ 0 ];
            SimdVec<TF,1> R20{ R19 };
            auto R21 = di_3[ 0 ];
            auto R22 = pi_4[ 0 ];
            SimdVec<TC,1> R23{ R22 };
            auto R24 = di_1[ 0 ];
            SimdVec<TF,2> R25{ R21, R24 };
            SimdVec<TC,1> R26{ cut_i[num_cut] };
            auto R27 = di_4[ 0 ];
            auto R28 = di_0[ 0 ];
            SimdVec<TF,2> R29{ R27, R28 };
            auto R30 = R29 - R25;
            auto R31 = R25 / R30;
            auto R32 = py_4[ 0 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = px_4[ 0 ];
            SimdVec<TF,1> R35{ R34 };
            auto R36 = py_3[ 0 ];
            SimdVec<TF,2> R37{ R34, R8 };
            auto R38 = R18 - R37;
            auto R39 = R31 * R38;
            auto R40 = R18 + R39;
            auto R41 = R40[ 0 ];
            SimdVec<TF,1> R42{ R41 };
            auto R43 = py_1[ 0 ];
            SimdVec<TF,2> R44{ R36, R43 };
            auto R45 = R40[ 1 ];
            SimdVec<TF,1> R46{ R45 };
            SimdVec<TF,2> R47{ R32, R10 };
            auto R48 = R44 - R47;
            auto R49 = R31 * R48;
            auto R50 = R44 + R49;
            auto R51 = R50[ 0 ];
            SimdVec<TF,1> R52{ R51 };
            auto R53 = R50[ 1 ];
            SimdVec<TF,1> R54{ R53 };
            py_2 = R54;
            py_3 = R52;
            px_2 = R46;
            px_3 = R42;
            px_4 = R35;
            py_4 = R33;
            pi_2 = R26;
            pi_3 = R26;
            pi_4 = R23;
            px_5 = R20;
            py_5 = R16;
            pi_1 = R13;
            py_1 = R11;
            px_1 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_5 = R1;
            continue;
        }
        case_221: {
            nodes_size = 6;
            // mod=[0,1],1,2,3,4,[4,5], swith_cuts=0
            auto R0 = pi_4[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_0[ 0 ];
            auto R3 = pi_3[ 0 ];
            SimdVec<TC,1> R4{ R3 };
            auto R5 = px_5[ 0 ];
            SimdVec<TF,2> R6{ R2, R5 };
            auto R7 = py_3[ 0 ];
            SimdVec<TF,1> R8{ R7 };
            auto R9 = di_0[ 0 ];
            auto R10 = px_3[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = di_5[ 0 ];
            SimdVec<TF,2> R13{ R9, R12 };
            auto R14 = pi_2[ 0 ];
            SimdVec<TC,1> R15{ R14 };
            auto R16 = di_1[ 0 ];
            auto R17 = py_2[ 0 ];
            SimdVec<TF,1> R18{ R17 };
            auto R19 = di_4[ 0 ];
            SimdVec<TF,2> R20{ R16, R19 };
            auto R21 = R20 - R13;
            auto R22 = R13 / R21;
            auto R23 = px_2[ 0 ];
            SimdVec<TF,1> R24{ R23 };
            auto R25 = px_1[ 0 ];
            SimdVec<TF,1> R26{ R25 };
            auto R27 = px_4[ 0 ];
            SimdVec<TF,1> R28{ R27 };
            auto R29 = py_0[ 0 ];
            SimdVec<TF,2> R30{ R25, R27 };
            auto R31 = R6 - R30;
            auto R32 = R22 * R31;
            auto R33 = R6 + R32;
            auto R34 = R33[ 1 ];
            SimdVec<TF,1> R35{ R34 };
            auto R36 = py_5[ 0 ];
            SimdVec<TF,2> R37{ R29, R36 };
            auto R38 = R33[ 0 ];
            SimdVec<TF,1> R39{ R38 };
            auto R40 = py_1[ 0 ];
            SimdVec<TF,1> R41{ R40 };
            auto R42 = py_4[ 0 ];
            SimdVec<TF,1> R43{ R42 };
            SimdVec<TC,1> R44{ cut_i[num_cut] };
            auto R45 = pi_1[ 0 ];
            SimdVec<TC,1> R46{ R45 };
            SimdVec<TF,2> R47{ R40, R42 };
            auto R48 = R37 - R47;
            auto R49 = R22 * R48;
            auto R50 = R37 + R49;
            auto R51 = R50[ 1 ];
            SimdVec<TF,1> R52{ R51 };
            auto R53 = R50[ 0 ];
            SimdVec<TF,1> R54{ R53 };
            py_0 = R54;
            py_5 = R52;
            pi_0 = R44;
            pi_1 = R46;
            pi_5 = R44;
            py_4 = R43;
            py_1 = R41;
            px_0 = R39;
            px_5 = R35;
            px_4 = R28;
            px_1 = R26;
            px_2 = R24;
            py_2 = R18;
            pi_2 = R15;
            px_3 = R11;
            py_3 = R8;
            pi_3 = R4;
            pi_4 = R1;
            continue;
        }
        case_24: {
            nodes_size = 6;
            // mod=[2,3],3,4,0,1,[1,2], swith_cuts=1
            auto R0 = pi_1[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_1[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = px_2[ 0 ];
            SimdVec<TF,2> R5{ R2, R4 };
            auto R6 = pi_0[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = di_1[ 0 ];
            auto R9 = py_0[ 0 ];
            SimdVec<TF,1> R10{ R9 };
            auto R11 = di_2[ 0 ];
            SimdVec<TF,2> R12{ R8, R11 };
            auto R13 = px_0[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = di_3[ 0 ];
            SimdVec<TF,2> R16{ R11, R15 };
            auto R17 = R16 - R12;
            auto R18 = R12 / R17;
            auto R19 = pi_4[ 0 ];
            SimdVec<TC,1> R20{ R19 };
            auto R21 = px_3[ 0 ];
            SimdVec<TF,1> R22{ R21 };
            auto R23 = py_1[ 0 ];
            SimdVec<TF,1> R24{ R23 };
            auto R25 = py_2[ 0 ];
            SimdVec<TF,2> R26{ R23, R25 };
            SimdVec<TF,2> R27{ R4, R21 };
            auto R28 = R5 - R27;
            auto R29 = R18 * R28;
            auto R30 = R5 + R29;
            auto R31 = R30[ 0 ];
            SimdVec<TF,1> R32{ R31 };
            auto R33 = py_3[ 0 ];
            SimdVec<TF,1> R34{ R33 };
            SimdVec<TC,1> R35{ cut_i[num_cut] };
            auto R36 = pi_3[ 0 ];
            SimdVec<TC,1> R37{ R36 };
            auto R38 = px_4[ 0 ];
            SimdVec<TF,1> R39{ R38 };
            auto R40 = py_4[ 0 ];
            SimdVec<TF,1> R41{ R40 };
            auto R42 = R30[ 1 ];
            SimdVec<TF,1> R43{ R42 };
            SimdVec<TF,2> R44{ R25, R33 };
            auto R45 = R26 - R44;
            auto R46 = R18 * R45;
            auto R47 = R26 + R46;
            auto R48 = R47[ 0 ];
            SimdVec<TF,1> R49{ R48 };
            auto R50 = R47[ 1 ];
            SimdVec<TF,1> R51{ R50 };
            py_0 = R51;
            py_5 = R49;
            pi_0 = R35;
            px_0 = R43;
            py_2 = R41;
            px_2 = R39;
            pi_1 = R37;
            pi_5 = R35;
            py_1 = R34;
            px_5 = R32;
            py_4 = R24;
            px_1 = R22;
            pi_2 = R20;
            px_3 = R14;
            py_3 = R10;
            pi_3 = R7;
            px_4 = R3;
            pi_4 = R1;
            continue;
        }
        case_75: {
            nodes_size = 6;
            // mod=[2,3],3,4,5,6,[6,0], swith_cuts=0
            auto R0 = pi_6[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_2[ 0 ];
            auto R3 = pi_5[ 0 ];
            SimdVec<TC,1> R4{ R3 };
            auto R5 = px_6[ 0 ];
            SimdVec<TF,1> R6{ R5 };
            auto R7 = di_2[ 0 ];
            SimdVec<TF,2> R8{ R2, R5 };
            auto R9 = py_5[ 0 ];
            SimdVec<TF,1> R10{ R9 };
            auto R11 = di_6[ 0 ];
            SimdVec<TF,2> R12{ R7, R11 };
            auto R13 = px_5[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = di_3[ 0 ];
            auto R16 = pi_4[ 0 ];
            SimdVec<TC,1> R17{ R16 };
            auto R18 = di_0[ 0 ];
            SimdVec<TF,2> R19{ R15, R18 };
            auto R20 = R19 - R12;
            auto R21 = R12 / R20;
            auto R22 = py_4[ 0 ];
            SimdVec<TF,1> R23{ R22 };
            auto R24 = px_3[ 0 ];
            SimdVec<TF,1> R25{ R24 };
            auto R26 = px_0[ 0 ];
            SimdVec<TF,2> R27{ R24, R26 };
            auto R28 = R8 - R27;
            auto R29 = R21 * R28;
            auto R30 = R8 + R29;
            auto R31 = R30[ 1 ];
            SimdVec<TF,1> R32{ R31 };
            auto R33 = py_2[ 0 ];
            auto R34 = R30[ 0 ];
            SimdVec<TF,1> R35{ R34 };
            auto R36 = py_6[ 0 ];
            SimdVec<TF,1> R37{ R36 };
            auto R38 = py_3[ 0 ];
            SimdVec<TF,1> R39{ R38 };
            auto R40 = py_0[ 0 ];
            SimdVec<TF,2> R41{ R38, R40 };
            SimdVec<TF,2> R42{ R33, R36 };
            auto R43 = R42 - R41;
            auto R44 = R21 * R43;
            auto R45 = R42 + R44;
            auto R46 = R45[ 1 ];
            SimdVec<TF,1> R47{ R46 };
            SimdVec<TC,1> R48{ cut_i[num_cut] };
            auto R49 = pi_3[ 0 ];
            SimdVec<TC,1> R50{ R49 };
            auto R51 = px_4[ 0 ];
            SimdVec<TF,1> R52{ R51 };
            auto R53 = R45[ 0 ];
            SimdVec<TF,1> R54{ R53 };
            py_0 = R54;
            pi_0 = R48;
            px_2 = R52;
            pi_1 = R50;
            pi_5 = R48;
            py_5 = R47;
            py_1 = R39;
            py_4 = R37;
            px_0 = R35;
            px_5 = R32;
            px_1 = R25;
            py_2 = R23;
            pi_2 = R17;
            px_3 = R14;
            py_3 = R10;
            px_4 = R6;
            pi_3 = R4;
            pi_4 = R1;
            continue;
        }
        case_143: {
            nodes_size = 6;
            // mod=[2,3],3,4,5,6,[6,7], swith_cuts=0
            auto R0 = pi_6[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_2[ 0 ];
            auto R3 = pi_5[ 0 ];
            SimdVec<TC,1> R4{ R3 };
            auto R5 = px_6[ 0 ];
            SimdVec<TF,1> R6{ R5 };
            auto R7 = di_2[ 0 ];
            SimdVec<TF,2> R8{ R2, R5 };
            auto R9 = py_5[ 0 ];
            SimdVec<TF,1> R10{ R9 };
            auto R11 = di_6[ 0 ];
            SimdVec<TF,2> R12{ R7, R11 };
            auto R13 = px_5[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = di_3[ 0 ];
            auto R16 = pi_4[ 0 ];
            SimdVec<TC,1> R17{ R16 };
            auto R18 = di_7[ 0 ];
            SimdVec<TF,2> R19{ R15, R18 };
            auto R20 = R19 - R12;
            auto R21 = R12 / R20;
            auto R22 = py_4[ 0 ];
            SimdVec<TF,1> R23{ R22 };
            auto R24 = px_3[ 0 ];
            SimdVec<TF,1> R25{ R24 };
            auto R26 = px_7[ 0 ];
            SimdVec<TF,2> R27{ R24, R26 };
            auto R28 = R8 - R27;
            auto R29 = R21 * R28;
            auto R30 = R8 + R29;
            auto R31 = R30[ 1 ];
            SimdVec<TF,1> R32{ R31 };
            auto R33 = py_2[ 0 ];
            auto R34 = R30[ 0 ];
            SimdVec<TF,1> R35{ R34 };
            auto R36 = py_6[ 0 ];
            SimdVec<TF,1> R37{ R36 };
            auto R38 = py_3[ 0 ];
            SimdVec<TF,1> R39{ R38 };
            auto R40 = py_7[ 0 ];
            SimdVec<TF,2> R41{ R38, R40 };
            SimdVec<TF,2> R42{ R33, R36 };
            auto R43 = R42 - R41;
            auto R44 = R21 * R43;
            auto R45 = R42 + R44;
            auto R46 = R45[ 1 ];
            SimdVec<TF,1> R47{ R46 };
            SimdVec<TC,1> R48{ cut_i[num_cut] };
            auto R49 = pi_3[ 0 ];
            SimdVec<TC,1> R50{ R49 };
            auto R51 = px_4[ 0 ];
            SimdVec<TF,1> R52{ R51 };
            auto R53 = R45[ 0 ];
            SimdVec<TF,1> R54{ R53 };
            py_0 = R54;
            pi_0 = R48;
            px_2 = R52;
            pi_1 = R50;
            pi_5 = R48;
            py_5 = R47;
            py_1 = R39;
            py_4 = R37;
            px_0 = R35;
            px_5 = R32;
            px_1 = R25;
            py_2 = R23;
            pi_2 = R17;
            px_3 = R14;
            py_3 = R10;
            px_4 = R6;
            pi_3 = R4;
            pi_4 = R1;
            continue;
        }
        case_212: {
            nodes_size = 6;
            // mod=[2,3],3,4,5,6,[6,7], swith_cuts=1
            auto R0 = pi_6[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_6[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = px_2[ 0 ];
            SimdVec<TF,2> R5{ R2, R4 };
            auto R6 = pi_5[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = di_6[ 0 ];
            auto R9 = py_5[ 0 ];
            SimdVec<TF,1> R10{ R9 };
            auto R11 = di_2[ 0 ];
            SimdVec<TF,2> R12{ R8, R11 };
            auto R13 = px_5[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = di_7[ 0 ];
            auto R16 = pi_4[ 0 ];
            SimdVec<TC,1> R17{ R16 };
            auto R18 = di_3[ 0 ];
            SimdVec<TF,2> R19{ R15, R18 };
            auto R20 = R19 - R12;
            auto R21 = R12 / R20;
            auto R22 = py_4[ 0 ];
            SimdVec<TF,1> R23{ R22 };
            auto R24 = px_7[ 0 ];
            auto R25 = px_4[ 0 ];
            SimdVec<TF,1> R26{ R25 };
            auto R27 = px_3[ 0 ];
            SimdVec<TF,1> R28{ R27 };
            auto R29 = py_6[ 0 ];
            SimdVec<TF,1> R30{ R29 };
            auto R31 = py_2[ 0 ];
            SimdVec<TF,2> R32{ R29, R31 };
            SimdVec<TF,2> R33{ R24, R27 };
            auto R34 = R5 - R33;
            auto R35 = R21 * R34;
            auto R36 = R5 + R35;
            auto R37 = R36[ 0 ];
            SimdVec<TF,1> R38{ R37 };
            auto R39 = py_7[ 0 ];
            auto R40 = R36[ 1 ];
            SimdVec<TF,1> R41{ R40 };
            auto R42 = py_3[ 0 ];
            SimdVec<TF,1> R43{ R42 };
            SimdVec<TC,1> R44{ cut_i[num_cut] };
            auto R45 = pi_3[ 0 ];
            SimdVec<TC,1> R46{ R45 };
            SimdVec<TF,2> R47{ R39, R42 };
            auto R48 = R32 - R47;
            auto R49 = R21 * R48;
            auto R50 = R32 + R49;
            auto R51 = R50[ 0 ];
            SimdVec<TF,1> R52{ R51 };
            auto R53 = R50[ 1 ];
            SimdVec<TF,1> R54{ R53 };
            py_0 = R54;
            py_5 = R52;
            pi_0 = R44;
            pi_1 = R46;
            pi_5 = R44;
            py_1 = R43;
            px_0 = R41;
            px_5 = R38;
            py_4 = R30;
            px_1 = R28;
            px_2 = R26;
            py_2 = R23;
            pi_2 = R17;
            px_3 = R14;
            py_3 = R10;
            pi_3 = R7;
            px_4 = R3;
            pi_4 = R1;
            continue;
        }
        case_136: {
            nodes_size = 6;
            // mod=[2,3],[6,7],7,0,1,2, swith_cuts=1
            auto R0 = pi_2[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_6[ 0 ];
            auto R3 = pi_1[ 0 ];
            SimdVec<TC,1> R4{ R3 };
            auto R5 = px_3[ 0 ];
            SimdVec<TF,2> R6{ R2, R5 };
            auto R7 = py_1[ 0 ];
            SimdVec<TF,1> R8{ R7 };
            auto R9 = di_6[ 0 ];
            auto R10 = px_1[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = di_3[ 0 ];
            SimdVec<TF,2> R13{ R9, R12 };
            auto R14 = pi_0[ 0 ];
            SimdVec<TC,1> R15{ R14 };
            auto R16 = di_7[ 0 ];
            auto R17 = py_0[ 0 ];
            SimdVec<TF,1> R18{ R17 };
            auto R19 = di_2[ 0 ];
            SimdVec<TF,2> R20{ R16, R19 };
            auto R21 = R20 - R13;
            auto R22 = R13 / R21;
            auto R23 = px_0[ 0 ];
            SimdVec<TF,1> R24{ R23 };
            auto R25 = px_7[ 0 ];
            SimdVec<TF,1> R26{ R25 };
            auto R27 = px_2[ 0 ];
            SimdVec<TF,1> R28{ R27 };
            auto R29 = py_6[ 0 ];
            SimdVec<TF,2> R30{ R25, R27 };
            auto R31 = R6 - R30;
            auto R32 = R22 * R31;
            auto R33 = R6 + R32;
            auto R34 = R33[ 0 ];
            SimdVec<TF,1> R35{ R34 };
            auto R36 = py_3[ 0 ];
            SimdVec<TF,2> R37{ R29, R36 };
            auto R38 = R33[ 1 ];
            SimdVec<TF,1> R39{ R38 };
            auto R40 = py_7[ 0 ];
            SimdVec<TF,1> R41{ R40 };
            auto R42 = py_2[ 0 ];
            SimdVec<TF,1> R43{ R42 };
            SimdVec<TC,1> R44{ cut_i[num_cut] };
            auto R45 = pi_7[ 0 ];
            SimdVec<TC,1> R46{ R45 };
            SimdVec<TF,2> R47{ R40, R42 };
            auto R48 = R37 - R47;
            auto R49 = R22 * R48;
            auto R50 = R37 + R49;
            auto R51 = R50[ 0 ];
            SimdVec<TF,1> R52{ R51 };
            auto R53 = R50[ 1 ];
            SimdVec<TF,1> R54{ R53 };
            py_0 = R54;
            py_1 = R52;
            pi_0 = R44;
            pi_2 = R46;
            pi_1 = R44;
            py_5 = R43;
            py_2 = R41;
            px_0 = R39;
            px_1 = R35;
            px_5 = R28;
            px_2 = R26;
            px_3 = R24;
            py_3 = R18;
            pi_3 = R15;
            px_4 = R11;
            py_4 = R8;
            pi_4 = R4;
            pi_5 = R1;
            continue;
        }
        case_121: {
            nodes_size = 6;
            // mod=[3,4],4,5,6,7,[7,0], swith_cuts=0
            auto R0 = pi_7[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_3[ 0 ];
            auto R3 = pi_6[ 0 ];
            SimdVec<TC,1> R4{ R3 };
            auto R5 = px_7[ 0 ];
            SimdVec<TF,1> R6{ R5 };
            auto R7 = di_3[ 0 ];
            SimdVec<TF,2> R8{ R2, R5 };
            auto R9 = py_6[ 0 ];
            SimdVec<TF,1> R10{ R9 };
            auto R11 = di_7[ 0 ];
            SimdVec<TF,2> R12{ R7, R11 };
            auto R13 = px_6[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = di_4[ 0 ];
            auto R16 = pi_5[ 0 ];
            SimdVec<TC,1> R17{ R16 };
            auto R18 = di_0[ 0 ];
            SimdVec<TF,2> R19{ R15, R18 };
            auto R20 = R19 - R12;
            auto R21 = R12 / R20;
            auto R22 = py_5[ 0 ];
            SimdVec<TF,1> R23{ R22 };
            auto R24 = px_4[ 0 ];
            SimdVec<TF,1> R25{ R24 };
            auto R26 = px_0[ 0 ];
            SimdVec<TF,2> R27{ R24, R26 };
            auto R28 = R8 - R27;
            auto R29 = R21 * R28;
            auto R30 = R8 + R29;
            auto R31 = R30[ 1 ];
            SimdVec<TF,1> R32{ R31 };
            auto R33 = py_3[ 0 ];
            auto R34 = R30[ 0 ];
            SimdVec<TF,1> R35{ R34 };
            auto R36 = py_7[ 0 ];
            SimdVec<TF,1> R37{ R36 };
            auto R38 = py_4[ 0 ];
            SimdVec<TF,1> R39{ R38 };
            auto R40 = py_0[ 0 ];
            SimdVec<TF,2> R41{ R38, R40 };
            SimdVec<TF,2> R42{ R33, R36 };
            auto R43 = R42 - R41;
            auto R44 = R21 * R43;
            auto R45 = R42 + R44;
            auto R46 = R45[ 1 ];
            SimdVec<TF,1> R47{ R46 };
            SimdVec<TC,1> R48{ cut_i[num_cut] };
            auto R49 = pi_4[ 0 ];
            SimdVec<TC,1> R50{ R49 };
            auto R51 = px_5[ 0 ];
            SimdVec<TF,1> R52{ R51 };
            auto R53 = R45[ 0 ];
            SimdVec<TF,1> R54{ R53 };
            py_0 = R54;
            pi_0 = R48;
            px_2 = R52;
            pi_1 = R50;
            pi_5 = R48;
            py_5 = R47;
            py_1 = R39;
            py_4 = R37;
            px_0 = R35;
            px_5 = R32;
            px_1 = R25;
            py_2 = R23;
            pi_2 = R17;
            px_3 = R14;
            py_3 = R10;
            px_4 = R6;
            pi_3 = R4;
            pi_4 = R1;
            continue;
        }
        case_205: {
            nodes_size = 6;
            // mod=[3,4],4,5,6,7,[7,8], swith_cuts=0
            auto R0 = pi_7[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_3[ 0 ];
            auto R3 = pi_6[ 0 ];
            SimdVec<TC,1> R4{ R3 };
            auto R5 = px_7[ 0 ];
            SimdVec<TF,1> R6{ R5 };
            auto R7 = di_3[ 0 ];
            SimdVec<TF,2> R8{ R2, R5 };
            auto R9 = py_6[ 0 ];
            SimdVec<TF,1> R10{ R9 };
            auto R11 = di_7[ 0 ];
            SimdVec<TF,2> R12{ R7, R11 };
            auto R13 = px_6[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = di_4[ 0 ];
            auto R16 = pi_5[ 0 ];
            SimdVec<TC,1> R17{ R16 };
            auto R18 = di_8[ 0 ];
            SimdVec<TF,2> R19{ R15, R18 };
            auto R20 = R19 - R12;
            auto R21 = R12 / R20;
            auto R22 = py_5[ 0 ];
            SimdVec<TF,1> R23{ R22 };
            auto R24 = px_4[ 0 ];
            SimdVec<TF,1> R25{ R24 };
            auto R26 = px_8[ 0 ];
            SimdVec<TF,2> R27{ R24, R26 };
            auto R28 = R8 - R27;
            auto R29 = R21 * R28;
            auto R30 = R8 + R29;
            auto R31 = R30[ 1 ];
            SimdVec<TF,1> R32{ R31 };
            auto R33 = py_3[ 0 ];
            auto R34 = R30[ 0 ];
            SimdVec<TF,1> R35{ R34 };
            auto R36 = py_7[ 0 ];
            SimdVec<TF,1> R37{ R36 };
            auto R38 = py_4[ 0 ];
            SimdVec<TF,1> R39{ R38 };
            auto R40 = py_8[ 0 ];
            SimdVec<TF,2> R41{ R38, R40 };
            SimdVec<TF,2> R42{ R33, R36 };
            auto R43 = R42 - R41;
            auto R44 = R21 * R43;
            auto R45 = R42 + R44;
            auto R46 = R45[ 1 ];
            SimdVec<TF,1> R47{ R46 };
            SimdVec<TC,1> R48{ cut_i[num_cut] };
            auto R49 = pi_4[ 0 ];
            SimdVec<TC,1> R50{ R49 };
            auto R51 = px_5[ 0 ];
            SimdVec<TF,1> R52{ R51 };
            auto R53 = R45[ 0 ];
            SimdVec<TF,1> R54{ R53 };
            py_0 = R54;
            pi_0 = R48;
            px_2 = R52;
            pi_1 = R50;
            pi_5 = R48;
            py_5 = R47;
            py_1 = R39;
            py_4 = R37;
            px_0 = R35;
            px_5 = R32;
            px_1 = R25;
            py_2 = R23;
            pi_2 = R17;
            px_3 = R14;
            py_3 = R10;
            px_4 = R6;
            pi_3 = R4;
            pi_4 = R1;
            continue;
        }
        case_31: {
            nodes_size = 6;
            // mod=[4,0],0,1,2,3,[3,4], swith_cuts=0
            auto R0 = pi_3[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_4[ 0 ];
            auto R3 = pi_2[ 0 ];
            SimdVec<TC,1> R4{ R3 };
            auto R5 = px_3[ 0 ];
            SimdVec<TF,1> R6{ R5 };
            auto R7 = di_4[ 0 ];
            SimdVec<TF,2> R8{ R2, R5 };
            auto R9 = py_2[ 0 ];
            SimdVec<TF,1> R10{ R9 };
            auto R11 = di_3[ 0 ];
            SimdVec<TF,2> R12{ R7, R11 };
            auto R13 = px_2[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = di_0[ 0 ];
            SimdVec<TF,2> R16{ R15, R7 };
            auto R17 = R16 - R12;
            auto R18 = R12 / R17;
            auto R19 = pi_1[ 0 ];
            SimdVec<TC,1> R20{ R19 };
            auto R21 = px_0[ 0 ];
            SimdVec<TF,1> R22{ R21 };
            auto R23 = py_4[ 0 ];
            SimdVec<TF,2> R24{ R21, R2 };
            auto R25 = R8 - R24;
            auto R26 = R18 * R25;
            auto R27 = R8 + R26;
            auto R28 = R27[ 1 ];
            SimdVec<TF,1> R29{ R28 };
            auto R30 = py_3[ 0 ];
            SimdVec<TF,1> R31{ R30 };
            auto R32 = py_0[ 0 ];
            SimdVec<TF,1> R33{ R32 };
            SimdVec<TC,1> R34{ cut_i[num_cut] };
            auto R35 = pi_0[ 0 ];
            SimdVec<TC,1> R36{ R35 };
            auto R37 = px_1[ 0 ];
            SimdVec<TF,1> R38{ R37 };
            auto R39 = py_1[ 0 ];
            SimdVec<TF,1> R40{ R39 };
            auto R41 = R27[ 0 ];
            SimdVec<TF,1> R42{ R41 };
            SimdVec<TF,2> R43{ R23, R30 };
            SimdVec<TF,2> R44{ R32, R23 };
            auto R45 = R43 - R44;
            auto R46 = R18 * R45;
            auto R47 = R43 + R46;
            auto R48 = R47[ 1 ];
            SimdVec<TF,1> R49{ R48 };
            auto R50 = R47[ 0 ];
            SimdVec<TF,1> R51{ R50 };
            py_0 = R51;
            py_5 = R49;
            pi_0 = R34;
            px_0 = R42;
            py_2 = R40;
            px_2 = R38;
            pi_1 = R36;
            pi_5 = R34;
            py_1 = R33;
            py_4 = R31;
            px_5 = R29;
            px_1 = R22;
            pi_2 = R20;
            px_3 = R14;
            py_3 = R10;
            px_4 = R6;
            pi_3 = R4;
            pi_4 = R1;
            continue;
        }
        case_179: {
            nodes_size = 6;
            // mod=[4,5],5,6,7,8,[8,0], swith_cuts=1
            auto R0 = pi_8[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_0[ 0 ];
            auto R3 = pi_7[ 0 ];
            SimdVec<TC,1> R4{ R3 };
            auto R5 = px_5[ 0 ];
            SimdVec<TF,1> R6{ R5 };
            auto R7 = di_0[ 0 ];
            SimdVec<TF,2> R8{ R2, R5 };
            auto R9 = py_7[ 0 ];
            SimdVec<TF,1> R10{ R9 };
            auto R11 = di_5[ 0 ];
            SimdVec<TF,2> R12{ R7, R11 };
            auto R13 = px_7[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = di_8[ 0 ];
            auto R16 = pi_6[ 0 ];
            SimdVec<TC,1> R17{ R16 };
            auto R18 = di_4[ 0 ];
            SimdVec<TF,2> R19{ R15, R18 };
            auto R20 = R19 - R12;
            auto R21 = R12 / R20;
            auto R22 = py_6[ 0 ];
            SimdVec<TF,1> R23{ R22 };
            auto R24 = px_8[ 0 ];
            SimdVec<TF,1> R25{ R24 };
            auto R26 = px_4[ 0 ];
            SimdVec<TF,2> R27{ R24, R26 };
            auto R28 = R8 - R27;
            auto R29 = R21 * R28;
            auto R30 = R8 + R29;
            auto R31 = R30[ 0 ];
            SimdVec<TF,1> R32{ R31 };
            auto R33 = py_0[ 0 ];
            auto R34 = R30[ 1 ];
            SimdVec<TF,1> R35{ R34 };
            auto R36 = py_5[ 0 ];
            SimdVec<TF,1> R37{ R36 };
            auto R38 = py_8[ 0 ];
            SimdVec<TF,1> R39{ R38 };
            auto R40 = py_4[ 0 ];
            SimdVec<TF,2> R41{ R38, R40 };
            SimdVec<TF,2> R42{ R33, R36 };
            auto R43 = R42 - R41;
            auto R44 = R21 * R43;
            auto R45 = R42 + R44;
            auto R46 = R45[ 0 ];
            SimdVec<TF,1> R47{ R46 };
            SimdVec<TC,1> R48{ cut_i[num_cut] };
            auto R49 = pi_5[ 0 ];
            SimdVec<TC,1> R50{ R49 };
            auto R51 = px_6[ 0 ];
            SimdVec<TF,1> R52{ R51 };
            auto R53 = R45[ 1 ];
            SimdVec<TF,1> R54{ R53 };
            py_0 = R54;
            pi_0 = R48;
            px_2 = R52;
            pi_1 = R50;
            pi_5 = R48;
            py_5 = R47;
            py_4 = R39;
            py_1 = R37;
            px_0 = R35;
            px_5 = R32;
            px_4 = R25;
            py_2 = R23;
            pi_2 = R17;
            px_3 = R14;
            py_3 = R10;
            px_1 = R6;
            pi_3 = R4;
            pi_4 = R1;
            continue;
        }
        case_102: {
            nodes_size = 6;
            // mod=[6,0],0,1,2,3,[3,4], swith_cuts=1
            auto R0 = pi_3[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_3[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = px_6[ 0 ];
            SimdVec<TF,2> R5{ R2, R4 };
            auto R6 = pi_2[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = di_3[ 0 ];
            auto R9 = py_2[ 0 ];
            SimdVec<TF,1> R10{ R9 };
            auto R11 = di_6[ 0 ];
            SimdVec<TF,2> R12{ R8, R11 };
            auto R13 = px_2[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = di_4[ 0 ];
            auto R16 = pi_1[ 0 ];
            SimdVec<TC,1> R17{ R16 };
            auto R18 = di_0[ 0 ];
            SimdVec<TF,2> R19{ R15, R18 };
            auto R20 = R19 - R12;
            auto R21 = R12 / R20;
            auto R22 = py_1[ 0 ];
            SimdVec<TF,1> R23{ R22 };
            auto R24 = px_4[ 0 ];
            auto R25 = px_1[ 0 ];
            SimdVec<TF,1> R26{ R25 };
            auto R27 = px_0[ 0 ];
            SimdVec<TF,1> R28{ R27 };
            auto R29 = py_3[ 0 ];
            SimdVec<TF,1> R30{ R29 };
            auto R31 = py_6[ 0 ];
            SimdVec<TF,2> R32{ R29, R31 };
            SimdVec<TF,2> R33{ R24, R27 };
            auto R34 = R5 - R33;
            auto R35 = R21 * R34;
            auto R36 = R5 + R35;
            auto R37 = R36[ 0 ];
            SimdVec<TF,1> R38{ R37 };
            auto R39 = py_4[ 0 ];
            auto R40 = R36[ 1 ];
            SimdVec<TF,1> R41{ R40 };
            auto R42 = py_0[ 0 ];
            SimdVec<TF,1> R43{ R42 };
            SimdVec<TC,1> R44{ cut_i[num_cut] };
            auto R45 = pi_0[ 0 ];
            SimdVec<TC,1> R46{ R45 };
            SimdVec<TF,2> R47{ R39, R42 };
            auto R48 = R32 - R47;
            auto R49 = R21 * R48;
            auto R50 = R32 + R49;
            auto R51 = R50[ 0 ];
            SimdVec<TF,1> R52{ R51 };
            auto R53 = R50[ 1 ];
            SimdVec<TF,1> R54{ R53 };
            py_0 = R54;
            py_5 = R52;
            pi_0 = R44;
            pi_1 = R46;
            pi_5 = R44;
            py_1 = R43;
            px_0 = R41;
            px_5 = R38;
            py_4 = R30;
            px_1 = R28;
            px_2 = R26;
            py_2 = R23;
            pi_2 = R17;
            px_3 = R14;
            py_3 = R10;
            pi_3 = R7;
            px_4 = R3;
            pi_4 = R1;
            continue;
        }
        case_157: {
            nodes_size = 6;
            // mod=[7,0],0,1,2,3,[3,4], swith_cuts=1
            auto R0 = pi_3[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_3[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = px_7[ 0 ];
            SimdVec<TF,2> R5{ R2, R4 };
            auto R6 = pi_2[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = di_3[ 0 ];
            auto R9 = py_2[ 0 ];
            SimdVec<TF,1> R10{ R9 };
            auto R11 = di_7[ 0 ];
            SimdVec<TF,2> R12{ R8, R11 };
            auto R13 = px_2[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = di_4[ 0 ];
            auto R16 = pi_1[ 0 ];
            SimdVec<TC,1> R17{ R16 };
            auto R18 = di_0[ 0 ];
            SimdVec<TF,2> R19{ R15, R18 };
            auto R20 = R19 - R12;
            auto R21 = R12 / R20;
            auto R22 = py_1[ 0 ];
            SimdVec<TF,1> R23{ R22 };
            auto R24 = px_4[ 0 ];
            auto R25 = px_1[ 0 ];
            SimdVec<TF,1> R26{ R25 };
            auto R27 = px_0[ 0 ];
            SimdVec<TF,1> R28{ R27 };
            auto R29 = py_3[ 0 ];
            SimdVec<TF,1> R30{ R29 };
            auto R31 = py_7[ 0 ];
            SimdVec<TF,2> R32{ R29, R31 };
            SimdVec<TF,2> R33{ R24, R27 };
            auto R34 = R5 - R33;
            auto R35 = R21 * R34;
            auto R36 = R5 + R35;
            auto R37 = R36[ 0 ];
            SimdVec<TF,1> R38{ R37 };
            auto R39 = py_4[ 0 ];
            auto R40 = R36[ 1 ];
            SimdVec<TF,1> R41{ R40 };
            auto R42 = py_0[ 0 ];
            SimdVec<TF,1> R43{ R42 };
            SimdVec<TC,1> R44{ cut_i[num_cut] };
            auto R45 = pi_0[ 0 ];
            SimdVec<TC,1> R46{ R45 };
            SimdVec<TF,2> R47{ R39, R42 };
            auto R48 = R32 - R47;
            auto R49 = R21 * R48;
            auto R50 = R32 + R49;
            auto R51 = R50[ 0 ];
            SimdVec<TF,1> R52{ R51 };
            auto R53 = R50[ 1 ];
            SimdVec<TF,1> R54{ R53 };
            py_0 = R54;
            py_5 = R52;
            pi_0 = R44;
            pi_1 = R46;
            pi_5 = R44;
            py_1 = R43;
            px_0 = R41;
            px_5 = R38;
            py_4 = R30;
            px_1 = R28;
            px_2 = R26;
            py_2 = R23;
            pi_2 = R17;
            px_3 = R14;
            py_3 = R10;
            pi_3 = R7;
            px_4 = R3;
            pi_4 = R1;
            continue;
        }
        case_224: {
            nodes_size = 6;
            // mod=[8,0],0,1,2,3,[3,4], swith_cuts=1
            auto R0 = pi_3[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_4[ 0 ];
            auto R3 = pi_2[ 0 ];
            SimdVec<TC,1> R4{ R3 };
            auto R5 = px_8[ 0 ];
            SimdVec<TF,2> R6{ R2, R5 };
            auto R7 = py_2[ 0 ];
            SimdVec<TF,1> R8{ R7 };
            auto R9 = di_4[ 0 ];
            auto R10 = px_2[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = di_8[ 0 ];
            SimdVec<TF,2> R13{ R9, R12 };
            auto R14 = pi_1[ 0 ];
            SimdVec<TC,1> R15{ R14 };
            auto R16 = di_3[ 0 ];
            auto R17 = py_1[ 0 ];
            SimdVec<TF,1> R18{ R17 };
            auto R19 = di_0[ 0 ];
            SimdVec<TF,2> R20{ R16, R19 };
            auto R21 = R20 - R13;
            auto R22 = R13 / R21;
            auto R23 = px_1[ 0 ];
            SimdVec<TF,1> R24{ R23 };
            auto R25 = px_3[ 0 ];
            SimdVec<TF,1> R26{ R25 };
            auto R27 = px_0[ 0 ];
            SimdVec<TF,1> R28{ R27 };
            auto R29 = py_4[ 0 ];
            SimdVec<TF,2> R30{ R25, R27 };
            auto R31 = R6 - R30;
            auto R32 = R22 * R31;
            auto R33 = R6 + R32;
            auto R34 = R33[ 0 ];
            SimdVec<TF,1> R35{ R34 };
            auto R36 = py_8[ 0 ];
            SimdVec<TF,2> R37{ R29, R36 };
            auto R38 = R33[ 1 ];
            SimdVec<TF,1> R39{ R38 };
            auto R40 = py_3[ 0 ];
            SimdVec<TF,1> R41{ R40 };
            auto R42 = py_0[ 0 ];
            SimdVec<TF,1> R43{ R42 };
            SimdVec<TC,1> R44{ cut_i[num_cut] };
            auto R45 = pi_0[ 0 ];
            SimdVec<TC,1> R46{ R45 };
            SimdVec<TF,2> R47{ R40, R42 };
            auto R48 = R37 - R47;
            auto R49 = R22 * R48;
            auto R50 = R37 + R49;
            auto R51 = R50[ 0 ];
            SimdVec<TF,1> R52{ R51 };
            auto R53 = R50[ 1 ];
            SimdVec<TF,1> R54{ R53 };
            py_0 = R54;
            py_5 = R52;
            pi_0 = R44;
            pi_1 = R46;
            pi_5 = R44;
            py_1 = R43;
            py_4 = R41;
            px_0 = R39;
            px_5 = R35;
            px_1 = R28;
            px_4 = R26;
            px_2 = R24;
            py_2 = R18;
            pi_2 = R15;
            px_3 = R11;
            py_3 = R8;
            pi_3 = R4;
            pi_4 = R1;
            continue;
        }
        case_51: {
            nodes_size = 7;
            // mod=0,1,2,3,[3,4],[4,5],5, swith_cuts=1
            auto R0 = pi_5[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_0[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_0[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_0[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_1[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = py_1[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = pi_1[ 0 ];
            SimdVec<TC,1> R13{ R12 };
            auto R14 = px_2[ 0 ];
            SimdVec<TF,1> R15{ R14 };
            auto R16 = py_2[ 0 ];
            SimdVec<TF,1> R17{ R16 };
            auto R18 = pi_2[ 0 ];
            SimdVec<TC,1> R19{ R18 };
            auto R20 = px_3[ 0 ];
            SimdVec<TF,1> R21{ R20 };
            auto R22 = py_3[ 0 ];
            SimdVec<TF,1> R23{ R22 };
            auto R24 = pi_3[ 0 ];
            SimdVec<TC,1> R25{ R24 };
            auto R26 = px_4[ 0 ];
            SimdVec<TF,2> R27{ R26, R20 };
            SimdVec<TC,1> R28{ cut_i[num_cut] };
            auto R29 = di_4[ 0 ];
            auto R30 = di_3[ 0 ];
            SimdVec<TF,2> R31{ R29, R30 };
            auto R32 = py_5[ 0 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = di_5[ 0 ];
            SimdVec<TF,2> R35{ R34, R29 };
            auto R36 = R35 - R31;
            auto R37 = R31 / R36;
            auto R38 = py_4[ 0 ];
            SimdVec<TF,2> R39{ R32, R38 };
            SimdVec<TF,2> R40{ R38, R22 };
            auto R41 = R40 - R39;
            auto R42 = R37 * R41;
            auto R43 = R40 + R42;
            auto R44 = R43[ 0 ];
            SimdVec<TF,1> R45{ R44 };
            auto R46 = px_5[ 0 ];
            SimdVec<TF,1> R47{ R46 };
            auto R48 = R43[ 1 ];
            SimdVec<TF,1> R49{ R48 };
            SimdVec<TF,2> R50{ R46, R26 };
            auto R51 = R27 - R50;
            auto R52 = R37 * R51;
            auto R53 = R27 + R52;
            auto R54 = R53[ 0 ];
            SimdVec<TF,1> R55{ R54 };
            auto R56 = R53[ 1 ];
            SimdVec<TF,1> R57{ R56 };
            px_4 = R57;
            px_5 = R55;
            py_4 = R49;
            px_6 = R47;
            py_5 = R45;
            py_6 = R33;
            pi_4 = R28;
            pi_5 = R28;
            pi_3 = R25;
            py_3 = R23;
            px_3 = R21;
            pi_2 = R19;
            py_2 = R17;
            px_2 = R15;
            pi_1 = R13;
            py_1 = R11;
            px_1 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_6 = R1;
            continue;
        }
        case_47: {
            nodes_size = 7;
            // mod=0,1,2,[2,3],[3,4],4,5, swith_cuts=0
            auto R0 = pi_5[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_0[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_0[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_0[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_1[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = py_1[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = pi_1[ 0 ];
            SimdVec<TC,1> R13{ R12 };
            auto R14 = px_2[ 0 ];
            SimdVec<TF,1> R15{ R14 };
            auto R16 = py_2[ 0 ];
            SimdVec<TF,1> R17{ R16 };
            auto R18 = pi_2[ 0 ];
            SimdVec<TC,1> R19{ R18 };
            auto R20 = px_4[ 0 ];
            SimdVec<TF,1> R21{ R20 };
            auto R22 = di_2[ 0 ];
            SimdVec<TF,2> R23{ R14, R20 };
            auto R24 = py_5[ 0 ];
            SimdVec<TF,1> R25{ R24 };
            auto R26 = di_4[ 0 ];
            SimdVec<TF,2> R27{ R22, R26 };
            auto R28 = px_5[ 0 ];
            SimdVec<TF,1> R29{ R28 };
            auto R30 = di_3[ 0 ];
            SimdVec<TF,2> R31{ R30, R30 };
            auto R32 = R31 - R27;
            auto R33 = R27 / R32;
            auto R34 = pi_4[ 0 ];
            SimdVec<TC,1> R35{ R34 };
            auto R36 = px_3[ 0 ];
            SimdVec<TF,2> R37{ R36, R36 };
            auto R38 = R23 - R37;
            auto R39 = R33 * R38;
            auto R40 = R23 + R39;
            auto R41 = R40[ 1 ];
            SimdVec<TF,1> R42{ R41 };
            auto R43 = py_4[ 0 ];
            SimdVec<TF,1> R44{ R43 };
            auto R45 = py_3[ 0 ];
            SimdVec<TF,2> R46{ R45, R45 };
            SimdVec<TF,2> R47{ R16, R43 };
            auto R48 = R47 - R46;
            auto R49 = R33 * R48;
            auto R50 = R47 + R49;
            auto R51 = R50[ 1 ];
            SimdVec<TF,1> R52{ R51 };
            SimdVec<TC,1> R53{ cut_i[num_cut] };
            auto R54 = R40[ 0 ];
            SimdVec<TF,1> R55{ R54 };
            auto R56 = R50[ 0 ];
            SimdVec<TF,1> R57{ R56 };
            py_3 = R57;
            px_3 = R55;
            pi_3 = R53;
            pi_4 = R53;
            py_4 = R52;
            py_5 = R44;
            px_4 = R42;
            pi_5 = R35;
            px_6 = R29;
            py_6 = R25;
            px_5 = R21;
            pi_2 = R19;
            py_2 = R17;
            px_2 = R15;
            pi_1 = R13;
            py_1 = R11;
            px_1 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_6 = R1;
            continue;
        }
        case_148: {
            nodes_size = 7;
            // mod=1,2,3,4,5,[5,6],[0,1], swith_cuts=0
            SimdVec<TC,1> R0{ cut_i[num_cut] };
            auto R1 = px_1[ 0 ];
            SimdVec<TF,1> R2{ R1 };
            auto R3 = py_1[ 0 ];
            SimdVec<TF,1> R4{ R3 };
            auto R5 = pi_1[ 0 ];
            SimdVec<TC,1> R6{ R5 };
            auto R7 = px_2[ 0 ];
            SimdVec<TF,1> R8{ R7 };
            auto R9 = py_2[ 0 ];
            SimdVec<TF,1> R10{ R9 };
            auto R11 = pi_2[ 0 ];
            SimdVec<TC,1> R12{ R11 };
            auto R13 = px_3[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = py_3[ 0 ];
            SimdVec<TF,1> R16{ R15 };
            auto R17 = pi_3[ 0 ];
            SimdVec<TC,1> R18{ R17 };
            auto R19 = px_4[ 0 ];
            SimdVec<TF,1> R20{ R19 };
            auto R21 = py_4[ 0 ];
            SimdVec<TF,1> R22{ R21 };
            auto R23 = pi_4[ 0 ];
            SimdVec<TC,1> R24{ R23 };
            auto R25 = px_5[ 0 ];
            SimdVec<TF,1> R26{ R25 };
            auto R27 = py_5[ 0 ];
            SimdVec<TF,1> R28{ R27 };
            auto R29 = pi_5[ 0 ];
            SimdVec<TC,1> R30{ R29 };
            auto R31 = px_0[ 0 ];
            SimdVec<TF,2> R32{ R25, R31 };
            auto R33 = di_5[ 0 ];
            auto R34 = py_6[ 0 ];
            SimdVec<TF,2> R35{ R34, R3 };
            auto R36 = py_0[ 0 ];
            SimdVec<TF,2> R37{ R27, R36 };
            auto R38 = R37 - R35;
            auto R39 = px_6[ 0 ];
            SimdVec<TF,2> R40{ R39, R1 };
            auto R41 = R32 - R40;
            auto R42 = di_1[ 0 ];
            auto R43 = di_6[ 0 ];
            SimdVec<TF,2> R44{ R43, R42 };
            auto R45 = di_0[ 0 ];
            SimdVec<TF,2> R46{ R33, R45 };
            auto R47 = R44 - R46;
            auto R48 = R46 / R47;
            auto R49 = R48 * R38;
            auto R50 = R37 + R49;
            auto R51 = R50[ 1 ];
            SimdVec<TF,1> R52{ R51 };
            auto R53 = R48 * R41;
            auto R54 = R32 + R53;
            auto R55 = R54[ 1 ];
            SimdVec<TF,1> R56{ R55 };
            auto R57 = R50[ 0 ];
            SimdVec<TF,1> R58{ R57 };
            auto R59 = R54[ 0 ];
            SimdVec<TF,1> R60{ R59 };
            px_5 = R60;
            py_5 = R58;
            px_6 = R56;
            py_6 = R52;
            pi_5 = R0;
            pi_4 = R30;
            py_4 = R28;
            px_4 = R26;
            pi_3 = R24;
            py_3 = R22;
            px_3 = R20;
            pi_2 = R18;
            py_2 = R16;
            px_2 = R14;
            pi_1 = R12;
            py_1 = R10;
            px_1 = R8;
            pi_0 = R6;
            py_0 = R4;
            px_0 = R2;
            pi_6 = R0;
            continue;
        }
        case_135: {
            nodes_size = 7;
            // mod=1,2,3,[3,4],[6,7],7,0, swith_cuts=0
            auto R0 = pi_0[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_1[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_1[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_1[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_2[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = py_2[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = pi_2[ 0 ];
            SimdVec<TC,1> R13{ R12 };
            auto R14 = px_3[ 0 ];
            SimdVec<TF,1> R15{ R14 };
            auto R16 = py_3[ 0 ];
            SimdVec<TF,1> R17{ R16 };
            auto R18 = pi_3[ 0 ];
            SimdVec<TC,1> R19{ R18 };
            auto R20 = px_6[ 0 ];
            SimdVec<TF,2> R21{ R14, R20 };
            auto R22 = py_0[ 0 ];
            SimdVec<TF,1> R23{ R22 };
            auto R24 = di_3[ 0 ];
            auto R25 = px_0[ 0 ];
            SimdVec<TF,1> R26{ R25 };
            auto R27 = di_6[ 0 ];
            SimdVec<TF,2> R28{ R24, R27 };
            auto R29 = pi_7[ 0 ];
            SimdVec<TC,1> R30{ R29 };
            auto R31 = di_4[ 0 ];
            SimdVec<TC,1> R32{ cut_i[num_cut] };
            auto R33 = di_7[ 0 ];
            SimdVec<TF,2> R34{ R31, R33 };
            auto R35 = R34 - R28;
            auto R36 = R28 / R35;
            auto R37 = px_4[ 0 ];
            auto R38 = py_7[ 0 ];
            SimdVec<TF,1> R39{ R38 };
            auto R40 = px_7[ 0 ];
            SimdVec<TF,1> R41{ R40 };
            auto R42 = py_6[ 0 ];
            SimdVec<TF,2> R43{ R16, R42 };
            SimdVec<TF,2> R44{ R37, R40 };
            auto R45 = R21 - R44;
            auto R46 = R36 * R45;
            auto R47 = R21 + R46;
            auto R48 = R47[ 1 ];
            SimdVec<TF,1> R49{ R48 };
            auto R50 = py_4[ 0 ];
            SimdVec<TF,2> R51{ R50, R38 };
            auto R52 = R43 - R51;
            auto R53 = R36 * R52;
            auto R54 = R43 + R53;
            auto R55 = R54[ 1 ];
            SimdVec<TF,1> R56{ R55 };
            auto R57 = R47[ 0 ];
            SimdVec<TF,1> R58{ R57 };
            auto R59 = R54[ 0 ];
            SimdVec<TF,1> R60{ R59 };
            py_3 = R60;
            px_3 = R58;
            py_4 = R56;
            px_4 = R49;
            px_5 = R41;
            py_5 = R39;
            pi_3 = R32;
            pi_4 = R32;
            pi_5 = R30;
            px_6 = R26;
            py_6 = R23;
            pi_2 = R19;
            py_2 = R17;
            px_2 = R15;
            pi_1 = R13;
            py_1 = R11;
            px_1 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_6 = R1;
            continue;
        }
        case_196: {
            nodes_size = 7;
            // mod=1,2,3,[3,4],[7,8],8,0, swith_cuts=1
            auto R0 = pi_0[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_1[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_1[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_1[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_2[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = py_2[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = pi_2[ 0 ];
            SimdVec<TC,1> R13{ R12 };
            auto R14 = px_3[ 0 ];
            SimdVec<TF,1> R15{ R14 };
            auto R16 = py_3[ 0 ];
            SimdVec<TF,1> R17{ R16 };
            auto R18 = pi_3[ 0 ];
            SimdVec<TC,1> R19{ R18 };
            auto R20 = px_8[ 0 ];
            SimdVec<TF,1> R21{ R20 };
            auto R22 = di_8[ 0 ];
            SimdVec<TF,2> R23{ R20, R14 };
            auto R24 = py_0[ 0 ];
            SimdVec<TF,1> R25{ R24 };
            auto R26 = di_3[ 0 ];
            SimdVec<TF,2> R27{ R22, R26 };
            auto R28 = px_0[ 0 ];
            SimdVec<TF,1> R29{ R28 };
            auto R30 = di_7[ 0 ];
            auto R31 = pi_8[ 0 ];
            SimdVec<TC,1> R32{ R31 };
            auto R33 = di_4[ 0 ];
            SimdVec<TF,2> R34{ R30, R33 };
            auto R35 = R34 - R27;
            auto R36 = R27 / R35;
            SimdVec<TC,1> R37{ cut_i[num_cut] };
            auto R38 = px_7[ 0 ];
            auto R39 = px_4[ 0 ];
            SimdVec<TF,2> R40{ R38, R39 };
            auto R41 = R23 - R40;
            auto R42 = R36 * R41;
            auto R43 = R23 + R42;
            auto R44 = R43[ 0 ];
            SimdVec<TF,1> R45{ R44 };
            auto R46 = py_8[ 0 ];
            SimdVec<TF,1> R47{ R46 };
            auto R48 = py_7[ 0 ];
            SimdVec<TF,2> R49{ R46, R16 };
            auto R50 = R43[ 1 ];
            SimdVec<TF,1> R51{ R50 };
            auto R52 = py_4[ 0 ];
            SimdVec<TF,2> R53{ R48, R52 };
            auto R54 = R49 - R53;
            auto R55 = R36 * R54;
            auto R56 = R49 + R55;
            auto R57 = R56[ 0 ];
            SimdVec<TF,1> R58{ R57 };
            auto R59 = R56[ 1 ];
            SimdVec<TF,1> R60{ R59 };
            py_3 = R60;
            py_4 = R58;
            px_3 = R51;
            py_5 = R47;
            px_4 = R45;
            pi_3 = R37;
            pi_4 = R37;
            pi_5 = R32;
            px_6 = R29;
            py_6 = R25;
            px_5 = R21;
            pi_2 = R19;
            py_2 = R17;
            px_2 = R15;
            pi_1 = R13;
            py_1 = R11;
            px_1 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_6 = R1;
            continue;
        }
        case_189: {
            nodes_size = 7;
            // mod=1,2,[2,3],[6,7],7,8,0, swith_cuts=0
            auto R0 = pi_0[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_1[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_1[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_1[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_2[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = py_2[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = pi_2[ 0 ];
            SimdVec<TC,1> R13{ R12 };
            auto R14 = px_3[ 0 ];
            auto R15 = py_0[ 0 ];
            SimdVec<TF,1> R16{ R15 };
            auto R17 = px_7[ 0 ];
            SimdVec<TF,1> R18{ R17 };
            auto R19 = di_3[ 0 ];
            SimdVec<TF,2> R20{ R14, R17 };
            auto R21 = px_0[ 0 ];
            SimdVec<TF,1> R22{ R21 };
            auto R23 = di_7[ 0 ];
            SimdVec<TF,2> R24{ R19, R23 };
            auto R25 = pi_8[ 0 ];
            SimdVec<TC,1> R26{ R25 };
            auto R27 = di_2[ 0 ];
            auto R28 = py_8[ 0 ];
            SimdVec<TF,1> R29{ R28 };
            auto R30 = di_6[ 0 ];
            SimdVec<TF,2> R31{ R27, R30 };
            auto R32 = R31 - R24;
            auto R33 = R24 / R32;
            auto R34 = px_8[ 0 ];
            SimdVec<TF,1> R35{ R34 };
            auto R36 = px_6[ 0 ];
            SimdVec<TF,2> R37{ R8, R36 };
            auto R38 = R20 - R37;
            auto R39 = R33 * R38;
            auto R40 = R20 + R39;
            auto R41 = R40[ 1 ];
            SimdVec<TF,1> R42{ R41 };
            auto R43 = py_3[ 0 ];
            auto R44 = R40[ 0 ];
            SimdVec<TF,1> R45{ R44 };
            auto R46 = py_7[ 0 ];
            SimdVec<TF,1> R47{ R46 };
            auto R48 = py_6[ 0 ];
            SimdVec<TF,2> R49{ R10, R48 };
            SimdVec<TF,2> R50{ R43, R46 };
            auto R51 = R50 - R49;
            auto R52 = R33 * R51;
            auto R53 = R50 + R52;
            auto R54 = R53[ 1 ];
            SimdVec<TF,1> R55{ R54 };
            SimdVec<TC,1> R56{ cut_i[num_cut] };
            auto R57 = pi_7[ 0 ];
            SimdVec<TC,1> R58{ R57 };
            auto R59 = R53[ 0 ];
            SimdVec<TF,1> R60{ R59 };
            py_2 = R60;
            pi_2 = R56;
            pi_4 = R58;
            pi_3 = R56;
            py_3 = R55;
            py_4 = R47;
            px_2 = R45;
            px_3 = R42;
            px_5 = R35;
            py_5 = R29;
            pi_5 = R26;
            px_6 = R22;
            px_4 = R18;
            py_6 = R16;
            pi_1 = R13;
            py_1 = R11;
            px_1 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_6 = R1;
            continue;
        }
        case_44: {
            nodes_size = 7;
            // mod=1,[1,2],[2,3],3,4,5,0, swith_cuts=0
            auto R0 = pi_0[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_1[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_1[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_1[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_3[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = di_1[ 0 ];
            SimdVec<TF,2> R11{ R2, R8 };
            auto R12 = py_0[ 0 ];
            SimdVec<TF,1> R13{ R12 };
            auto R14 = di_3[ 0 ];
            SimdVec<TF,2> R15{ R10, R14 };
            auto R16 = px_0[ 0 ];
            SimdVec<TF,1> R17{ R16 };
            auto R18 = di_2[ 0 ];
            SimdVec<TF,2> R19{ R18, R18 };
            auto R20 = R19 - R15;
            auto R21 = R15 / R20;
            auto R22 = pi_5[ 0 ];
            SimdVec<TC,1> R23{ R22 };
            auto R24 = px_2[ 0 ];
            SimdVec<TF,2> R25{ R24, R24 };
            auto R26 = R11 - R25;
            auto R27 = R21 * R26;
            auto R28 = R11 + R27;
            auto R29 = R28[ 1 ];
            SimdVec<TF,1> R30{ R29 };
            auto R31 = py_3[ 0 ];
            SimdVec<TF,1> R32{ R31 };
            auto R33 = py_2[ 0 ];
            SimdVec<TF,2> R34{ R33, R33 };
            SimdVec<TF,2> R35{ R4, R31 };
            auto R36 = R35 - R34;
            auto R37 = R21 * R36;
            auto R38 = R35 + R37;
            auto R39 = R38[ 1 ];
            SimdVec<TF,1> R40{ R39 };
            SimdVec<TC,1> R41{ cut_i[num_cut] };
            auto R42 = pi_3[ 0 ];
            SimdVec<TC,1> R43{ R42 };
            auto R44 = px_4[ 0 ];
            SimdVec<TF,1> R45{ R44 };
            auto R46 = py_4[ 0 ];
            SimdVec<TF,1> R47{ R46 };
            auto R48 = pi_4[ 0 ];
            SimdVec<TC,1> R49{ R48 };
            auto R50 = px_5[ 0 ];
            SimdVec<TF,1> R51{ R50 };
            auto R52 = py_5[ 0 ];
            SimdVec<TF,1> R53{ R52 };
            auto R54 = R28[ 0 ];
            SimdVec<TF,1> R55{ R54 };
            auto R56 = R38[ 0 ];
            SimdVec<TF,1> R57{ R56 };
            py_1 = R57;
            px_1 = R55;
            pi_1 = R41;
            py_5 = R53;
            px_5 = R51;
            pi_4 = R49;
            py_4 = R47;
            px_4 = R45;
            pi_3 = R43;
            pi_2 = R41;
            py_2 = R40;
            py_3 = R32;
            px_2 = R30;
            pi_5 = R23;
            px_6 = R17;
            py_6 = R13;
            px_3 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_6 = R1;
            continue;
        }
        case_124: {
            nodes_size = 7;
            // mod=1,[1,2],[4,5],5,6,7,0, swith_cuts=0
            auto R0 = pi_0[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_1[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_1[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_1[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_4[ 0 ];
            SimdVec<TF,2> R9{ R2, R8 };
            auto R10 = py_0[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = di_1[ 0 ];
            auto R13 = px_0[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = di_4[ 0 ];
            SimdVec<TF,2> R16{ R12, R15 };
            auto R17 = pi_7[ 0 ];
            SimdVec<TC,1> R18{ R17 };
            auto R19 = di_2[ 0 ];
            auto R20 = py_7[ 0 ];
            SimdVec<TF,1> R21{ R20 };
            auto R22 = di_5[ 0 ];
            SimdVec<TF,2> R23{ R19, R22 };
            auto R24 = R23 - R16;
            auto R25 = R16 / R24;
            auto R26 = px_7[ 0 ];
            SimdVec<TF,1> R27{ R26 };
            auto R28 = px_2[ 0 ];
            auto R29 = pi_6[ 0 ];
            SimdVec<TC,1> R30{ R29 };
            auto R31 = px_5[ 0 ];
            SimdVec<TF,1> R32{ R31 };
            auto R33 = py_4[ 0 ];
            SimdVec<TF,2> R34{ R4, R33 };
            SimdVec<TF,2> R35{ R28, R31 };
            auto R36 = R9 - R35;
            auto R37 = R25 * R36;
            auto R38 = R9 + R37;
            auto R39 = R38[ 1 ];
            SimdVec<TF,1> R40{ R39 };
            auto R41 = py_2[ 0 ];
            auto R42 = R38[ 0 ];
            SimdVec<TF,1> R43{ R42 };
            auto R44 = py_5[ 0 ];
            SimdVec<TF,1> R45{ R44 };
            SimdVec<TC,1> R46{ cut_i[num_cut] };
            auto R47 = pi_5[ 0 ];
            SimdVec<TC,1> R48{ R47 };
            auto R49 = px_6[ 0 ];
            SimdVec<TF,1> R50{ R49 };
            auto R51 = py_6[ 0 ];
            SimdVec<TF,1> R52{ R51 };
            SimdVec<TF,2> R53{ R41, R44 };
            auto R54 = R34 - R53;
            auto R55 = R25 * R54;
            auto R56 = R34 + R55;
            auto R57 = R56[ 1 ];
            SimdVec<TF,1> R58{ R57 };
            auto R59 = R56[ 0 ];
            SimdVec<TF,1> R60{ R59 };
            py_1 = R60;
            py_2 = R58;
            pi_1 = R46;
            py_4 = R52;
            px_4 = R50;
            pi_3 = R48;
            pi_2 = R46;
            py_3 = R45;
            px_1 = R43;
            px_2 = R40;
            px_3 = R32;
            pi_4 = R30;
            px_5 = R27;
            py_5 = R21;
            pi_5 = R18;
            px_6 = R14;
            py_6 = R11;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_6 = R1;
            continue;
        }
        case_183: {
            nodes_size = 7;
            // mod=1,[1,2],[5,6],6,7,8,0, swith_cuts=1
            auto R0 = pi_0[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_1[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_1[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_1[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_6[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = di_6[ 0 ];
            SimdVec<TF,2> R11{ R8, R2 };
            auto R12 = py_0[ 0 ];
            SimdVec<TF,1> R13{ R12 };
            auto R14 = di_1[ 0 ];
            SimdVec<TF,2> R15{ R10, R14 };
            auto R16 = px_0[ 0 ];
            SimdVec<TF,1> R17{ R16 };
            auto R18 = di_5[ 0 ];
            auto R19 = pi_8[ 0 ];
            SimdVec<TC,1> R20{ R19 };
            auto R21 = di_2[ 0 ];
            SimdVec<TF,2> R22{ R18, R21 };
            auto R23 = R22 - R15;
            auto R24 = R15 / R23;
            auto R25 = py_8[ 0 ];
            SimdVec<TF,1> R26{ R25 };
            auto R27 = px_5[ 0 ];
            auto R28 = px_8[ 0 ];
            SimdVec<TF,1> R29{ R28 };
            auto R30 = px_2[ 0 ];
            SimdVec<TF,2> R31{ R27, R30 };
            auto R32 = R11 - R31;
            auto R33 = R24 * R32;
            auto R34 = R11 + R33;
            auto R35 = R34[ 0 ];
            SimdVec<TF,1> R36{ R35 };
            auto R37 = py_6[ 0 ];
            SimdVec<TF,1> R38{ R37 };
            auto R39 = py_5[ 0 ];
            SimdVec<TF,2> R40{ R37, R4 };
            auto R41 = R34[ 1 ];
            SimdVec<TF,1> R42{ R41 };
            auto R43 = py_2[ 0 ];
            SimdVec<TF,2> R44{ R39, R43 };
            auto R45 = R40 - R44;
            auto R46 = R24 * R45;
            auto R47 = R40 + R46;
            auto R48 = R47[ 0 ];
            SimdVec<TF,1> R49{ R48 };
            SimdVec<TC,1> R50{ cut_i[num_cut] };
            auto R51 = pi_6[ 0 ];
            SimdVec<TC,1> R52{ R51 };
            auto R53 = px_7[ 0 ];
            SimdVec<TF,1> R54{ R53 };
            auto R55 = py_7[ 0 ];
            SimdVec<TF,1> R56{ R55 };
            auto R57 = pi_7[ 0 ];
            SimdVec<TC,1> R58{ R57 };
            auto R59 = R47[ 1 ];
            SimdVec<TF,1> R60{ R59 };
            py_1 = R60;
            pi_1 = R50;
            pi_4 = R58;
            py_4 = R56;
            px_4 = R54;
            pi_3 = R52;
            pi_2 = R50;
            py_2 = R49;
            px_1 = R42;
            py_3 = R38;
            px_2 = R36;
            px_5 = R29;
            py_5 = R26;
            pi_5 = R20;
            px_6 = R17;
            py_6 = R13;
            px_3 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_6 = R1;
            continue;
        }
        case_42: {
            nodes_size = 7;
            // mod=3,4,5,0,[0,1],[1,2],2, swith_cuts=0
            auto R0 = pi_2[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_3[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_3[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_3[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_4[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = py_4[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = pi_4[ 0 ];
            SimdVec<TC,1> R13{ R12 };
            auto R14 = px_5[ 0 ];
            SimdVec<TF,1> R15{ R14 };
            auto R16 = py_5[ 0 ];
            SimdVec<TF,1> R17{ R16 };
            auto R18 = pi_5[ 0 ];
            SimdVec<TC,1> R19{ R18 };
            auto R20 = px_0[ 0 ];
            SimdVec<TF,1> R21{ R20 };
            auto R22 = py_0[ 0 ];
            SimdVec<TF,1> R23{ R22 };
            auto R24 = pi_0[ 0 ];
            SimdVec<TC,1> R25{ R24 };
            auto R26 = px_1[ 0 ];
            SimdVec<TF,2> R27{ R20, R26 };
            SimdVec<TC,1> R28{ cut_i[num_cut] };
            auto R29 = di_0[ 0 ];
            auto R30 = di_1[ 0 ];
            SimdVec<TF,2> R31{ R29, R30 };
            auto R32 = py_2[ 0 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = di_2[ 0 ];
            SimdVec<TF,2> R35{ R30, R34 };
            auto R36 = R35 - R31;
            auto R37 = R31 / R36;
            auto R38 = py_1[ 0 ];
            SimdVec<TF,2> R39{ R38, R32 };
            SimdVec<TF,2> R40{ R22, R38 };
            auto R41 = R40 - R39;
            auto R42 = R37 * R41;
            auto R43 = R40 + R42;
            auto R44 = R43[ 1 ];
            SimdVec<TF,1> R45{ R44 };
            auto R46 = px_2[ 0 ];
            SimdVec<TF,1> R47{ R46 };
            auto R48 = R43[ 0 ];
            SimdVec<TF,1> R49{ R48 };
            SimdVec<TF,2> R50{ R26, R46 };
            auto R51 = R27 - R50;
            auto R52 = R37 * R51;
            auto R53 = R27 + R52;
            auto R54 = R53[ 1 ];
            SimdVec<TF,1> R55{ R54 };
            auto R56 = R53[ 0 ];
            SimdVec<TF,1> R57{ R56 };
            px_4 = R57;
            px_5 = R55;
            py_4 = R49;
            px_6 = R47;
            py_5 = R45;
            py_6 = R33;
            pi_4 = R28;
            pi_5 = R28;
            pi_3 = R25;
            py_3 = R23;
            px_3 = R21;
            pi_2 = R19;
            py_2 = R17;
            px_2 = R15;
            pi_1 = R13;
            py_1 = R11;
            px_1 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_6 = R1;
            continue;
        }
        case_129: {
            nodes_size = 7;
            // mod=7,0,1,2,[2,3],[5,6],6, swith_cuts=0
            auto R0 = pi_6[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_7[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_7[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_7[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_0[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = py_0[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = pi_0[ 0 ];
            SimdVec<TC,1> R13{ R12 };
            auto R14 = px_1[ 0 ];
            SimdVec<TF,1> R15{ R14 };
            auto R16 = py_1[ 0 ];
            SimdVec<TF,1> R17{ R16 };
            auto R18 = pi_1[ 0 ];
            SimdVec<TC,1> R19{ R18 };
            auto R20 = px_2[ 0 ];
            SimdVec<TF,1> R21{ R20 };
            auto R22 = py_2[ 0 ];
            SimdVec<TF,1> R23{ R22 };
            auto R24 = pi_2[ 0 ];
            SimdVec<TC,1> R25{ R24 };
            auto R26 = px_3[ 0 ];
            SimdVec<TC,1> R27{ cut_i[num_cut] };
            auto R28 = px_5[ 0 ];
            SimdVec<TF,2> R29{ R26, R28 };
            auto R30 = di_3[ 0 ];
            auto R31 = py_6[ 0 ];
            SimdVec<TF,1> R32{ R31 };
            auto R33 = di_5[ 0 ];
            SimdVec<TF,2> R34{ R30, R33 };
            SimdVec<TF,2> R35{ R22, R31 };
            auto R36 = py_5[ 0 ];
            auto R37 = py_3[ 0 ];
            SimdVec<TF,2> R38{ R37, R36 };
            auto R39 = R38 - R35;
            auto R40 = px_6[ 0 ];
            SimdVec<TF,1> R41{ R40 };
            auto R42 = di_2[ 0 ];
            SimdVec<TF,2> R43{ R20, R40 };
            auto R44 = R29 - R43;
            auto R45 = di_6[ 0 ];
            SimdVec<TF,2> R46{ R42, R45 };
            auto R47 = R46 - R34;
            auto R48 = R34 / R47;
            auto R49 = R48 * R39;
            auto R50 = R38 + R49;
            auto R51 = R50[ 1 ];
            SimdVec<TF,1> R52{ R51 };
            auto R53 = R48 * R44;
            auto R54 = R29 + R53;
            auto R55 = R54[ 1 ];
            SimdVec<TF,1> R56{ R55 };
            auto R57 = R50[ 0 ];
            SimdVec<TF,1> R58{ R57 };
            auto R59 = R54[ 0 ];
            SimdVec<TF,1> R60{ R59 };
            px_4 = R60;
            py_4 = R58;
            px_5 = R56;
            py_5 = R52;
            px_6 = R41;
            py_6 = R32;
            pi_4 = R27;
            pi_5 = R27;
            pi_3 = R25;
            py_3 = R23;
            px_3 = R21;
            pi_2 = R19;
            py_2 = R17;
            px_2 = R15;
            pi_1 = R13;
            py_1 = R11;
            px_1 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_6 = R1;
            continue;
        }
        case_41: {
            nodes_size = 7;
            // mod=[0,1],1,2,3,4,5,[5,0], swith_cuts=1
            auto R0 = pi_5[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_5[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = px_0[ 0 ];
            SimdVec<TF,2> R5{ R2, R4 };
            auto R6 = pi_4[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = di_5[ 0 ];
            auto R9 = py_4[ 0 ];
            SimdVec<TF,1> R10{ R9 };
            auto R11 = di_0[ 0 ];
            SimdVec<TF,2> R12{ R8, R11 };
            auto R13 = px_4[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = di_1[ 0 ];
            SimdVec<TF,2> R16{ R11, R15 };
            auto R17 = R16 - R12;
            auto R18 = R12 / R17;
            auto R19 = pi_3[ 0 ];
            SimdVec<TC,1> R20{ R19 };
            auto R21 = px_1[ 0 ];
            SimdVec<TF,1> R22{ R21 };
            auto R23 = py_5[ 0 ];
            SimdVec<TF,1> R24{ R23 };
            auto R25 = py_0[ 0 ];
            SimdVec<TF,2> R26{ R23, R25 };
            SimdVec<TF,2> R27{ R4, R21 };
            auto R28 = R5 - R27;
            auto R29 = R18 * R28;
            auto R30 = R5 + R29;
            auto R31 = R30[ 0 ];
            SimdVec<TF,1> R32{ R31 };
            auto R33 = py_1[ 0 ];
            SimdVec<TF,1> R34{ R33 };
            SimdVec<TC,1> R35{ cut_i[num_cut] };
            auto R36 = pi_1[ 0 ];
            SimdVec<TC,1> R37{ R36 };
            auto R38 = px_2[ 0 ];
            SimdVec<TF,1> R39{ R38 };
            auto R40 = py_2[ 0 ];
            SimdVec<TF,1> R41{ R40 };
            auto R42 = pi_2[ 0 ];
            SimdVec<TC,1> R43{ R42 };
            auto R44 = px_3[ 0 ];
            SimdVec<TF,1> R45{ R44 };
            auto R46 = py_3[ 0 ];
            SimdVec<TF,1> R47{ R46 };
            auto R48 = R30[ 1 ];
            SimdVec<TF,1> R49{ R48 };
            SimdVec<TF,2> R50{ R25, R33 };
            auto R51 = R26 - R50;
            auto R52 = R18 * R51;
            auto R53 = R26 + R52;
            auto R54 = R53[ 0 ];
            SimdVec<TF,1> R55{ R54 };
            auto R56 = R53[ 1 ];
            SimdVec<TF,1> R57{ R56 };
            py_0 = R57;
            py_6 = R55;
            pi_0 = R35;
            px_0 = R49;
            py_3 = R47;
            px_3 = R45;
            pi_2 = R43;
            py_2 = R41;
            px_2 = R39;
            pi_1 = R37;
            pi_6 = R35;
            py_1 = R34;
            px_6 = R32;
            py_5 = R24;
            px_1 = R22;
            pi_3 = R20;
            px_4 = R14;
            py_4 = R10;
            pi_4 = R7;
            px_5 = R3;
            pi_5 = R1;
            continue;
        }
        case_216: {
            nodes_size = 7;
            // mod=[0,1],1,2,3,4,5,[5,6], swith_cuts=1
            auto R0 = pi_5[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_6[ 0 ];
            auto R3 = pi_4[ 0 ];
            SimdVec<TC,1> R4{ R3 };
            auto R5 = px_1[ 0 ];
            SimdVec<TF,1> R6{ R5 };
            auto R7 = di_6[ 0 ];
            SimdVec<TF,2> R8{ R2, R5 };
            auto R9 = py_4[ 0 ];
            SimdVec<TF,1> R10{ R9 };
            auto R11 = di_1[ 0 ];
            SimdVec<TF,2> R12{ R7, R11 };
            auto R13 = px_4[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = di_5[ 0 ];
            auto R16 = pi_3[ 0 ];
            SimdVec<TC,1> R17{ R16 };
            auto R18 = di_0[ 0 ];
            SimdVec<TF,2> R19{ R15, R18 };
            auto R20 = R19 - R12;
            auto R21 = R12 / R20;
            auto R22 = py_3[ 0 ];
            SimdVec<TF,1> R23{ R22 };
            auto R24 = px_5[ 0 ];
            SimdVec<TF,1> R25{ R24 };
            auto R26 = px_0[ 0 ];
            SimdVec<TF,2> R27{ R24, R26 };
            auto R28 = R8 - R27;
            auto R29 = R21 * R28;
            auto R30 = R8 + R29;
            auto R31 = R30[ 0 ];
            SimdVec<TF,1> R32{ R31 };
            auto R33 = py_6[ 0 ];
            auto R34 = R30[ 1 ];
            SimdVec<TF,1> R35{ R34 };
            auto R36 = py_1[ 0 ];
            SimdVec<TF,1> R37{ R36 };
            auto R38 = py_5[ 0 ];
            SimdVec<TF,1> R39{ R38 };
            auto R40 = py_0[ 0 ];
            SimdVec<TF,2> R41{ R38, R40 };
            SimdVec<TF,2> R42{ R33, R36 };
            auto R43 = R42 - R41;
            auto R44 = R21 * R43;
            auto R45 = R42 + R44;
            auto R46 = R45[ 0 ];
            SimdVec<TF,1> R47{ R46 };
            SimdVec<TC,1> R48{ cut_i[num_cut] };
            auto R49 = pi_1[ 0 ];
            SimdVec<TC,1> R50{ R49 };
            auto R51 = px_2[ 0 ];
            SimdVec<TF,1> R52{ R51 };
            auto R53 = py_2[ 0 ];
            SimdVec<TF,1> R54{ R53 };
            auto R55 = pi_2[ 0 ];
            SimdVec<TC,1> R56{ R55 };
            auto R57 = px_3[ 0 ];
            SimdVec<TF,1> R58{ R57 };
            auto R59 = R45[ 1 ];
            SimdVec<TF,1> R60{ R59 };
            py_0 = R60;
            pi_0 = R48;
            px_3 = R58;
            pi_2 = R56;
            py_2 = R54;
            px_2 = R52;
            pi_1 = R50;
            pi_6 = R48;
            py_6 = R47;
            py_5 = R39;
            py_1 = R37;
            px_0 = R35;
            px_6 = R32;
            px_5 = R25;
            py_3 = R23;
            pi_3 = R17;
            px_4 = R14;
            py_4 = R10;
            px_1 = R6;
            pi_4 = R4;
            pi_5 = R1;
            continue;
        }
        case_120: {
            nodes_size = 7;
            // mod=[0,1],[3,4],4,5,6,7,0, swith_cuts=1
            auto R0 = pi_0[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_3[ 0 ];
            auto R3 = pi_7[ 0 ];
            SimdVec<TC,1> R4{ R3 };
            auto R5 = px_0[ 0 ];
            SimdVec<TF,1> R6{ R5 };
            auto R7 = di_3[ 0 ];
            SimdVec<TF,2> R8{ R2, R5 };
            auto R9 = py_7[ 0 ];
            SimdVec<TF,1> R10{ R9 };
            auto R11 = di_0[ 0 ];
            SimdVec<TF,2> R12{ R7, R11 };
            auto R13 = px_7[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = di_4[ 0 ];
            auto R16 = pi_6[ 0 ];
            SimdVec<TC,1> R17{ R16 };
            auto R18 = di_1[ 0 ];
            SimdVec<TF,2> R19{ R15, R18 };
            auto R20 = R19 - R12;
            auto R21 = R12 / R20;
            auto R22 = py_6[ 0 ];
            SimdVec<TF,1> R23{ R22 };
            auto R24 = px_4[ 0 ];
            SimdVec<TF,1> R25{ R24 };
            auto R26 = px_1[ 0 ];
            SimdVec<TF,2> R27{ R24, R26 };
            auto R28 = R8 - R27;
            auto R29 = R21 * R28;
            auto R30 = R8 + R29;
            auto R31 = R30[ 0 ];
            SimdVec<TF,1> R32{ R31 };
            auto R33 = py_3[ 0 ];
            auto R34 = R30[ 1 ];
            SimdVec<TF,1> R35{ R34 };
            auto R36 = py_0[ 0 ];
            SimdVec<TF,1> R37{ R36 };
            auto R38 = py_4[ 0 ];
            SimdVec<TF,1> R39{ R38 };
            auto R40 = py_1[ 0 ];
            SimdVec<TF,2> R41{ R38, R40 };
            SimdVec<TF,2> R42{ R33, R36 };
            auto R43 = R42 - R41;
            auto R44 = R21 * R43;
            auto R45 = R42 + R44;
            auto R46 = R45[ 0 ];
            SimdVec<TF,1> R47{ R46 };
            SimdVec<TC,1> R48{ cut_i[num_cut] };
            auto R49 = pi_4[ 0 ];
            SimdVec<TC,1> R50{ R49 };
            auto R51 = px_5[ 0 ];
            SimdVec<TF,1> R52{ R51 };
            auto R53 = py_5[ 0 ];
            SimdVec<TF,1> R54{ R53 };
            auto R55 = pi_5[ 0 ];
            SimdVec<TC,1> R56{ R55 };
            auto R57 = px_6[ 0 ];
            SimdVec<TF,1> R58{ R57 };
            auto R59 = R45[ 1 ];
            SimdVec<TF,1> R60{ R59 };
            py_0 = R60;
            pi_0 = R48;
            px_4 = R58;
            pi_3 = R56;
            py_3 = R54;
            px_3 = R52;
            pi_2 = R50;
            pi_1 = R48;
            py_1 = R47;
            py_2 = R39;
            py_6 = R37;
            px_0 = R35;
            px_1 = R32;
            px_2 = R25;
            py_4 = R23;
            pi_4 = R17;
            px_5 = R14;
            py_5 = R10;
            px_6 = R6;
            pi_5 = R4;
            pi_6 = R1;
            continue;
        }
        case_178: {
            nodes_size = 7;
            // mod=[0,1],[4,5],5,6,7,8,0, swith_cuts=0
            auto R0 = pi_0[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_0[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = px_4[ 0 ];
            SimdVec<TF,2> R5{ R2, R4 };
            auto R6 = pi_8[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = di_0[ 0 ];
            auto R9 = py_8[ 0 ];
            SimdVec<TF,1> R10{ R9 };
            auto R11 = di_4[ 0 ];
            SimdVec<TF,2> R12{ R8, R11 };
            auto R13 = px_8[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = di_1[ 0 ];
            auto R16 = pi_7[ 0 ];
            SimdVec<TC,1> R17{ R16 };
            auto R18 = di_5[ 0 ];
            SimdVec<TF,2> R19{ R15, R18 };
            auto R20 = R19 - R12;
            auto R21 = R12 / R20;
            auto R22 = py_7[ 0 ];
            SimdVec<TF,1> R23{ R22 };
            auto R24 = px_1[ 0 ];
            auto R25 = px_7[ 0 ];
            SimdVec<TF,1> R26{ R25 };
            auto R27 = px_5[ 0 ];
            SimdVec<TF,1> R28{ R27 };
            auto R29 = py_0[ 0 ];
            SimdVec<TF,1> R30{ R29 };
            auto R31 = py_4[ 0 ];
            SimdVec<TF,2> R32{ R29, R31 };
            SimdVec<TF,2> R33{ R24, R27 };
            auto R34 = R5 - R33;
            auto R35 = R21 * R34;
            auto R36 = R5 + R35;
            auto R37 = R36[ 1 ];
            SimdVec<TF,1> R38{ R37 };
            auto R39 = py_1[ 0 ];
            auto R40 = R36[ 0 ];
            SimdVec<TF,1> R41{ R40 };
            auto R42 = py_5[ 0 ];
            SimdVec<TF,1> R43{ R42 };
            SimdVec<TC,1> R44{ cut_i[num_cut] };
            auto R45 = pi_5[ 0 ];
            SimdVec<TC,1> R46{ R45 };
            auto R47 = px_6[ 0 ];
            SimdVec<TF,1> R48{ R47 };
            auto R49 = py_6[ 0 ];
            SimdVec<TF,1> R50{ R49 };
            auto R51 = pi_6[ 0 ];
            SimdVec<TC,1> R52{ R51 };
            SimdVec<TF,2> R53{ R39, R42 };
            auto R54 = R32 - R53;
            auto R55 = R21 * R54;
            auto R56 = R32 + R55;
            auto R57 = R56[ 1 ];
            SimdVec<TF,1> R58{ R57 };
            auto R59 = R56[ 0 ];
            SimdVec<TF,1> R60{ R59 };
            py_0 = R60;
            py_1 = R58;
            pi_0 = R44;
            pi_3 = R52;
            py_3 = R50;
            px_3 = R48;
            pi_2 = R46;
            pi_1 = R44;
            py_2 = R43;
            px_0 = R41;
            px_1 = R38;
            py_6 = R30;
            px_2 = R28;
            px_4 = R26;
            py_4 = R23;
            pi_4 = R17;
            px_5 = R14;
            py_5 = R10;
            pi_5 = R7;
            px_6 = R3;
            pi_6 = R1;
            continue;
        }
        case_142: {
            nodes_size = 7;
            // mod=[1,2],2,3,4,5,6,[6,7], swith_cuts=0
            auto R0 = pi_6[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_2[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = px_6[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = di_2[ 0 ];
            SimdVec<TF,2> R7{ R2, R4 };
            auto R8 = pi_5[ 0 ];
            SimdVec<TC,1> R9{ R8 };
            auto R10 = di_6[ 0 ];
            SimdVec<TF,2> R11{ R6, R10 };
            auto R12 = py_5[ 0 ];
            SimdVec<TF,1> R13{ R12 };
            auto R14 = di_1[ 0 ];
            auto R15 = px_5[ 0 ];
            SimdVec<TF,1> R16{ R15 };
            auto R17 = di_7[ 0 ];
            SimdVec<TF,2> R18{ R14, R17 };
            auto R19 = R18 - R11;
            auto R20 = R11 / R19;
            auto R21 = pi_4[ 0 ];
            SimdVec<TC,1> R22{ R21 };
            auto R23 = px_1[ 0 ];
            auto R24 = py_4[ 0 ];
            SimdVec<TF,1> R25{ R24 };
            auto R26 = px_7[ 0 ];
            SimdVec<TF,2> R27{ R23, R26 };
            auto R28 = R7 - R27;
            auto R29 = R20 * R28;
            auto R30 = R7 + R29;
            auto R31 = R30[ 1 ];
            SimdVec<TF,1> R32{ R31 };
            auto R33 = py_2[ 0 ];
            SimdVec<TF,1> R34{ R33 };
            auto R35 = py_6[ 0 ];
            SimdVec<TF,1> R36{ R35 };
            auto R37 = py_1[ 0 ];
            SimdVec<TF,2> R38{ R33, R35 };
            auto R39 = R30[ 0 ];
            SimdVec<TF,1> R40{ R39 };
            auto R41 = py_7[ 0 ];
            SimdVec<TF,2> R42{ R37, R41 };
            auto R43 = R38 - R42;
            auto R44 = R20 * R43;
            auto R45 = R38 + R44;
            auto R46 = R45[ 1 ];
            SimdVec<TF,1> R47{ R46 };
            SimdVec<TC,1> R48{ cut_i[num_cut] };
            auto R49 = pi_2[ 0 ];
            SimdVec<TC,1> R50{ R49 };
            auto R51 = px_3[ 0 ];
            SimdVec<TF,1> R52{ R51 };
            auto R53 = py_3[ 0 ];
            SimdVec<TF,1> R54{ R53 };
            auto R55 = pi_3[ 0 ];
            SimdVec<TC,1> R56{ R55 };
            auto R57 = px_4[ 0 ];
            SimdVec<TF,1> R58{ R57 };
            auto R59 = R45[ 0 ];
            SimdVec<TF,1> R60{ R59 };
            py_0 = R60;
            pi_0 = R48;
            px_3 = R58;
            pi_2 = R56;
            py_2 = R54;
            px_2 = R52;
            pi_1 = R50;
            pi_6 = R48;
            py_6 = R47;
            px_0 = R40;
            py_5 = R36;
            py_1 = R34;
            px_6 = R32;
            py_3 = R25;
            pi_3 = R22;
            px_4 = R16;
            py_4 = R13;
            pi_4 = R9;
            px_5 = R5;
            px_1 = R3;
            pi_5 = R1;
            continue;
        }
        case_211: {
            nodes_size = 7;
            // mod=[1,2],2,3,4,5,6,[6,7], swith_cuts=1
            auto R0 = pi_6[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_7[ 0 ];
            auto R3 = pi_5[ 0 ];
            SimdVec<TC,1> R4{ R3 };
            auto R5 = px_2[ 0 ];
            SimdVec<TF,1> R6{ R5 };
            auto R7 = di_7[ 0 ];
            SimdVec<TF,2> R8{ R2, R5 };
            auto R9 = py_5[ 0 ];
            SimdVec<TF,1> R10{ R9 };
            auto R11 = di_2[ 0 ];
            SimdVec<TF,2> R12{ R7, R11 };
            auto R13 = px_5[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = di_6[ 0 ];
            auto R16 = pi_4[ 0 ];
            SimdVec<TC,1> R17{ R16 };
            auto R18 = di_1[ 0 ];
            SimdVec<TF,2> R19{ R15, R18 };
            auto R20 = R19 - R12;
            auto R21 = R12 / R20;
            auto R22 = py_4[ 0 ];
            SimdVec<TF,1> R23{ R22 };
            auto R24 = px_6[ 0 ];
            SimdVec<TF,1> R25{ R24 };
            auto R26 = px_1[ 0 ];
            SimdVec<TF,2> R27{ R24, R26 };
            auto R28 = R8 - R27;
            auto R29 = R21 * R28;
            auto R30 = R8 + R29;
            auto R31 = R30[ 0 ];
            SimdVec<TF,1> R32{ R31 };
            auto R33 = py_7[ 0 ];
            auto R34 = R30[ 1 ];
            SimdVec<TF,1> R35{ R34 };
            auto R36 = py_2[ 0 ];
            SimdVec<TF,1> R37{ R36 };
            auto R38 = py_6[ 0 ];
            SimdVec<TF,1> R39{ R38 };
            auto R40 = py_1[ 0 ];
            SimdVec<TF,2> R41{ R38, R40 };
            SimdVec<TF,2> R42{ R33, R36 };
            auto R43 = R42 - R41;
            auto R44 = R21 * R43;
            auto R45 = R42 + R44;
            auto R46 = R45[ 0 ];
            SimdVec<TF,1> R47{ R46 };
            SimdVec<TC,1> R48{ cut_i[num_cut] };
            auto R49 = pi_2[ 0 ];
            SimdVec<TC,1> R50{ R49 };
            auto R51 = px_3[ 0 ];
            SimdVec<TF,1> R52{ R51 };
            auto R53 = py_3[ 0 ];
            SimdVec<TF,1> R54{ R53 };
            auto R55 = pi_3[ 0 ];
            SimdVec<TC,1> R56{ R55 };
            auto R57 = px_4[ 0 ];
            SimdVec<TF,1> R58{ R57 };
            auto R59 = R45[ 1 ];
            SimdVec<TF,1> R60{ R59 };
            py_0 = R60;
            pi_0 = R48;
            px_3 = R58;
            pi_2 = R56;
            py_2 = R54;
            px_2 = R52;
            pi_1 = R50;
            pi_6 = R48;
            py_6 = R47;
            py_5 = R39;
            py_1 = R37;
            px_0 = R35;
            px_6 = R32;
            px_5 = R25;
            py_3 = R23;
            pi_3 = R17;
            px_4 = R14;
            py_4 = R10;
            px_1 = R6;
            pi_4 = R4;
            pi_5 = R1;
            continue;
        }
        case_117: {
            nodes_size = 7;
            // mod=[2,3],3,4,5,6,7,[7,0], swith_cuts=0
            auto R0 = pi_7[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_3[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = px_0[ 0 ];
            SimdVec<TF,2> R5{ R2, R4 };
            auto R6 = pi_6[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = di_3[ 0 ];
            auto R9 = py_6[ 0 ];
            SimdVec<TF,1> R10{ R9 };
            auto R11 = di_0[ 0 ];
            SimdVec<TF,2> R12{ R8, R11 };
            auto R13 = px_6[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = di_2[ 0 ];
            auto R16 = pi_5[ 0 ];
            SimdVec<TC,1> R17{ R16 };
            auto R18 = di_7[ 0 ];
            SimdVec<TF,2> R19{ R15, R18 };
            auto R20 = R19 - R12;
            auto R21 = R12 / R20;
            auto R22 = py_5[ 0 ];
            SimdVec<TF,1> R23{ R22 };
            auto R24 = px_2[ 0 ];
            auto R25 = px_5[ 0 ];
            SimdVec<TF,1> R26{ R25 };
            auto R27 = px_7[ 0 ];
            SimdVec<TF,1> R28{ R27 };
            auto R29 = py_3[ 0 ];
            SimdVec<TF,1> R30{ R29 };
            auto R31 = py_0[ 0 ];
            SimdVec<TF,2> R32{ R29, R31 };
            SimdVec<TF,2> R33{ R24, R27 };
            auto R34 = R5 - R33;
            auto R35 = R21 * R34;
            auto R36 = R5 + R35;
            auto R37 = R36[ 1 ];
            SimdVec<TF,1> R38{ R37 };
            auto R39 = py_2[ 0 ];
            auto R40 = R36[ 0 ];
            SimdVec<TF,1> R41{ R40 };
            auto R42 = py_7[ 0 ];
            SimdVec<TF,1> R43{ R42 };
            SimdVec<TC,1> R44{ cut_i[num_cut] };
            auto R45 = pi_3[ 0 ];
            SimdVec<TC,1> R46{ R45 };
            auto R47 = px_4[ 0 ];
            SimdVec<TF,1> R48{ R47 };
            auto R49 = py_4[ 0 ];
            SimdVec<TF,1> R50{ R49 };
            auto R51 = pi_4[ 0 ];
            SimdVec<TC,1> R52{ R51 };
            SimdVec<TF,2> R53{ R39, R42 };
            auto R54 = R32 - R53;
            auto R55 = R21 * R54;
            auto R56 = R32 + R55;
            auto R57 = R56[ 1 ];
            SimdVec<TF,1> R58{ R57 };
            auto R59 = R56[ 0 ];
            SimdVec<TF,1> R60{ R59 };
            py_0 = R60;
            py_6 = R58;
            pi_0 = R44;
            pi_2 = R52;
            py_2 = R50;
            px_2 = R48;
            pi_1 = R46;
            pi_6 = R44;
            py_5 = R43;
            px_0 = R41;
            px_6 = R38;
            py_1 = R30;
            px_5 = R28;
            px_3 = R26;
            py_3 = R23;
            pi_3 = R17;
            px_4 = R14;
            py_4 = R10;
            pi_4 = R7;
            px_1 = R3;
            pi_5 = R1;
            continue;
        }
        case_204: {
            nodes_size = 7;
            // mod=[2,3],3,4,5,6,7,[7,8], swith_cuts=0
            auto R0 = pi_7[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_2[ 0 ];
            auto R3 = pi_6[ 0 ];
            SimdVec<TC,1> R4{ R3 };
            auto R5 = px_7[ 0 ];
            SimdVec<TF,1> R6{ R5 };
            auto R7 = di_2[ 0 ];
            SimdVec<TF,2> R8{ R2, R5 };
            auto R9 = py_6[ 0 ];
            SimdVec<TF,1> R10{ R9 };
            auto R11 = di_7[ 0 ];
            SimdVec<TF,2> R12{ R7, R11 };
            auto R13 = px_6[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = di_3[ 0 ];
            auto R16 = pi_5[ 0 ];
            SimdVec<TC,1> R17{ R16 };
            auto R18 = di_8[ 0 ];
            SimdVec<TF,2> R19{ R15, R18 };
            auto R20 = R19 - R12;
            auto R21 = R12 / R20;
            auto R22 = py_5[ 0 ];
            SimdVec<TF,1> R23{ R22 };
            auto R24 = px_3[ 0 ];
            SimdVec<TF,1> R25{ R24 };
            auto R26 = px_8[ 0 ];
            SimdVec<TF,2> R27{ R24, R26 };
            auto R28 = R8 - R27;
            auto R29 = R21 * R28;
            auto R30 = R8 + R29;
            auto R31 = R30[ 1 ];
            SimdVec<TF,1> R32{ R31 };
            auto R33 = py_2[ 0 ];
            auto R34 = R30[ 0 ];
            SimdVec<TF,1> R35{ R34 };
            auto R36 = py_7[ 0 ];
            SimdVec<TF,1> R37{ R36 };
            auto R38 = py_3[ 0 ];
            SimdVec<TF,1> R39{ R38 };
            auto R40 = py_8[ 0 ];
            SimdVec<TF,2> R41{ R38, R40 };
            SimdVec<TF,2> R42{ R33, R36 };
            auto R43 = R42 - R41;
            auto R44 = R21 * R43;
            auto R45 = R42 + R44;
            auto R46 = R45[ 1 ];
            SimdVec<TF,1> R47{ R46 };
            SimdVec<TC,1> R48{ cut_i[num_cut] };
            auto R49 = pi_3[ 0 ];
            SimdVec<TC,1> R50{ R49 };
            auto R51 = px_4[ 0 ];
            SimdVec<TF,1> R52{ R51 };
            auto R53 = py_4[ 0 ];
            SimdVec<TF,1> R54{ R53 };
            auto R55 = pi_4[ 0 ];
            SimdVec<TC,1> R56{ R55 };
            auto R57 = px_5[ 0 ];
            SimdVec<TF,1> R58{ R57 };
            auto R59 = R45[ 0 ];
            SimdVec<TF,1> R60{ R59 };
            py_0 = R60;
            pi_0 = R48;
            px_3 = R58;
            pi_2 = R56;
            py_2 = R54;
            px_2 = R52;
            pi_1 = R50;
            pi_6 = R48;
            py_6 = R47;
            py_1 = R39;
            py_5 = R37;
            px_0 = R35;
            px_6 = R32;
            px_1 = R25;
            py_3 = R23;
            pi_3 = R17;
            px_4 = R14;
            py_4 = R10;
            px_5 = R6;
            pi_4 = R4;
            pi_5 = R1;
            continue;
        }
        case_174: {
            nodes_size = 7;
            // mod=[3,4],4,5,6,7,8,[8,0], swith_cuts=1
            auto R0 = pi_8[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_8[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = px_3[ 0 ];
            SimdVec<TF,2> R5{ R2, R4 };
            auto R6 = pi_7[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = di_8[ 0 ];
            auto R9 = py_7[ 0 ];
            SimdVec<TF,1> R10{ R9 };
            auto R11 = di_3[ 0 ];
            SimdVec<TF,2> R12{ R8, R11 };
            auto R13 = px_7[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = di_0[ 0 ];
            auto R16 = pi_6[ 0 ];
            SimdVec<TC,1> R17{ R16 };
            auto R18 = di_4[ 0 ];
            SimdVec<TF,2> R19{ R15, R18 };
            auto R20 = R19 - R12;
            auto R21 = R12 / R20;
            auto R22 = py_6[ 0 ];
            SimdVec<TF,1> R23{ R22 };
            auto R24 = px_0[ 0 ];
            auto R25 = px_6[ 0 ];
            SimdVec<TF,1> R26{ R25 };
            auto R27 = px_4[ 0 ];
            SimdVec<TF,1> R28{ R27 };
            auto R29 = py_8[ 0 ];
            SimdVec<TF,1> R30{ R29 };
            auto R31 = py_3[ 0 ];
            SimdVec<TF,2> R32{ R29, R31 };
            SimdVec<TF,2> R33{ R24, R27 };
            auto R34 = R5 - R33;
            auto R35 = R21 * R34;
            auto R36 = R5 + R35;
            auto R37 = R36[ 0 ];
            SimdVec<TF,1> R38{ R37 };
            auto R39 = py_0[ 0 ];
            auto R40 = R36[ 1 ];
            SimdVec<TF,1> R41{ R40 };
            auto R42 = py_4[ 0 ];
            SimdVec<TF,1> R43{ R42 };
            SimdVec<TC,1> R44{ cut_i[num_cut] };
            auto R45 = pi_4[ 0 ];
            SimdVec<TC,1> R46{ R45 };
            auto R47 = px_5[ 0 ];
            SimdVec<TF,1> R48{ R47 };
            auto R49 = py_5[ 0 ];
            SimdVec<TF,1> R50{ R49 };
            auto R51 = pi_5[ 0 ];
            SimdVec<TC,1> R52{ R51 };
            SimdVec<TF,2> R53{ R39, R42 };
            auto R54 = R32 - R53;
            auto R55 = R21 * R54;
            auto R56 = R32 + R55;
            auto R57 = R56[ 0 ];
            SimdVec<TF,1> R58{ R57 };
            auto R59 = R56[ 1 ];
            SimdVec<TF,1> R60{ R59 };
            py_0 = R60;
            py_6 = R58;
            pi_0 = R44;
            pi_2 = R52;
            py_2 = R50;
            px_2 = R48;
            pi_1 = R46;
            pi_6 = R44;
            py_1 = R43;
            px_0 = R41;
            px_6 = R38;
            py_5 = R30;
            px_1 = R28;
            px_3 = R26;
            py_3 = R23;
            pi_3 = R17;
            px_4 = R14;
            py_4 = R10;
            pi_4 = R7;
            px_5 = R3;
            pi_5 = R1;
            continue;
        }
        case_56: {
            nodes_size = 7;
            // mod=[5,0],0,1,2,3,4,[4,5], swith_cuts=1
            auto R0 = pi_4[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_4[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = px_5[ 0 ];
            SimdVec<TF,2> R5{ R2, R4 };
            auto R6 = pi_3[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = di_4[ 0 ];
            auto R9 = py_3[ 0 ];
            SimdVec<TF,1> R10{ R9 };
            auto R11 = di_5[ 0 ];
            SimdVec<TF,2> R12{ R8, R11 };
            auto R13 = px_3[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = di_0[ 0 ];
            SimdVec<TF,2> R16{ R11, R15 };
            auto R17 = R16 - R12;
            auto R18 = R12 / R17;
            auto R19 = pi_2[ 0 ];
            SimdVec<TC,1> R20{ R19 };
            auto R21 = px_0[ 0 ];
            SimdVec<TF,1> R22{ R21 };
            auto R23 = py_4[ 0 ];
            SimdVec<TF,1> R24{ R23 };
            auto R25 = py_5[ 0 ];
            SimdVec<TF,2> R26{ R23, R25 };
            SimdVec<TF,2> R27{ R4, R21 };
            auto R28 = R5 - R27;
            auto R29 = R18 * R28;
            auto R30 = R5 + R29;
            auto R31 = R30[ 0 ];
            SimdVec<TF,1> R32{ R31 };
            auto R33 = py_0[ 0 ];
            SimdVec<TF,1> R34{ R33 };
            SimdVec<TC,1> R35{ cut_i[num_cut] };
            auto R36 = pi_0[ 0 ];
            SimdVec<TC,1> R37{ R36 };
            auto R38 = px_1[ 0 ];
            SimdVec<TF,1> R39{ R38 };
            auto R40 = py_1[ 0 ];
            SimdVec<TF,1> R41{ R40 };
            auto R42 = pi_1[ 0 ];
            SimdVec<TC,1> R43{ R42 };
            auto R44 = px_2[ 0 ];
            SimdVec<TF,1> R45{ R44 };
            auto R46 = py_2[ 0 ];
            SimdVec<TF,1> R47{ R46 };
            auto R48 = R30[ 1 ];
            SimdVec<TF,1> R49{ R48 };
            SimdVec<TF,2> R50{ R25, R33 };
            auto R51 = R26 - R50;
            auto R52 = R18 * R51;
            auto R53 = R26 + R52;
            auto R54 = R53[ 0 ];
            SimdVec<TF,1> R55{ R54 };
            auto R56 = R53[ 1 ];
            SimdVec<TF,1> R57{ R56 };
            py_0 = R57;
            py_6 = R55;
            pi_0 = R35;
            px_0 = R49;
            py_3 = R47;
            px_3 = R45;
            pi_2 = R43;
            py_2 = R41;
            px_2 = R39;
            pi_1 = R37;
            pi_6 = R35;
            py_1 = R34;
            px_6 = R32;
            py_5 = R24;
            px_1 = R22;
            pi_3 = R20;
            px_4 = R14;
            py_4 = R10;
            pi_4 = R7;
            px_5 = R3;
            pi_5 = R1;
            continue;
        }
        case_153: {
            nodes_size = 7;
            // mod=[7,0],0,1,2,3,4,[4,5], swith_cuts=0
            auto R0 = pi_4[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_7[ 0 ];
            auto R3 = pi_3[ 0 ];
            SimdVec<TC,1> R4{ R3 };
            auto R5 = px_4[ 0 ];
            SimdVec<TF,1> R6{ R5 };
            auto R7 = di_7[ 0 ];
            SimdVec<TF,2> R8{ R2, R5 };
            auto R9 = py_3[ 0 ];
            SimdVec<TF,1> R10{ R9 };
            auto R11 = di_4[ 0 ];
            SimdVec<TF,2> R12{ R7, R11 };
            auto R13 = px_3[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = di_0[ 0 ];
            auto R16 = pi_2[ 0 ];
            SimdVec<TC,1> R17{ R16 };
            auto R18 = di_5[ 0 ];
            SimdVec<TF,2> R19{ R15, R18 };
            auto R20 = R19 - R12;
            auto R21 = R12 / R20;
            auto R22 = py_2[ 0 ];
            SimdVec<TF,1> R23{ R22 };
            auto R24 = px_0[ 0 ];
            SimdVec<TF,1> R25{ R24 };
            auto R26 = px_5[ 0 ];
            SimdVec<TF,2> R27{ R24, R26 };
            auto R28 = R8 - R27;
            auto R29 = R21 * R28;
            auto R30 = R8 + R29;
            auto R31 = R30[ 1 ];
            SimdVec<TF,1> R32{ R31 };
            auto R33 = py_7[ 0 ];
            auto R34 = R30[ 0 ];
            SimdVec<TF,1> R35{ R34 };
            auto R36 = py_4[ 0 ];
            SimdVec<TF,1> R37{ R36 };
            auto R38 = py_0[ 0 ];
            SimdVec<TF,1> R39{ R38 };
            auto R40 = py_5[ 0 ];
            SimdVec<TF,2> R41{ R38, R40 };
            SimdVec<TF,2> R42{ R33, R36 };
            auto R43 = R42 - R41;
            auto R44 = R21 * R43;
            auto R45 = R42 + R44;
            auto R46 = R45[ 1 ];
            SimdVec<TF,1> R47{ R46 };
            SimdVec<TC,1> R48{ cut_i[num_cut] };
            auto R49 = pi_0[ 0 ];
            SimdVec<TC,1> R50{ R49 };
            auto R51 = px_1[ 0 ];
            SimdVec<TF,1> R52{ R51 };
            auto R53 = py_1[ 0 ];
            SimdVec<TF,1> R54{ R53 };
            auto R55 = pi_1[ 0 ];
            SimdVec<TC,1> R56{ R55 };
            auto R57 = px_2[ 0 ];
            SimdVec<TF,1> R58{ R57 };
            auto R59 = R45[ 0 ];
            SimdVec<TF,1> R60{ R59 };
            py_0 = R60;
            pi_0 = R48;
            px_3 = R58;
            pi_2 = R56;
            py_2 = R54;
            px_2 = R52;
            pi_1 = R50;
            pi_6 = R48;
            py_6 = R47;
            py_1 = R39;
            py_5 = R37;
            px_0 = R35;
            px_6 = R32;
            px_1 = R25;
            py_3 = R23;
            pi_3 = R17;
            px_4 = R14;
            py_4 = R10;
            px_5 = R6;
            pi_4 = R4;
            pi_5 = R1;
            continue;
        }
        case_220: {
            nodes_size = 7;
            // mod=[8,0],0,1,2,3,4,[4,5], swith_cuts=0
            auto R0 = pi_4[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_8[ 0 ];
            auto R3 = pi_3[ 0 ];
            SimdVec<TC,1> R4{ R3 };
            auto R5 = px_4[ 0 ];
            SimdVec<TF,1> R6{ R5 };
            auto R7 = di_8[ 0 ];
            SimdVec<TF,2> R8{ R2, R5 };
            auto R9 = py_3[ 0 ];
            SimdVec<TF,1> R10{ R9 };
            auto R11 = di_4[ 0 ];
            SimdVec<TF,2> R12{ R7, R11 };
            auto R13 = px_3[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = di_0[ 0 ];
            auto R16 = pi_2[ 0 ];
            SimdVec<TC,1> R17{ R16 };
            auto R18 = di_5[ 0 ];
            SimdVec<TF,2> R19{ R15, R18 };
            auto R20 = R19 - R12;
            auto R21 = R12 / R20;
            auto R22 = py_2[ 0 ];
            SimdVec<TF,1> R23{ R22 };
            auto R24 = px_0[ 0 ];
            SimdVec<TF,1> R25{ R24 };
            auto R26 = px_5[ 0 ];
            SimdVec<TF,2> R27{ R24, R26 };
            auto R28 = R8 - R27;
            auto R29 = R21 * R28;
            auto R30 = R8 + R29;
            auto R31 = R30[ 1 ];
            SimdVec<TF,1> R32{ R31 };
            auto R33 = py_8[ 0 ];
            auto R34 = R30[ 0 ];
            SimdVec<TF,1> R35{ R34 };
            auto R36 = py_4[ 0 ];
            SimdVec<TF,1> R37{ R36 };
            auto R38 = py_0[ 0 ];
            SimdVec<TF,1> R39{ R38 };
            auto R40 = py_5[ 0 ];
            SimdVec<TF,2> R41{ R38, R40 };
            SimdVec<TF,2> R42{ R33, R36 };
            auto R43 = R42 - R41;
            auto R44 = R21 * R43;
            auto R45 = R42 + R44;
            auto R46 = R45[ 1 ];
            SimdVec<TF,1> R47{ R46 };
            SimdVec<TC,1> R48{ cut_i[num_cut] };
            auto R49 = pi_0[ 0 ];
            SimdVec<TC,1> R50{ R49 };
            auto R51 = px_1[ 0 ];
            SimdVec<TF,1> R52{ R51 };
            auto R53 = py_1[ 0 ];
            SimdVec<TF,1> R54{ R53 };
            auto R55 = pi_1[ 0 ];
            SimdVec<TC,1> R56{ R55 };
            auto R57 = px_2[ 0 ];
            SimdVec<TF,1> R58{ R57 };
            auto R59 = R45[ 0 ];
            SimdVec<TF,1> R60{ R59 };
            py_0 = R60;
            pi_0 = R48;
            px_3 = R58;
            pi_2 = R56;
            py_2 = R54;
            px_2 = R52;
            pi_1 = R50;
            pi_6 = R48;
            py_6 = R47;
            py_1 = R39;
            py_5 = R37;
            px_0 = R35;
            px_6 = R32;
            px_1 = R25;
            py_3 = R23;
            pi_3 = R17;
            px_4 = R14;
            py_4 = R10;
            px_5 = R6;
            pi_4 = R4;
            pi_5 = R1;
            continue;
        }
        case_85: {
            nodes_size = 8;
            // mod=0,1,2,3,4,[4,5],[5,6],6, swith_cuts=0
            auto R0 = pi_6[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_0[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_0[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_0[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_1[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = py_1[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = pi_1[ 0 ];
            SimdVec<TC,1> R13{ R12 };
            auto R14 = px_2[ 0 ];
            SimdVec<TF,1> R15{ R14 };
            auto R16 = py_2[ 0 ];
            SimdVec<TF,1> R17{ R16 };
            auto R18 = pi_2[ 0 ];
            SimdVec<TC,1> R19{ R18 };
            auto R20 = px_3[ 0 ];
            SimdVec<TF,1> R21{ R20 };
            auto R22 = py_3[ 0 ];
            SimdVec<TF,1> R23{ R22 };
            auto R24 = pi_3[ 0 ];
            SimdVec<TC,1> R25{ R24 };
            auto R26 = px_4[ 0 ];
            SimdVec<TF,1> R27{ R26 };
            auto R28 = py_4[ 0 ];
            SimdVec<TF,1> R29{ R28 };
            auto R30 = pi_4[ 0 ];
            SimdVec<TC,1> R31{ R30 };
            auto R32 = px_6[ 0 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = di_4[ 0 ];
            SimdVec<TF,2> R35{ R26, R32 };
            SimdVec<TC,1> R36{ cut_i[num_cut] };
            auto R37 = di_6[ 0 ];
            SimdVec<TF,2> R38{ R34, R37 };
            auto R39 = di_5[ 0 ];
            SimdVec<TF,2> R40{ R39, R39 };
            auto R41 = R40 - R38;
            auto R42 = R38 / R41;
            auto R43 = py_5[ 0 ];
            SimdVec<TF,2> R44{ R43, R43 };
            auto R45 = py_6[ 0 ];
            SimdVec<TF,1> R46{ R45 };
            auto R47 = px_5[ 0 ];
            SimdVec<TF,2> R48{ R47, R47 };
            auto R49 = R35 - R48;
            auto R50 = R42 * R49;
            auto R51 = R35 + R50;
            auto R52 = R51[ 1 ];
            SimdVec<TF,1> R53{ R52 };
            SimdVec<TF,2> R54{ R28, R45 };
            auto R55 = R54 - R44;
            auto R56 = R42 * R55;
            auto R57 = R54 + R56;
            auto R58 = R57[ 1 ];
            SimdVec<TF,1> R59{ R58 };
            auto R60 = R57[ 0 ];
            SimdVec<TF,1> R61{ R60 };
            auto R62 = R51[ 0 ];
            SimdVec<TF,1> R63{ R62 };
            px_5 = R63;
            py_5 = R61;
            py_6 = R59;
            px_6 = R53;
            py_7 = R46;
            pi_5 = R36;
            pi_6 = R36;
            px_7 = R33;
            pi_4 = R31;
            py_4 = R29;
            px_4 = R27;
            pi_3 = R25;
            py_3 = R23;
            px_3 = R21;
            pi_2 = R19;
            py_2 = R17;
            px_2 = R15;
            pi_1 = R13;
            py_1 = R11;
            px_1 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_7 = R1;
            continue;
        }
        case_195: {
            nodes_size = 8;
            // mod=0,1,2,3,4,[4,5],[7,8],8, swith_cuts=1
            auto R0 = pi_8[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_0[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_0[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_0[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_1[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = py_1[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = pi_1[ 0 ];
            SimdVec<TC,1> R13{ R12 };
            auto R14 = px_2[ 0 ];
            SimdVec<TF,1> R15{ R14 };
            auto R16 = py_2[ 0 ];
            SimdVec<TF,1> R17{ R16 };
            auto R18 = pi_2[ 0 ];
            SimdVec<TC,1> R19{ R18 };
            auto R20 = px_3[ 0 ];
            SimdVec<TF,1> R21{ R20 };
            auto R22 = py_3[ 0 ];
            SimdVec<TF,1> R23{ R22 };
            auto R24 = pi_3[ 0 ];
            SimdVec<TC,1> R25{ R24 };
            auto R26 = px_4[ 0 ];
            SimdVec<TF,1> R27{ R26 };
            auto R28 = py_4[ 0 ];
            SimdVec<TF,1> R29{ R28 };
            auto R30 = pi_4[ 0 ];
            SimdVec<TC,1> R31{ R30 };
            auto R32 = px_7[ 0 ];
            SimdVec<TF,2> R33{ R32, R26 };
            SimdVec<TC,1> R34{ cut_i[num_cut] };
            auto R35 = di_7[ 0 ];
            auto R36 = di_4[ 0 ];
            SimdVec<TF,2> R37{ R35, R36 };
            auto R38 = py_5[ 0 ];
            auto R39 = py_8[ 0 ];
            SimdVec<TF,1> R40{ R39 };
            auto R41 = di_8[ 0 ];
            SimdVec<TF,2> R42{ R39, R38 };
            auto R43 = py_7[ 0 ];
            SimdVec<TF,2> R44{ R43, R28 };
            auto R45 = R44 - R42;
            auto R46 = px_5[ 0 ];
            auto R47 = px_8[ 0 ];
            SimdVec<TF,1> R48{ R47 };
            auto R49 = di_5[ 0 ];
            SimdVec<TF,2> R50{ R41, R49 };
            auto R51 = R50 - R37;
            auto R52 = R37 / R51;
            auto R53 = R52 * R45;
            auto R54 = R44 + R53;
            auto R55 = R54[ 0 ];
            SimdVec<TF,1> R56{ R55 };
            SimdVec<TF,2> R57{ R47, R46 };
            auto R58 = R33 - R57;
            auto R59 = R52 * R58;
            auto R60 = R33 + R59;
            auto R61 = R60[ 0 ];
            SimdVec<TF,1> R62{ R61 };
            auto R63 = R54[ 1 ];
            SimdVec<TF,1> R64{ R63 };
            auto R65 = R60[ 1 ];
            SimdVec<TF,1> R66{ R65 };
            px_5 = R66;
            py_5 = R64;
            px_6 = R62;
            py_6 = R56;
            px_7 = R48;
            py_7 = R40;
            pi_5 = R34;
            pi_6 = R34;
            pi_4 = R31;
            py_4 = R29;
            px_4 = R27;
            pi_3 = R25;
            py_3 = R23;
            px_3 = R21;
            pi_2 = R19;
            py_2 = R17;
            px_2 = R15;
            pi_1 = R13;
            py_1 = R11;
            px_1 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_7 = R1;
            continue;
        }
        case_76: {
            nodes_size = 8;
            // mod=0,1,2,[2,3],[3,4],4,5,6, swith_cuts=1
            auto R0 = pi_6[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_0[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_0[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_0[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_1[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = py_1[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = pi_1[ 0 ];
            SimdVec<TC,1> R13{ R12 };
            auto R14 = px_2[ 0 ];
            SimdVec<TF,1> R15{ R14 };
            auto R16 = py_2[ 0 ];
            SimdVec<TF,1> R17{ R16 };
            auto R18 = pi_2[ 0 ];
            SimdVec<TC,1> R19{ R18 };
            auto R20 = px_3[ 0 ];
            SimdVec<TF,2> R21{ R20, R14 };
            auto R22 = py_6[ 0 ];
            SimdVec<TF,1> R23{ R22 };
            auto R24 = di_3[ 0 ];
            auto R25 = px_6[ 0 ];
            SimdVec<TF,1> R26{ R25 };
            auto R27 = di_2[ 0 ];
            SimdVec<TF,2> R28{ R24, R27 };
            auto R29 = pi_5[ 0 ];
            SimdVec<TC,1> R30{ R29 };
            auto R31 = di_4[ 0 ];
            SimdVec<TF,2> R32{ R31, R24 };
            auto R33 = R32 - R28;
            auto R34 = R28 / R33;
            auto R35 = py_5[ 0 ];
            SimdVec<TF,1> R36{ R35 };
            auto R37 = px_4[ 0 ];
            SimdVec<TF,1> R38{ R37 };
            auto R39 = py_3[ 0 ];
            SimdVec<TF,2> R40{ R39, R16 };
            SimdVec<TF,2> R41{ R37, R20 };
            auto R42 = R21 - R41;
            auto R43 = R34 * R42;
            auto R44 = R21 + R43;
            auto R45 = R44[ 0 ];
            SimdVec<TF,1> R46{ R45 };
            auto R47 = py_4[ 0 ];
            SimdVec<TF,1> R48{ R47 };
            SimdVec<TC,1> R49{ cut_i[num_cut] };
            auto R50 = pi_4[ 0 ];
            SimdVec<TC,1> R51{ R50 };
            auto R52 = px_5[ 0 ];
            SimdVec<TF,1> R53{ R52 };
            auto R54 = R44[ 1 ];
            SimdVec<TF,1> R55{ R54 };
            SimdVec<TF,2> R56{ R47, R39 };
            auto R57 = R40 - R56;
            auto R58 = R34 * R57;
            auto R59 = R40 + R58;
            auto R60 = R59[ 0 ];
            SimdVec<TF,1> R61{ R60 };
            auto R62 = R59[ 1 ];
            SimdVec<TF,1> R63{ R62 };
            py_3 = R63;
            py_4 = R61;
            pi_3 = R49;
            px_3 = R55;
            px_6 = R53;
            pi_5 = R51;
            pi_4 = R49;
            py_5 = R48;
            px_4 = R46;
            px_5 = R38;
            py_6 = R36;
            pi_6 = R30;
            px_7 = R26;
            py_7 = R23;
            pi_2 = R19;
            py_2 = R17;
            px_2 = R15;
            pi_1 = R13;
            py_1 = R11;
            px_1 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_7 = R1;
            continue;
        }
        case_182: {
            nodes_size = 8;
            // mod=0,1,2,[2,3],[5,6],6,7,8, swith_cuts=1
            auto R0 = pi_8[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_0[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_0[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_0[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_1[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = py_1[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = pi_1[ 0 ];
            SimdVec<TC,1> R13{ R12 };
            auto R14 = px_2[ 0 ];
            SimdVec<TF,1> R15{ R14 };
            auto R16 = py_2[ 0 ];
            SimdVec<TF,1> R17{ R16 };
            auto R18 = pi_2[ 0 ];
            SimdVec<TC,1> R19{ R18 };
            auto R20 = px_5[ 0 ];
            SimdVec<TF,2> R21{ R20, R14 };
            auto R22 = py_8[ 0 ];
            SimdVec<TF,1> R23{ R22 };
            auto R24 = di_5[ 0 ];
            auto R25 = px_8[ 0 ];
            SimdVec<TF,1> R26{ R25 };
            auto R27 = di_2[ 0 ];
            SimdVec<TF,2> R28{ R24, R27 };
            auto R29 = pi_7[ 0 ];
            SimdVec<TC,1> R30{ R29 };
            auto R31 = di_6[ 0 ];
            auto R32 = py_7[ 0 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = di_3[ 0 ];
            SimdVec<TF,2> R35{ R31, R34 };
            auto R36 = R35 - R28;
            auto R37 = R28 / R36;
            auto R38 = px_7[ 0 ];
            SimdVec<TF,1> R39{ R38 };
            auto R40 = px_6[ 0 ];
            SimdVec<TF,1> R41{ R40 };
            auto R42 = px_3[ 0 ];
            SimdVec<TF,2> R43{ R40, R42 };
            auto R44 = R21 - R43;
            auto R45 = R37 * R44;
            auto R46 = R21 + R45;
            auto R47 = R46[ 0 ];
            SimdVec<TF,1> R48{ R47 };
            auto R49 = py_5[ 0 ];
            SimdVec<TF,2> R50{ R49, R16 };
            auto R51 = R46[ 1 ];
            SimdVec<TF,1> R52{ R51 };
            auto R53 = py_6[ 0 ];
            SimdVec<TF,1> R54{ R53 };
            auto R55 = py_3[ 0 ];
            SimdVec<TF,2> R56{ R53, R55 };
            auto R57 = R50 - R56;
            auto R58 = R37 * R57;
            auto R59 = R50 + R58;
            auto R60 = R59[ 0 ];
            SimdVec<TF,1> R61{ R60 };
            SimdVec<TC,1> R62{ cut_i[num_cut] };
            auto R63 = pi_6[ 0 ];
            SimdVec<TC,1> R64{ R63 };
            auto R65 = R59[ 1 ];
            SimdVec<TF,1> R66{ R65 };
            py_3 = R66;
            pi_3 = R62;
            pi_5 = R64;
            pi_4 = R62;
            py_4 = R61;
            py_5 = R54;
            px_3 = R52;
            px_4 = R48;
            px_5 = R41;
            px_6 = R39;
            py_6 = R33;
            pi_6 = R30;
            px_7 = R26;
            py_7 = R23;
            pi_2 = R19;
            py_2 = R17;
            px_2 = R15;
            pi_1 = R13;
            py_1 = R11;
            px_1 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_7 = R1;
            continue;
        }
        case_71: {
            nodes_size = 8;
            // mod=0,[0,1],[1,2],2,3,4,5,6, swith_cuts=0
            auto R0 = pi_6[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_0[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_0[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_0[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_2[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = di_0[ 0 ];
            SimdVec<TF,2> R11{ R2, R8 };
            auto R12 = py_6[ 0 ];
            SimdVec<TF,1> R13{ R12 };
            auto R14 = di_2[ 0 ];
            SimdVec<TF,2> R15{ R10, R14 };
            auto R16 = px_6[ 0 ];
            SimdVec<TF,1> R17{ R16 };
            auto R18 = di_1[ 0 ];
            SimdVec<TF,2> R19{ R18, R18 };
            auto R20 = R19 - R15;
            auto R21 = R15 / R20;
            auto R22 = pi_5[ 0 ];
            SimdVec<TC,1> R23{ R22 };
            auto R24 = px_1[ 0 ];
            SimdVec<TF,2> R25{ R24, R24 };
            auto R26 = R11 - R25;
            auto R27 = R21 * R26;
            auto R28 = R11 + R27;
            auto R29 = R28[ 1 ];
            SimdVec<TF,1> R30{ R29 };
            auto R31 = py_2[ 0 ];
            SimdVec<TF,1> R32{ R31 };
            auto R33 = py_1[ 0 ];
            SimdVec<TF,2> R34{ R33, R33 };
            SimdVec<TF,2> R35{ R4, R31 };
            auto R36 = R35 - R34;
            auto R37 = R21 * R36;
            auto R38 = R35 + R37;
            auto R39 = R38[ 1 ];
            SimdVec<TF,1> R40{ R39 };
            SimdVec<TC,1> R41{ cut_i[num_cut] };
            auto R42 = pi_2[ 0 ];
            SimdVec<TC,1> R43{ R42 };
            auto R44 = px_3[ 0 ];
            SimdVec<TF,1> R45{ R44 };
            auto R46 = py_3[ 0 ];
            SimdVec<TF,1> R47{ R46 };
            auto R48 = pi_3[ 0 ];
            SimdVec<TC,1> R49{ R48 };
            auto R50 = px_4[ 0 ];
            SimdVec<TF,1> R51{ R50 };
            auto R52 = py_4[ 0 ];
            SimdVec<TF,1> R53{ R52 };
            auto R54 = pi_4[ 0 ];
            SimdVec<TC,1> R55{ R54 };
            auto R56 = px_5[ 0 ];
            SimdVec<TF,1> R57{ R56 };
            auto R58 = py_5[ 0 ];
            SimdVec<TF,1> R59{ R58 };
            auto R60 = R28[ 0 ];
            SimdVec<TF,1> R61{ R60 };
            auto R62 = R38[ 0 ];
            SimdVec<TF,1> R63{ R62 };
            py_1 = R63;
            px_1 = R61;
            pi_1 = R41;
            py_6 = R59;
            px_6 = R57;
            pi_5 = R55;
            py_5 = R53;
            px_5 = R51;
            pi_4 = R49;
            py_4 = R47;
            px_4 = R45;
            pi_3 = R43;
            pi_2 = R41;
            py_2 = R40;
            py_3 = R32;
            px_2 = R30;
            pi_6 = R23;
            px_7 = R17;
            py_7 = R13;
            px_3 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_7 = R1;
            continue;
        }
        case_188: {
            nodes_size = 8;
            // mod=1,2,3,[3,4],[6,7],7,8,0, swith_cuts=0
            auto R0 = pi_0[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_1[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_1[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_1[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_2[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = py_2[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = pi_2[ 0 ];
            SimdVec<TC,1> R13{ R12 };
            auto R14 = px_3[ 0 ];
            SimdVec<TF,1> R15{ R14 };
            auto R16 = py_3[ 0 ];
            SimdVec<TF,1> R17{ R16 };
            auto R18 = pi_3[ 0 ];
            SimdVec<TC,1> R19{ R18 };
            auto R20 = px_4[ 0 ];
            auto R21 = py_0[ 0 ];
            SimdVec<TF,1> R22{ R21 };
            auto R23 = px_6[ 0 ];
            SimdVec<TF,2> R24{ R20, R23 };
            auto R25 = px_0[ 0 ];
            SimdVec<TF,1> R26{ R25 };
            auto R27 = di_4[ 0 ];
            auto R28 = pi_8[ 0 ];
            SimdVec<TC,1> R29{ R28 };
            auto R30 = di_6[ 0 ];
            SimdVec<TF,2> R31{ R27, R30 };
            auto R32 = py_8[ 0 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = di_3[ 0 ];
            auto R35 = px_8[ 0 ];
            SimdVec<TF,1> R36{ R35 };
            auto R37 = di_7[ 0 ];
            SimdVec<TF,2> R38{ R34, R37 };
            auto R39 = R38 - R31;
            auto R40 = R31 / R39;
            auto R41 = pi_7[ 0 ];
            SimdVec<TC,1> R42{ R41 };
            auto R43 = px_7[ 0 ];
            SimdVec<TF,1> R44{ R43 };
            auto R45 = py_4[ 0 ];
            SimdVec<TF,2> R46{ R14, R43 };
            auto R47 = R24 - R46;
            auto R48 = R40 * R47;
            auto R49 = R24 + R48;
            auto R50 = R49[ 1 ];
            SimdVec<TF,1> R51{ R50 };
            auto R52 = py_6[ 0 ];
            SimdVec<TF,2> R53{ R45, R52 };
            auto R54 = R49[ 0 ];
            SimdVec<TF,1> R55{ R54 };
            auto R56 = py_7[ 0 ];
            SimdVec<TF,1> R57{ R56 };
            SimdVec<TC,1> R58{ cut_i[num_cut] };
            SimdVec<TF,2> R59{ R16, R56 };
            auto R60 = R53 - R59;
            auto R61 = R40 * R60;
            auto R62 = R53 + R61;
            auto R63 = R62[ 1 ];
            SimdVec<TF,1> R64{ R63 };
            auto R65 = R62[ 0 ];
            SimdVec<TF,1> R66{ R65 };
            py_3 = R66;
            py_4 = R64;
            pi_3 = R58;
            pi_4 = R58;
            py_5 = R57;
            px_3 = R55;
            px_4 = R51;
            px_5 = R44;
            pi_5 = R42;
            px_6 = R36;
            py_6 = R33;
            pi_6 = R29;
            px_7 = R26;
            py_7 = R22;
            pi_2 = R19;
            py_2 = R17;
            px_2 = R15;
            pi_1 = R13;
            py_1 = R11;
            px_1 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_7 = R1;
            continue;
        }
        case_203: {
            nodes_size = 8;
            // mod=3,4,5,6,7,[7,8],[1,2],2, swith_cuts=0
            auto R0 = pi_2[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_3[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_3[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_3[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_4[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = py_4[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = pi_4[ 0 ];
            SimdVec<TC,1> R13{ R12 };
            auto R14 = px_5[ 0 ];
            SimdVec<TF,1> R15{ R14 };
            auto R16 = py_5[ 0 ];
            SimdVec<TF,1> R17{ R16 };
            auto R18 = pi_5[ 0 ];
            SimdVec<TC,1> R19{ R18 };
            auto R20 = px_6[ 0 ];
            SimdVec<TF,1> R21{ R20 };
            auto R22 = py_6[ 0 ];
            SimdVec<TF,1> R23{ R22 };
            auto R24 = pi_6[ 0 ];
            SimdVec<TC,1> R25{ R24 };
            auto R26 = px_7[ 0 ];
            SimdVec<TF,1> R27{ R26 };
            auto R28 = py_7[ 0 ];
            SimdVec<TF,1> R29{ R28 };
            auto R30 = pi_7[ 0 ];
            SimdVec<TC,1> R31{ R30 };
            auto R32 = px_8[ 0 ];
            SimdVec<TC,1> R33{ cut_i[num_cut] };
            auto R34 = px_1[ 0 ];
            SimdVec<TF,2> R35{ R32, R34 };
            auto R36 = di_8[ 0 ];
            auto R37 = py_2[ 0 ];
            SimdVec<TF,1> R38{ R37 };
            auto R39 = di_1[ 0 ];
            SimdVec<TF,2> R40{ R36, R39 };
            SimdVec<TF,2> R41{ R28, R37 };
            auto R42 = py_1[ 0 ];
            auto R43 = py_8[ 0 ];
            SimdVec<TF,2> R44{ R43, R42 };
            auto R45 = R44 - R41;
            auto R46 = px_2[ 0 ];
            SimdVec<TF,1> R47{ R46 };
            auto R48 = di_7[ 0 ];
            SimdVec<TF,2> R49{ R26, R46 };
            auto R50 = R35 - R49;
            auto R51 = di_2[ 0 ];
            SimdVec<TF,2> R52{ R48, R51 };
            auto R53 = R52 - R40;
            auto R54 = R40 / R53;
            auto R55 = R54 * R45;
            auto R56 = R44 + R55;
            auto R57 = R56[ 1 ];
            SimdVec<TF,1> R58{ R57 };
            auto R59 = R54 * R50;
            auto R60 = R35 + R59;
            auto R61 = R60[ 1 ];
            SimdVec<TF,1> R62{ R61 };
            auto R63 = R56[ 0 ];
            SimdVec<TF,1> R64{ R63 };
            auto R65 = R60[ 0 ];
            SimdVec<TF,1> R66{ R65 };
            px_5 = R66;
            py_5 = R64;
            px_6 = R62;
            py_6 = R58;
            px_7 = R47;
            py_7 = R38;
            pi_5 = R33;
            pi_6 = R33;
            pi_4 = R31;
            py_4 = R29;
            px_4 = R27;
            pi_3 = R25;
            py_3 = R23;
            px_3 = R21;
            pi_2 = R19;
            py_2 = R17;
            px_2 = R15;
            pi_1 = R13;
            py_1 = R11;
            px_1 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_7 = R1;
            continue;
        }
        case_80: {
            nodes_size = 8;
            // mod=3,[3,4],[4,5],5,6,0,1,2, swith_cuts=1
            auto R0 = pi_2[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_3[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_3[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_3[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_5[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = di_5[ 0 ];
            SimdVec<TF,2> R11{ R8, R2 };
            auto R12 = py_2[ 0 ];
            SimdVec<TF,1> R13{ R12 };
            auto R14 = di_3[ 0 ];
            SimdVec<TF,2> R15{ R10, R14 };
            auto R16 = px_2[ 0 ];
            SimdVec<TF,1> R17{ R16 };
            auto R18 = di_4[ 0 ];
            SimdVec<TF,2> R19{ R18, R18 };
            auto R20 = R19 - R15;
            auto R21 = R15 / R20;
            auto R22 = pi_1[ 0 ];
            SimdVec<TC,1> R23{ R22 };
            auto R24 = px_4[ 0 ];
            SimdVec<TF,2> R25{ R24, R24 };
            auto R26 = R11 - R25;
            auto R27 = R21 * R26;
            auto R28 = R11 + R27;
            auto R29 = R28[ 0 ];
            SimdVec<TF,1> R30{ R29 };
            auto R31 = py_5[ 0 ];
            SimdVec<TF,1> R32{ R31 };
            auto R33 = py_4[ 0 ];
            SimdVec<TF,2> R34{ R33, R33 };
            SimdVec<TF,2> R35{ R31, R4 };
            auto R36 = R35 - R34;
            auto R37 = R21 * R36;
            auto R38 = R35 + R37;
            auto R39 = R38[ 0 ];
            SimdVec<TF,1> R40{ R39 };
            SimdVec<TC,1> R41{ cut_i[num_cut] };
            auto R42 = pi_5[ 0 ];
            SimdVec<TC,1> R43{ R42 };
            auto R44 = px_6[ 0 ];
            SimdVec<TF,1> R45{ R44 };
            auto R46 = py_6[ 0 ];
            SimdVec<TF,1> R47{ R46 };
            auto R48 = pi_6[ 0 ];
            SimdVec<TC,1> R49{ R48 };
            auto R50 = px_0[ 0 ];
            SimdVec<TF,1> R51{ R50 };
            auto R52 = py_0[ 0 ];
            SimdVec<TF,1> R53{ R52 };
            auto R54 = pi_0[ 0 ];
            SimdVec<TC,1> R55{ R54 };
            auto R56 = px_1[ 0 ];
            SimdVec<TF,1> R57{ R56 };
            auto R58 = py_1[ 0 ];
            SimdVec<TF,1> R59{ R58 };
            auto R60 = R28[ 1 ];
            SimdVec<TF,1> R61{ R60 };
            auto R62 = R38[ 1 ];
            SimdVec<TF,1> R63{ R62 };
            py_1 = R63;
            px_1 = R61;
            pi_1 = R41;
            py_6 = R59;
            px_6 = R57;
            pi_5 = R55;
            py_5 = R53;
            px_5 = R51;
            pi_4 = R49;
            py_4 = R47;
            px_4 = R45;
            pi_3 = R43;
            pi_2 = R41;
            py_2 = R40;
            py_3 = R32;
            px_2 = R30;
            pi_6 = R23;
            px_7 = R17;
            py_7 = R13;
            px_3 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_7 = R1;
            continue;
        }
        case_215: {
            nodes_size = 8;
            // mod=5,[5,6],[8,0],0,1,2,3,4, swith_cuts=1
            auto R0 = pi_4[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_5[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_5[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_5[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_0[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = di_0[ 0 ];
            SimdVec<TF,2> R11{ R8, R2 };
            auto R12 = py_4[ 0 ];
            SimdVec<TF,1> R13{ R12 };
            auto R14 = di_5[ 0 ];
            SimdVec<TF,2> R15{ R10, R14 };
            auto R16 = px_4[ 0 ];
            SimdVec<TF,1> R17{ R16 };
            auto R18 = di_8[ 0 ];
            auto R19 = pi_3[ 0 ];
            SimdVec<TC,1> R20{ R19 };
            auto R21 = di_6[ 0 ];
            SimdVec<TF,2> R22{ R18, R21 };
            auto R23 = R22 - R15;
            auto R24 = R15 / R23;
            auto R25 = py_3[ 0 ];
            SimdVec<TF,1> R26{ R25 };
            auto R27 = px_8[ 0 ];
            auto R28 = px_3[ 0 ];
            SimdVec<TF,1> R29{ R28 };
            auto R30 = px_6[ 0 ];
            SimdVec<TF,2> R31{ R27, R30 };
            auto R32 = R11 - R31;
            auto R33 = R24 * R32;
            auto R34 = R11 + R33;
            auto R35 = R34[ 0 ];
            SimdVec<TF,1> R36{ R35 };
            auto R37 = py_0[ 0 ];
            SimdVec<TF,1> R38{ R37 };
            auto R39 = py_8[ 0 ];
            SimdVec<TF,2> R40{ R37, R4 };
            auto R41 = R34[ 1 ];
            SimdVec<TF,1> R42{ R41 };
            auto R43 = py_6[ 0 ];
            SimdVec<TF,2> R44{ R39, R43 };
            auto R45 = R40 - R44;
            auto R46 = R24 * R45;
            auto R47 = R40 + R46;
            auto R48 = R47[ 0 ];
            SimdVec<TF,1> R49{ R48 };
            SimdVec<TC,1> R50{ cut_i[num_cut] };
            auto R51 = pi_0[ 0 ];
            SimdVec<TC,1> R52{ R51 };
            auto R53 = px_1[ 0 ];
            SimdVec<TF,1> R54{ R53 };
            auto R55 = py_1[ 0 ];
            SimdVec<TF,1> R56{ R55 };
            auto R57 = pi_1[ 0 ];
            SimdVec<TC,1> R58{ R57 };
            auto R59 = px_2[ 0 ];
            SimdVec<TF,1> R60{ R59 };
            auto R61 = py_2[ 0 ];
            SimdVec<TF,1> R62{ R61 };
            auto R63 = pi_2[ 0 ];
            SimdVec<TC,1> R64{ R63 };
            auto R65 = R47[ 1 ];
            SimdVec<TF,1> R66{ R65 };
            py_1 = R66;
            pi_1 = R50;
            pi_5 = R64;
            py_5 = R62;
            px_5 = R60;
            pi_4 = R58;
            py_4 = R56;
            px_4 = R54;
            pi_3 = R52;
            pi_2 = R50;
            py_2 = R49;
            px_1 = R42;
            py_3 = R38;
            px_2 = R36;
            px_6 = R29;
            py_6 = R26;
            pi_6 = R20;
            px_7 = R17;
            py_7 = R13;
            px_3 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_7 = R1;
            continue;
        }
        case_177: {
            nodes_size = 8;
            // mod=7,8,0,1,[1,2],[4,5],5,6, swith_cuts=0
            auto R0 = pi_6[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_7[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_7[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_7[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_8[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = py_8[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = pi_8[ 0 ];
            SimdVec<TC,1> R13{ R12 };
            auto R14 = px_0[ 0 ];
            SimdVec<TF,1> R15{ R14 };
            auto R16 = py_0[ 0 ];
            SimdVec<TF,1> R17{ R16 };
            auto R18 = pi_0[ 0 ];
            SimdVec<TC,1> R19{ R18 };
            auto R20 = px_1[ 0 ];
            SimdVec<TF,1> R21{ R20 };
            auto R22 = py_1[ 0 ];
            SimdVec<TF,1> R23{ R22 };
            auto R24 = pi_1[ 0 ];
            SimdVec<TC,1> R25{ R24 };
            auto R26 = px_2[ 0 ];
            auto R27 = py_6[ 0 ];
            SimdVec<TF,1> R28{ R27 };
            auto R29 = px_4[ 0 ];
            SimdVec<TF,2> R30{ R26, R29 };
            auto R31 = px_6[ 0 ];
            SimdVec<TF,1> R32{ R31 };
            auto R33 = di_2[ 0 ];
            auto R34 = pi_5[ 0 ];
            SimdVec<TC,1> R35{ R34 };
            auto R36 = di_4[ 0 ];
            SimdVec<TF,2> R37{ R33, R36 };
            SimdVec<TC,1> R38{ cut_i[num_cut] };
            auto R39 = di_1[ 0 ];
            auto R40 = di_5[ 0 ];
            SimdVec<TF,2> R41{ R39, R40 };
            auto R42 = R41 - R37;
            auto R43 = R37 / R42;
            auto R44 = py_5[ 0 ];
            SimdVec<TF,1> R45{ R44 };
            auto R46 = px_5[ 0 ];
            SimdVec<TF,1> R47{ R46 };
            auto R48 = py_2[ 0 ];
            SimdVec<TF,2> R49{ R20, R46 };
            auto R50 = R30 - R49;
            auto R51 = R43 * R50;
            auto R52 = R30 + R51;
            auto R53 = R52[ 1 ];
            SimdVec<TF,1> R54{ R53 };
            auto R55 = py_4[ 0 ];
            SimdVec<TF,2> R56{ R48, R55 };
            auto R57 = R52[ 0 ];
            SimdVec<TF,1> R58{ R57 };
            SimdVec<TF,2> R59{ R22, R44 };
            auto R60 = R56 - R59;
            auto R61 = R43 * R60;
            auto R62 = R56 + R61;
            auto R63 = R62[ 1 ];
            SimdVec<TF,1> R64{ R63 };
            auto R65 = R62[ 0 ];
            SimdVec<TF,1> R66{ R65 };
            py_4 = R66;
            py_5 = R64;
            px_4 = R58;
            px_5 = R54;
            px_6 = R47;
            py_6 = R45;
            pi_4 = R38;
            pi_5 = R38;
            pi_6 = R35;
            px_7 = R32;
            py_7 = R28;
            pi_3 = R25;
            py_3 = R23;
            px_3 = R21;
            pi_2 = R19;
            py_2 = R17;
            px_2 = R15;
            pi_1 = R13;
            py_1 = R11;
            px_1 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_7 = R1;
            continue;
        }
        case_173: {
            nodes_size = 8;
            // mod=7,8,0,[0,1],[3,4],4,5,6, swith_cuts=0
            auto R0 = pi_6[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_7[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_7[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_7[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_8[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = py_8[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = pi_8[ 0 ];
            SimdVec<TC,1> R13{ R12 };
            auto R14 = px_0[ 0 ];
            SimdVec<TF,1> R15{ R14 };
            auto R16 = py_0[ 0 ];
            SimdVec<TF,1> R17{ R16 };
            auto R18 = pi_0[ 0 ];
            SimdVec<TC,1> R19{ R18 };
            auto R20 = px_1[ 0 ];
            auto R21 = py_6[ 0 ];
            SimdVec<TF,1> R22{ R21 };
            auto R23 = px_4[ 0 ];
            SimdVec<TF,1> R24{ R23 };
            auto R25 = di_1[ 0 ];
            SimdVec<TF,2> R26{ R20, R23 };
            auto R27 = px_6[ 0 ];
            SimdVec<TF,1> R28{ R27 };
            auto R29 = di_4[ 0 ];
            SimdVec<TF,2> R30{ R25, R29 };
            auto R31 = pi_5[ 0 ];
            SimdVec<TC,1> R32{ R31 };
            auto R33 = di_0[ 0 ];
            auto R34 = py_5[ 0 ];
            SimdVec<TF,1> R35{ R34 };
            auto R36 = di_3[ 0 ];
            SimdVec<TF,2> R37{ R33, R36 };
            auto R38 = R37 - R30;
            auto R39 = R30 / R38;
            auto R40 = px_5[ 0 ];
            SimdVec<TF,1> R41{ R40 };
            auto R42 = px_3[ 0 ];
            SimdVec<TF,2> R43{ R14, R42 };
            auto R44 = R26 - R43;
            auto R45 = R39 * R44;
            auto R46 = R26 + R45;
            auto R47 = R46[ 1 ];
            SimdVec<TF,1> R48{ R47 };
            auto R49 = py_1[ 0 ];
            auto R50 = R46[ 0 ];
            SimdVec<TF,1> R51{ R50 };
            auto R52 = py_4[ 0 ];
            SimdVec<TF,1> R53{ R52 };
            auto R54 = py_3[ 0 ];
            SimdVec<TF,2> R55{ R16, R54 };
            SimdVec<TF,2> R56{ R49, R52 };
            auto R57 = R56 - R55;
            auto R58 = R39 * R57;
            auto R59 = R56 + R58;
            auto R60 = R59[ 1 ];
            SimdVec<TF,1> R61{ R60 };
            SimdVec<TC,1> R62{ cut_i[num_cut] };
            auto R63 = pi_4[ 0 ];
            SimdVec<TC,1> R64{ R63 };
            auto R65 = R59[ 0 ];
            SimdVec<TF,1> R66{ R65 };
            py_3 = R66;
            pi_3 = R62;
            pi_5 = R64;
            pi_4 = R62;
            py_4 = R61;
            py_5 = R53;
            px_3 = R51;
            px_4 = R48;
            px_6 = R41;
            py_6 = R35;
            pi_6 = R32;
            px_7 = R28;
            px_5 = R24;
            py_7 = R22;
            pi_2 = R19;
            py_2 = R17;
            px_2 = R15;
            pi_1 = R13;
            py_1 = R11;
            px_1 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_7 = R1;
            continue;
        }
        case_70: {
            nodes_size = 8;
            // mod=[0,1],1,2,3,4,5,6,[6,0], swith_cuts=0
            auto R0 = pi_6[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_0[ 0 ];
            auto R3 = pi_5[ 0 ];
            SimdVec<TC,1> R4{ R3 };
            auto R5 = px_6[ 0 ];
            SimdVec<TF,1> R6{ R5 };
            auto R7 = di_0[ 0 ];
            SimdVec<TF,2> R8{ R2, R5 };
            auto R9 = py_5[ 0 ];
            SimdVec<TF,1> R10{ R9 };
            auto R11 = di_6[ 0 ];
            SimdVec<TF,2> R12{ R7, R11 };
            auto R13 = px_5[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = di_1[ 0 ];
            SimdVec<TF,2> R16{ R15, R7 };
            auto R17 = R16 - R12;
            auto R18 = R12 / R17;
            auto R19 = pi_4[ 0 ];
            SimdVec<TC,1> R20{ R19 };
            auto R21 = px_1[ 0 ];
            SimdVec<TF,1> R22{ R21 };
            auto R23 = py_0[ 0 ];
            SimdVec<TF,2> R24{ R21, R2 };
            auto R25 = R8 - R24;
            auto R26 = R18 * R25;
            auto R27 = R8 + R26;
            auto R28 = R27[ 1 ];
            SimdVec<TF,1> R29{ R28 };
            auto R30 = py_6[ 0 ];
            SimdVec<TF,1> R31{ R30 };
            auto R32 = py_1[ 0 ];
            SimdVec<TF,1> R33{ R32 };
            SimdVec<TC,1> R34{ cut_i[num_cut] };
            auto R35 = pi_1[ 0 ];
            SimdVec<TC,1> R36{ R35 };
            auto R37 = px_2[ 0 ];
            SimdVec<TF,1> R38{ R37 };
            auto R39 = py_2[ 0 ];
            SimdVec<TF,1> R40{ R39 };
            auto R41 = pi_2[ 0 ];
            SimdVec<TC,1> R42{ R41 };
            auto R43 = px_3[ 0 ];
            SimdVec<TF,1> R44{ R43 };
            auto R45 = py_3[ 0 ];
            SimdVec<TF,1> R46{ R45 };
            auto R47 = pi_3[ 0 ];
            SimdVec<TC,1> R48{ R47 };
            auto R49 = px_4[ 0 ];
            SimdVec<TF,1> R50{ R49 };
            auto R51 = py_4[ 0 ];
            SimdVec<TF,1> R52{ R51 };
            auto R53 = R27[ 0 ];
            SimdVec<TF,1> R54{ R53 };
            SimdVec<TF,2> R55{ R23, R30 };
            SimdVec<TF,2> R56{ R32, R23 };
            auto R57 = R55 - R56;
            auto R58 = R18 * R57;
            auto R59 = R55 + R58;
            auto R60 = R59[ 1 ];
            SimdVec<TF,1> R61{ R60 };
            auto R62 = R59[ 0 ];
            SimdVec<TF,1> R63{ R62 };
            py_0 = R63;
            py_7 = R61;
            pi_0 = R34;
            px_0 = R54;
            py_4 = R52;
            px_4 = R50;
            pi_3 = R48;
            py_3 = R46;
            px_3 = R44;
            pi_2 = R42;
            py_2 = R40;
            px_2 = R38;
            pi_1 = R36;
            pi_7 = R34;
            py_1 = R33;
            py_6 = R31;
            px_7 = R29;
            px_1 = R22;
            pi_4 = R20;
            px_5 = R14;
            py_5 = R10;
            px_6 = R6;
            pi_5 = R4;
            pi_6 = R1;
            continue;
        }
        case_73: {
            nodes_size = 8;
            // mod=[1,2],[2,3],3,4,5,6,0,1, swith_cuts=1
            auto R0 = pi_1[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_2[ 0 ];
            SimdVec<TF,2> R3{ R2, R2 };
            auto R4 = pi_0[ 0 ];
            SimdVec<TC,1> R5{ R4 };
            auto R6 = di_2[ 0 ];
            SimdVec<TF,2> R7{ R6, R6 };
            auto R8 = py_0[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = di_3[ 0 ];
            auto R11 = px_0[ 0 ];
            SimdVec<TF,1> R12{ R11 };
            auto R13 = di_1[ 0 ];
            SimdVec<TF,2> R14{ R10, R13 };
            auto R15 = R14 - R7;
            auto R16 = R7 / R15;
            auto R17 = pi_6[ 0 ];
            SimdVec<TC,1> R18{ R17 };
            auto R19 = px_3[ 0 ];
            SimdVec<TF,1> R20{ R19 };
            auto R21 = px_1[ 0 ];
            SimdVec<TF,1> R22{ R21 };
            auto R23 = py_2[ 0 ];
            SimdVec<TF,2> R24{ R23, R23 };
            SimdVec<TF,2> R25{ R19, R21 };
            auto R26 = R3 - R25;
            auto R27 = R16 * R26;
            auto R28 = R3 + R27;
            auto R29 = R28[ 0 ];
            SimdVec<TF,1> R30{ R29 };
            auto R31 = py_3[ 0 ];
            SimdVec<TF,1> R32{ R31 };
            auto R33 = py_1[ 0 ];
            SimdVec<TF,1> R34{ R33 };
            SimdVec<TC,1> R35{ cut_i[num_cut] };
            auto R36 = pi_3[ 0 ];
            SimdVec<TC,1> R37{ R36 };
            auto R38 = px_4[ 0 ];
            SimdVec<TF,1> R39{ R38 };
            auto R40 = py_4[ 0 ];
            SimdVec<TF,1> R41{ R40 };
            auto R42 = pi_4[ 0 ];
            SimdVec<TC,1> R43{ R42 };
            auto R44 = px_5[ 0 ];
            SimdVec<TF,1> R45{ R44 };
            auto R46 = py_5[ 0 ];
            SimdVec<TF,1> R47{ R46 };
            auto R48 = pi_5[ 0 ];
            SimdVec<TC,1> R49{ R48 };
            auto R50 = px_6[ 0 ];
            SimdVec<TF,1> R51{ R50 };
            auto R52 = py_6[ 0 ];
            SimdVec<TF,1> R53{ R52 };
            auto R54 = R28[ 1 ];
            SimdVec<TF,1> R55{ R54 };
            SimdVec<TF,2> R56{ R31, R33 };
            auto R57 = R24 - R56;
            auto R58 = R16 * R57;
            auto R59 = R24 + R58;
            auto R60 = R59[ 0 ];
            SimdVec<TF,1> R61{ R60 };
            auto R62 = R59[ 1 ];
            SimdVec<TF,1> R63{ R62 };
            py_0 = R63;
            py_1 = R61;
            pi_0 = R35;
            px_0 = R55;
            py_5 = R53;
            px_5 = R51;
            pi_4 = R49;
            py_4 = R47;
            px_4 = R45;
            pi_3 = R43;
            py_3 = R41;
            px_3 = R39;
            pi_2 = R37;
            pi_1 = R35;
            py_7 = R34;
            py_2 = R32;
            px_1 = R30;
            px_7 = R22;
            px_2 = R20;
            pi_5 = R18;
            px_6 = R12;
            py_6 = R9;
            pi_6 = R5;
            pi_7 = R1;
            continue;
        }
        case_170: {
            nodes_size = 8;
            // mod=[2,3],3,4,5,6,7,8,[8,0], swith_cuts=1
            auto R0 = pi_8[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_8[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = px_2[ 0 ];
            SimdVec<TF,2> R5{ R2, R4 };
            auto R6 = pi_7[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = di_8[ 0 ];
            auto R9 = py_7[ 0 ];
            SimdVec<TF,1> R10{ R9 };
            auto R11 = di_2[ 0 ];
            SimdVec<TF,2> R12{ R8, R11 };
            auto R13 = px_7[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = di_0[ 0 ];
            auto R16 = pi_6[ 0 ];
            SimdVec<TC,1> R17{ R16 };
            auto R18 = di_3[ 0 ];
            SimdVec<TF,2> R19{ R15, R18 };
            auto R20 = R19 - R12;
            auto R21 = R12 / R20;
            auto R22 = py_6[ 0 ];
            SimdVec<TF,1> R23{ R22 };
            auto R24 = px_0[ 0 ];
            auto R25 = px_6[ 0 ];
            SimdVec<TF,1> R26{ R25 };
            auto R27 = px_3[ 0 ];
            SimdVec<TF,1> R28{ R27 };
            auto R29 = py_8[ 0 ];
            SimdVec<TF,1> R30{ R29 };
            auto R31 = py_2[ 0 ];
            SimdVec<TF,2> R32{ R29, R31 };
            SimdVec<TF,2> R33{ R24, R27 };
            auto R34 = R5 - R33;
            auto R35 = R21 * R34;
            auto R36 = R5 + R35;
            auto R37 = R36[ 0 ];
            SimdVec<TF,1> R38{ R37 };
            auto R39 = py_0[ 0 ];
            auto R40 = R36[ 1 ];
            SimdVec<TF,1> R41{ R40 };
            auto R42 = py_3[ 0 ];
            SimdVec<TF,1> R43{ R42 };
            SimdVec<TC,1> R44{ cut_i[num_cut] };
            auto R45 = pi_3[ 0 ];
            SimdVec<TC,1> R46{ R45 };
            auto R47 = px_4[ 0 ];
            SimdVec<TF,1> R48{ R47 };
            auto R49 = py_4[ 0 ];
            SimdVec<TF,1> R50{ R49 };
            auto R51 = pi_4[ 0 ];
            SimdVec<TC,1> R52{ R51 };
            auto R53 = px_5[ 0 ];
            SimdVec<TF,1> R54{ R53 };
            auto R55 = py_5[ 0 ];
            SimdVec<TF,1> R56{ R55 };
            auto R57 = pi_5[ 0 ];
            SimdVec<TC,1> R58{ R57 };
            SimdVec<TF,2> R59{ R39, R42 };
            auto R60 = R32 - R59;
            auto R61 = R21 * R60;
            auto R62 = R32 + R61;
            auto R63 = R62[ 0 ];
            SimdVec<TF,1> R64{ R63 };
            auto R65 = R62[ 1 ];
            SimdVec<TF,1> R66{ R65 };
            py_0 = R66;
            py_7 = R64;
            pi_0 = R44;
            pi_3 = R58;
            py_3 = R56;
            px_3 = R54;
            pi_2 = R52;
            py_2 = R50;
            px_2 = R48;
            pi_1 = R46;
            pi_7 = R44;
            py_1 = R43;
            px_0 = R41;
            px_7 = R38;
            py_6 = R30;
            px_1 = R28;
            px_4 = R26;
            py_4 = R23;
            pi_4 = R17;
            px_5 = R14;
            py_5 = R10;
            pi_5 = R7;
            px_6 = R3;
            pi_6 = R1;
            continue;
        }
        case_91: {
            nodes_size = 8;
            // mod=[6,0],0,1,2,3,4,5,[5,6], swith_cuts=0
            auto R0 = pi_5[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_0[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = px_6[ 0 ];
            SimdVec<TF,2> R5{ R2, R4 };
            auto R6 = pi_4[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = di_0[ 0 ];
            auto R9 = py_4[ 0 ];
            SimdVec<TF,1> R10{ R9 };
            auto R11 = di_6[ 0 ];
            SimdVec<TF,2> R12{ R8, R11 };
            auto R13 = px_4[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = di_5[ 0 ];
            SimdVec<TF,2> R16{ R11, R15 };
            auto R17 = R16 - R12;
            auto R18 = R12 / R17;
            auto R19 = pi_3[ 0 ];
            SimdVec<TC,1> R20{ R19 };
            auto R21 = px_5[ 0 ];
            SimdVec<TF,1> R22{ R21 };
            auto R23 = py_0[ 0 ];
            SimdVec<TF,1> R24{ R23 };
            auto R25 = py_6[ 0 ];
            SimdVec<TF,2> R26{ R23, R25 };
            SimdVec<TF,2> R27{ R4, R21 };
            auto R28 = R5 - R27;
            auto R29 = R18 * R28;
            auto R30 = R5 + R29;
            auto R31 = R30[ 1 ];
            SimdVec<TF,1> R32{ R31 };
            auto R33 = py_5[ 0 ];
            SimdVec<TF,1> R34{ R33 };
            SimdVec<TC,1> R35{ cut_i[num_cut] };
            auto R36 = pi_0[ 0 ];
            SimdVec<TC,1> R37{ R36 };
            auto R38 = px_1[ 0 ];
            SimdVec<TF,1> R39{ R38 };
            auto R40 = py_1[ 0 ];
            SimdVec<TF,1> R41{ R40 };
            auto R42 = pi_1[ 0 ];
            SimdVec<TC,1> R43{ R42 };
            auto R44 = px_2[ 0 ];
            SimdVec<TF,1> R45{ R44 };
            auto R46 = py_2[ 0 ];
            SimdVec<TF,1> R47{ R46 };
            auto R48 = pi_2[ 0 ];
            SimdVec<TC,1> R49{ R48 };
            auto R50 = px_3[ 0 ];
            SimdVec<TF,1> R51{ R50 };
            auto R52 = py_3[ 0 ];
            SimdVec<TF,1> R53{ R52 };
            auto R54 = R30[ 0 ];
            SimdVec<TF,1> R55{ R54 };
            SimdVec<TF,2> R56{ R25, R33 };
            auto R57 = R26 - R56;
            auto R58 = R18 * R57;
            auto R59 = R26 + R58;
            auto R60 = R59[ 1 ];
            SimdVec<TF,1> R61{ R60 };
            auto R62 = R59[ 0 ];
            SimdVec<TF,1> R63{ R62 };
            py_0 = R63;
            py_7 = R61;
            pi_0 = R35;
            px_0 = R55;
            py_4 = R53;
            px_4 = R51;
            pi_3 = R49;
            py_3 = R47;
            px_3 = R45;
            pi_2 = R43;
            py_2 = R41;
            px_2 = R39;
            pi_1 = R37;
            pi_7 = R35;
            py_6 = R34;
            px_7 = R32;
            py_1 = R24;
            px_6 = R22;
            pi_4 = R20;
            px_5 = R14;
            py_5 = R10;
            pi_5 = R7;
            px_1 = R3;
            pi_6 = R1;
            continue;
        }
        case_210: {
            nodes_size = 8;
            // mod=[6,7],[0,1],1,2,3,4,5,6, swith_cuts=1
            auto R0 = pi_6[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_0[ 0 ];
            auto R3 = pi_5[ 0 ];
            SimdVec<TC,1> R4{ R3 };
            auto R5 = px_7[ 0 ];
            SimdVec<TF,2> R6{ R2, R5 };
            auto R7 = py_5[ 0 ];
            SimdVec<TF,1> R8{ R7 };
            auto R9 = di_0[ 0 ];
            auto R10 = px_5[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = di_7[ 0 ];
            SimdVec<TF,2> R13{ R9, R12 };
            auto R14 = pi_4[ 0 ];
            SimdVec<TC,1> R15{ R14 };
            auto R16 = di_1[ 0 ];
            auto R17 = py_4[ 0 ];
            SimdVec<TF,1> R18{ R17 };
            auto R19 = di_6[ 0 ];
            SimdVec<TF,2> R20{ R16, R19 };
            auto R21 = R20 - R13;
            auto R22 = R13 / R21;
            auto R23 = px_4[ 0 ];
            SimdVec<TF,1> R24{ R23 };
            auto R25 = px_1[ 0 ];
            SimdVec<TF,1> R26{ R25 };
            auto R27 = px_6[ 0 ];
            SimdVec<TF,1> R28{ R27 };
            auto R29 = py_0[ 0 ];
            SimdVec<TF,2> R30{ R25, R27 };
            auto R31 = R6 - R30;
            auto R32 = R22 * R31;
            auto R33 = R6 + R32;
            auto R34 = R33[ 0 ];
            SimdVec<TF,1> R35{ R34 };
            auto R36 = py_7[ 0 ];
            SimdVec<TF,2> R37{ R29, R36 };
            auto R38 = R33[ 1 ];
            SimdVec<TF,1> R39{ R38 };
            auto R40 = py_1[ 0 ];
            SimdVec<TF,1> R41{ R40 };
            auto R42 = py_6[ 0 ];
            SimdVec<TF,1> R43{ R42 };
            SimdVec<TC,1> R44{ cut_i[num_cut] };
            auto R45 = pi_1[ 0 ];
            SimdVec<TC,1> R46{ R45 };
            auto R47 = px_2[ 0 ];
            SimdVec<TF,1> R48{ R47 };
            auto R49 = py_2[ 0 ];
            SimdVec<TF,1> R50{ R49 };
            auto R51 = pi_2[ 0 ];
            SimdVec<TC,1> R52{ R51 };
            auto R53 = px_3[ 0 ];
            SimdVec<TF,1> R54{ R53 };
            auto R55 = py_3[ 0 ];
            SimdVec<TF,1> R56{ R55 };
            auto R57 = pi_3[ 0 ];
            SimdVec<TC,1> R58{ R57 };
            SimdVec<TF,2> R59{ R40, R42 };
            auto R60 = R37 - R59;
            auto R61 = R22 * R60;
            auto R62 = R37 + R61;
            auto R63 = R62[ 0 ];
            SimdVec<TF,1> R64{ R63 };
            auto R65 = R62[ 1 ];
            SimdVec<TF,1> R66{ R65 };
            py_0 = R66;
            py_1 = R64;
            pi_0 = R44;
            pi_4 = R58;
            py_4 = R56;
            px_4 = R54;
            pi_3 = R52;
            py_3 = R50;
            px_3 = R48;
            pi_2 = R46;
            pi_1 = R44;
            py_7 = R43;
            py_2 = R41;
            px_0 = R39;
            px_1 = R35;
            px_7 = R28;
            px_2 = R26;
            px_5 = R24;
            py_5 = R18;
            pi_5 = R15;
            px_6 = R11;
            py_6 = R8;
            pi_6 = R4;
            pi_7 = R1;
            continue;
        }
        case_133: {
            nodes_size = 9;
            // mod=0,1,2,3,4,5,[5,6],[6,7],7, swith_cuts=1
            auto R0 = pi_7[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_0[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_0[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_0[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_1[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = py_1[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = pi_1[ 0 ];
            SimdVec<TC,1> R13{ R12 };
            auto R14 = px_2[ 0 ];
            SimdVec<TF,1> R15{ R14 };
            auto R16 = py_2[ 0 ];
            SimdVec<TF,1> R17{ R16 };
            auto R18 = pi_2[ 0 ];
            SimdVec<TC,1> R19{ R18 };
            auto R20 = px_3[ 0 ];
            SimdVec<TF,1> R21{ R20 };
            auto R22 = py_3[ 0 ];
            SimdVec<TF,1> R23{ R22 };
            auto R24 = pi_3[ 0 ];
            SimdVec<TC,1> R25{ R24 };
            auto R26 = px_4[ 0 ];
            SimdVec<TF,1> R27{ R26 };
            auto R28 = py_4[ 0 ];
            SimdVec<TF,1> R29{ R28 };
            auto R30 = pi_4[ 0 ];
            SimdVec<TC,1> R31{ R30 };
            auto R32 = px_5[ 0 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = py_5[ 0 ];
            SimdVec<TF,1> R35{ R34 };
            auto R36 = pi_5[ 0 ];
            SimdVec<TC,1> R37{ R36 };
            auto R38 = px_6[ 0 ];
            SimdVec<TF,2> R39{ R38, R32 };
            SimdVec<TC,1> R40{ cut_i[num_cut] };
            auto R41 = di_6[ 0 ];
            auto R42 = di_5[ 0 ];
            SimdVec<TF,2> R43{ R41, R42 };
            auto R44 = py_7[ 0 ];
            SimdVec<TF,1> R45{ R44 };
            auto R46 = di_7[ 0 ];
            SimdVec<TF,2> R47{ R46, R41 };
            auto R48 = R47 - R43;
            auto R49 = R43 / R48;
            auto R50 = py_6[ 0 ];
            SimdVec<TF,2> R51{ R44, R50 };
            SimdVec<TF,2> R52{ R50, R34 };
            auto R53 = R52 - R51;
            auto R54 = R49 * R53;
            auto R55 = R52 + R54;
            auto R56 = R55[ 0 ];
            SimdVec<TF,1> R57{ R56 };
            auto R58 = px_7[ 0 ];
            SimdVec<TF,1> R59{ R58 };
            auto R60 = R55[ 1 ];
            SimdVec<TF,1> R61{ R60 };
            SimdVec<TF,2> R62{ R58, R38 };
            auto R63 = R39 - R62;
            auto R64 = R49 * R63;
            auto R65 = R39 + R64;
            auto R66 = R65[ 0 ];
            SimdVec<TF,1> R67{ R66 };
            auto R68 = R65[ 1 ];
            SimdVec<TF,1> R69{ R68 };
            px_6 = R69;
            px_7 = R67;
            py_6 = R61;
            px_8 = R59;
            py_7 = R57;
            py_8 = R45;
            pi_6 = R40;
            pi_7 = R40;
            pi_5 = R37;
            py_5 = R35;
            px_5 = R33;
            pi_4 = R31;
            py_4 = R29;
            px_4 = R27;
            pi_3 = R25;
            py_3 = R23;
            px_3 = R21;
            pi_2 = R19;
            py_2 = R17;
            px_2 = R15;
            pi_1 = R13;
            py_1 = R11;
            px_1 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_8 = R1;
            continue;
        }
        case_127: {
            nodes_size = 9;
            // mod=0,1,2,3,4,[4,5],[5,6],6,7, swith_cuts=0
            auto R0 = pi_7[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_0[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_0[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_0[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_1[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = py_1[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = pi_1[ 0 ];
            SimdVec<TC,1> R13{ R12 };
            auto R14 = px_2[ 0 ];
            SimdVec<TF,1> R15{ R14 };
            auto R16 = py_2[ 0 ];
            SimdVec<TF,1> R17{ R16 };
            auto R18 = pi_2[ 0 ];
            SimdVec<TC,1> R19{ R18 };
            auto R20 = px_3[ 0 ];
            SimdVec<TF,1> R21{ R20 };
            auto R22 = py_3[ 0 ];
            SimdVec<TF,1> R23{ R22 };
            auto R24 = pi_3[ 0 ];
            SimdVec<TC,1> R25{ R24 };
            auto R26 = px_4[ 0 ];
            SimdVec<TF,1> R27{ R26 };
            auto R28 = py_4[ 0 ];
            SimdVec<TF,1> R29{ R28 };
            auto R30 = pi_4[ 0 ];
            SimdVec<TC,1> R31{ R30 };
            auto R32 = px_6[ 0 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = di_4[ 0 ];
            SimdVec<TF,2> R35{ R26, R32 };
            auto R36 = py_7[ 0 ];
            SimdVec<TF,1> R37{ R36 };
            auto R38 = di_6[ 0 ];
            SimdVec<TF,2> R39{ R34, R38 };
            auto R40 = px_7[ 0 ];
            SimdVec<TF,1> R41{ R40 };
            auto R42 = di_5[ 0 ];
            SimdVec<TF,2> R43{ R42, R42 };
            auto R44 = R43 - R39;
            auto R45 = R39 / R44;
            auto R46 = pi_6[ 0 ];
            SimdVec<TC,1> R47{ R46 };
            auto R48 = px_5[ 0 ];
            SimdVec<TF,2> R49{ R48, R48 };
            auto R50 = R35 - R49;
            auto R51 = R45 * R50;
            auto R52 = R35 + R51;
            auto R53 = R52[ 1 ];
            SimdVec<TF,1> R54{ R53 };
            auto R55 = py_6[ 0 ];
            SimdVec<TF,1> R56{ R55 };
            auto R57 = py_5[ 0 ];
            SimdVec<TF,2> R58{ R57, R57 };
            SimdVec<TF,2> R59{ R28, R55 };
            auto R60 = R59 - R58;
            auto R61 = R45 * R60;
            auto R62 = R59 + R61;
            auto R63 = R62[ 1 ];
            SimdVec<TF,1> R64{ R63 };
            SimdVec<TC,1> R65{ cut_i[num_cut] };
            auto R66 = R52[ 0 ];
            SimdVec<TF,1> R67{ R66 };
            auto R68 = R62[ 0 ];
            SimdVec<TF,1> R69{ R68 };
            py_5 = R69;
            px_5 = R67;
            pi_5 = R65;
            pi_6 = R65;
            py_6 = R64;
            py_7 = R56;
            px_6 = R54;
            pi_7 = R47;
            px_8 = R41;
            py_8 = R37;
            px_7 = R33;
            pi_4 = R31;
            py_4 = R29;
            px_4 = R27;
            pi_3 = R25;
            py_3 = R23;
            px_3 = R21;
            pi_2 = R19;
            py_2 = R17;
            px_2 = R15;
            pi_1 = R13;
            py_1 = R11;
            px_1 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_8 = R1;
            continue;
        }
        case_122: {
            nodes_size = 9;
            // mod=0,1,2,3,[3,4],[4,5],5,6,7, swith_cuts=0
            auto R0 = pi_7[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_0[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_0[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_0[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_1[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = py_1[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = pi_1[ 0 ];
            SimdVec<TC,1> R13{ R12 };
            auto R14 = px_2[ 0 ];
            SimdVec<TF,1> R15{ R14 };
            auto R16 = py_2[ 0 ];
            SimdVec<TF,1> R17{ R16 };
            auto R18 = pi_2[ 0 ];
            SimdVec<TC,1> R19{ R18 };
            auto R20 = px_3[ 0 ];
            SimdVec<TF,1> R21{ R20 };
            auto R22 = py_3[ 0 ];
            SimdVec<TF,1> R23{ R22 };
            auto R24 = pi_3[ 0 ];
            SimdVec<TC,1> R25{ R24 };
            auto R26 = px_4[ 0 ];
            SimdVec<TF,2> R27{ R20, R26 };
            auto R28 = py_7[ 0 ];
            SimdVec<TF,1> R29{ R28 };
            auto R30 = di_3[ 0 ];
            auto R31 = px_7[ 0 ];
            SimdVec<TF,1> R32{ R31 };
            auto R33 = di_4[ 0 ];
            SimdVec<TF,2> R34{ R30, R33 };
            auto R35 = pi_6[ 0 ];
            SimdVec<TC,1> R36{ R35 };
            auto R37 = di_5[ 0 ];
            SimdVec<TF,2> R38{ R33, R37 };
            auto R39 = R38 - R34;
            auto R40 = R34 / R39;
            auto R41 = py_6[ 0 ];
            SimdVec<TF,1> R42{ R41 };
            auto R43 = px_5[ 0 ];
            SimdVec<TF,1> R44{ R43 };
            auto R45 = py_4[ 0 ];
            SimdVec<TF,2> R46{ R22, R45 };
            SimdVec<TF,2> R47{ R26, R43 };
            auto R48 = R27 - R47;
            auto R49 = R40 * R48;
            auto R50 = R27 + R49;
            auto R51 = R50[ 1 ];
            SimdVec<TF,1> R52{ R51 };
            auto R53 = py_5[ 0 ];
            SimdVec<TF,1> R54{ R53 };
            SimdVec<TC,1> R55{ cut_i[num_cut] };
            auto R56 = pi_5[ 0 ];
            SimdVec<TC,1> R57{ R56 };
            auto R58 = px_6[ 0 ];
            SimdVec<TF,1> R59{ R58 };
            auto R60 = R50[ 0 ];
            SimdVec<TF,1> R61{ R60 };
            SimdVec<TF,2> R62{ R45, R53 };
            auto R63 = R46 - R62;
            auto R64 = R40 * R63;
            auto R65 = R46 + R64;
            auto R66 = R65[ 1 ];
            SimdVec<TF,1> R67{ R66 };
            auto R68 = R65[ 0 ];
            SimdVec<TF,1> R69{ R68 };
            py_4 = R69;
            py_5 = R67;
            pi_4 = R55;
            px_4 = R61;
            px_7 = R59;
            pi_6 = R57;
            pi_5 = R55;
            py_6 = R54;
            px_5 = R52;
            px_6 = R44;
            py_7 = R42;
            pi_7 = R36;
            px_8 = R32;
            py_8 = R29;
            pi_3 = R25;
            py_3 = R23;
            px_3 = R21;
            pi_2 = R19;
            py_2 = R17;
            px_2 = R15;
            pi_1 = R13;
            py_1 = R11;
            px_1 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_8 = R1;
            continue;
        }
        case_118: {
            nodes_size = 9;
            // mod=0,1,2,[2,3],[3,4],4,5,6,7, swith_cuts=0
            auto R0 = pi_7[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_0[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_0[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_0[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_1[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = py_1[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = pi_1[ 0 ];
            SimdVec<TC,1> R13{ R12 };
            auto R14 = px_2[ 0 ];
            SimdVec<TF,1> R15{ R14 };
            auto R16 = py_2[ 0 ];
            SimdVec<TF,1> R17{ R16 };
            auto R18 = pi_2[ 0 ];
            SimdVec<TC,1> R19{ R18 };
            auto R20 = px_3[ 0 ];
            SimdVec<TF,2> R21{ R14, R20 };
            auto R22 = py_7[ 0 ];
            SimdVec<TF,1> R23{ R22 };
            auto R24 = di_2[ 0 ];
            auto R25 = px_7[ 0 ];
            SimdVec<TF,1> R26{ R25 };
            auto R27 = di_3[ 0 ];
            SimdVec<TF,2> R28{ R24, R27 };
            auto R29 = pi_6[ 0 ];
            SimdVec<TC,1> R30{ R29 };
            auto R31 = di_4[ 0 ];
            SimdVec<TF,2> R32{ R27, R31 };
            auto R33 = R32 - R28;
            auto R34 = R28 / R33;
            auto R35 = py_6[ 0 ];
            SimdVec<TF,1> R36{ R35 };
            auto R37 = px_4[ 0 ];
            SimdVec<TF,1> R38{ R37 };
            auto R39 = py_3[ 0 ];
            SimdVec<TF,2> R40{ R16, R39 };
            SimdVec<TF,2> R41{ R20, R37 };
            auto R42 = R21 - R41;
            auto R43 = R34 * R42;
            auto R44 = R21 + R43;
            auto R45 = R44[ 1 ];
            SimdVec<TF,1> R46{ R45 };
            auto R47 = py_4[ 0 ];
            SimdVec<TF,1> R48{ R47 };
            SimdVec<TC,1> R49{ cut_i[num_cut] };
            auto R50 = pi_4[ 0 ];
            SimdVec<TC,1> R51{ R50 };
            auto R52 = px_5[ 0 ];
            SimdVec<TF,1> R53{ R52 };
            auto R54 = py_5[ 0 ];
            SimdVec<TF,1> R55{ R54 };
            auto R56 = pi_5[ 0 ];
            SimdVec<TC,1> R57{ R56 };
            auto R58 = px_6[ 0 ];
            SimdVec<TF,1> R59{ R58 };
            auto R60 = R44[ 0 ];
            SimdVec<TF,1> R61{ R60 };
            SimdVec<TF,2> R62{ R39, R47 };
            auto R63 = R40 - R62;
            auto R64 = R34 * R63;
            auto R65 = R40 + R64;
            auto R66 = R65[ 1 ];
            SimdVec<TF,1> R67{ R66 };
            auto R68 = R65[ 0 ];
            SimdVec<TF,1> R69{ R68 };
            py_3 = R69;
            py_4 = R67;
            pi_3 = R49;
            px_3 = R61;
            px_7 = R59;
            pi_6 = R57;
            py_6 = R55;
            px_6 = R53;
            pi_5 = R51;
            pi_4 = R49;
            py_5 = R48;
            px_4 = R46;
            px_5 = R38;
            py_7 = R36;
            pi_7 = R30;
            px_8 = R26;
            py_8 = R23;
            pi_2 = R19;
            py_2 = R17;
            px_2 = R15;
            pi_1 = R13;
            py_1 = R11;
            px_1 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_8 = R1;
            continue;
        }
        case_115: {
            nodes_size = 9;
            // mod=0,1,[1,2],[2,3],3,4,5,6,7, swith_cuts=0
            auto R0 = pi_7[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_0[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_0[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_0[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_1[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = py_1[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = pi_1[ 0 ];
            SimdVec<TC,1> R13{ R12 };
            auto R14 = px_2[ 0 ];
            SimdVec<TF,2> R15{ R8, R14 };
            auto R16 = py_7[ 0 ];
            SimdVec<TF,1> R17{ R16 };
            auto R18 = di_1[ 0 ];
            auto R19 = px_7[ 0 ];
            SimdVec<TF,1> R20{ R19 };
            auto R21 = di_2[ 0 ];
            SimdVec<TF,2> R22{ R18, R21 };
            auto R23 = pi_6[ 0 ];
            SimdVec<TC,1> R24{ R23 };
            auto R25 = di_3[ 0 ];
            SimdVec<TF,2> R26{ R21, R25 };
            auto R27 = R26 - R22;
            auto R28 = R22 / R27;
            auto R29 = py_6[ 0 ];
            SimdVec<TF,1> R30{ R29 };
            auto R31 = px_3[ 0 ];
            SimdVec<TF,1> R32{ R31 };
            auto R33 = py_2[ 0 ];
            SimdVec<TF,2> R34{ R10, R33 };
            SimdVec<TF,2> R35{ R14, R31 };
            auto R36 = R15 - R35;
            auto R37 = R28 * R36;
            auto R38 = R15 + R37;
            auto R39 = R38[ 1 ];
            SimdVec<TF,1> R40{ R39 };
            auto R41 = py_3[ 0 ];
            SimdVec<TF,1> R42{ R41 };
            SimdVec<TC,1> R43{ cut_i[num_cut] };
            auto R44 = pi_3[ 0 ];
            SimdVec<TC,1> R45{ R44 };
            auto R46 = px_4[ 0 ];
            SimdVec<TF,1> R47{ R46 };
            auto R48 = py_4[ 0 ];
            SimdVec<TF,1> R49{ R48 };
            auto R50 = pi_4[ 0 ];
            SimdVec<TC,1> R51{ R50 };
            auto R52 = px_5[ 0 ];
            SimdVec<TF,1> R53{ R52 };
            auto R54 = py_5[ 0 ];
            SimdVec<TF,1> R55{ R54 };
            auto R56 = pi_5[ 0 ];
            SimdVec<TC,1> R57{ R56 };
            auto R58 = px_6[ 0 ];
            SimdVec<TF,1> R59{ R58 };
            auto R60 = R38[ 0 ];
            SimdVec<TF,1> R61{ R60 };
            SimdVec<TF,2> R62{ R33, R41 };
            auto R63 = R34 - R62;
            auto R64 = R28 * R63;
            auto R65 = R34 + R64;
            auto R66 = R65[ 1 ];
            SimdVec<TF,1> R67{ R66 };
            auto R68 = R65[ 0 ];
            SimdVec<TF,1> R69{ R68 };
            py_2 = R69;
            py_3 = R67;
            pi_2 = R43;
            px_2 = R61;
            px_7 = R59;
            pi_6 = R57;
            py_6 = R55;
            px_6 = R53;
            pi_5 = R51;
            py_5 = R49;
            px_5 = R47;
            pi_4 = R45;
            pi_3 = R43;
            py_4 = R42;
            px_3 = R40;
            px_4 = R32;
            py_7 = R30;
            pi_7 = R24;
            px_8 = R20;
            py_8 = R17;
            pi_1 = R13;
            py_1 = R11;
            px_1 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_8 = R1;
            continue;
        }
        case_113: {
            nodes_size = 9;
            // mod=0,[0,1],[1,2],2,3,4,5,6,7, swith_cuts=1
            auto R0 = pi_7[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_0[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_0[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_0[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_1[ 0 ];
            SimdVec<TF,2> R9{ R8, R2 };
            auto R10 = py_7[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = di_1[ 0 ];
            auto R13 = px_7[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = di_0[ 0 ];
            SimdVec<TF,2> R16{ R12, R15 };
            auto R17 = pi_6[ 0 ];
            SimdVec<TC,1> R18{ R17 };
            auto R19 = di_2[ 0 ];
            SimdVec<TF,2> R20{ R19, R12 };
            auto R21 = R20 - R16;
            auto R22 = R16 / R21;
            auto R23 = py_6[ 0 ];
            SimdVec<TF,1> R24{ R23 };
            auto R25 = px_2[ 0 ];
            SimdVec<TF,1> R26{ R25 };
            auto R27 = py_1[ 0 ];
            SimdVec<TF,2> R28{ R27, R4 };
            SimdVec<TF,2> R29{ R25, R8 };
            auto R30 = R9 - R29;
            auto R31 = R22 * R30;
            auto R32 = R9 + R31;
            auto R33 = R32[ 0 ];
            SimdVec<TF,1> R34{ R33 };
            auto R35 = py_2[ 0 ];
            SimdVec<TF,1> R36{ R35 };
            SimdVec<TC,1> R37{ cut_i[num_cut] };
            auto R38 = pi_2[ 0 ];
            SimdVec<TC,1> R39{ R38 };
            auto R40 = px_3[ 0 ];
            SimdVec<TF,1> R41{ R40 };
            auto R42 = py_3[ 0 ];
            SimdVec<TF,1> R43{ R42 };
            auto R44 = pi_3[ 0 ];
            SimdVec<TC,1> R45{ R44 };
            auto R46 = px_4[ 0 ];
            SimdVec<TF,1> R47{ R46 };
            auto R48 = py_4[ 0 ];
            SimdVec<TF,1> R49{ R48 };
            auto R50 = pi_4[ 0 ];
            SimdVec<TC,1> R51{ R50 };
            auto R52 = px_5[ 0 ];
            SimdVec<TF,1> R53{ R52 };
            auto R54 = py_5[ 0 ];
            SimdVec<TF,1> R55{ R54 };
            auto R56 = pi_5[ 0 ];
            SimdVec<TC,1> R57{ R56 };
            auto R58 = px_6[ 0 ];
            SimdVec<TF,1> R59{ R58 };
            auto R60 = R32[ 1 ];
            SimdVec<TF,1> R61{ R60 };
            SimdVec<TF,2> R62{ R35, R27 };
            auto R63 = R28 - R62;
            auto R64 = R22 * R63;
            auto R65 = R28 + R64;
            auto R66 = R65[ 0 ];
            SimdVec<TF,1> R67{ R66 };
            auto R68 = R65[ 1 ];
            SimdVec<TF,1> R69{ R68 };
            py_1 = R69;
            py_2 = R67;
            pi_1 = R37;
            px_1 = R61;
            px_7 = R59;
            pi_6 = R57;
            py_6 = R55;
            px_6 = R53;
            pi_5 = R51;
            py_5 = R49;
            px_5 = R47;
            pi_4 = R45;
            py_4 = R43;
            px_4 = R41;
            pi_3 = R39;
            pi_2 = R37;
            py_3 = R36;
            px_2 = R34;
            px_3 = R26;
            py_7 = R24;
            pi_7 = R18;
            px_8 = R14;
            py_8 = R11;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_8 = R1;
            continue;
        }
        case_112: {
            nodes_size = 9;
            // mod=1,2,3,4,5,6,7,[7,0],[0,1], swith_cuts=0
            SimdVec<TC,1> R0{ cut_i[num_cut] };
            auto R1 = px_1[ 0 ];
            SimdVec<TF,1> R2{ R1 };
            auto R3 = py_1[ 0 ];
            SimdVec<TF,1> R4{ R3 };
            auto R5 = pi_1[ 0 ];
            SimdVec<TC,1> R6{ R5 };
            auto R7 = px_2[ 0 ];
            SimdVec<TF,1> R8{ R7 };
            auto R9 = py_2[ 0 ];
            SimdVec<TF,1> R10{ R9 };
            auto R11 = pi_2[ 0 ];
            SimdVec<TC,1> R12{ R11 };
            auto R13 = px_3[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = py_3[ 0 ];
            SimdVec<TF,1> R16{ R15 };
            auto R17 = pi_3[ 0 ];
            SimdVec<TC,1> R18{ R17 };
            auto R19 = px_4[ 0 ];
            SimdVec<TF,1> R20{ R19 };
            auto R21 = py_4[ 0 ];
            SimdVec<TF,1> R22{ R21 };
            auto R23 = pi_4[ 0 ];
            SimdVec<TC,1> R24{ R23 };
            auto R25 = px_5[ 0 ];
            SimdVec<TF,1> R26{ R25 };
            auto R27 = py_5[ 0 ];
            SimdVec<TF,1> R28{ R27 };
            auto R29 = pi_5[ 0 ];
            SimdVec<TC,1> R30{ R29 };
            auto R31 = px_6[ 0 ];
            SimdVec<TF,1> R32{ R31 };
            auto R33 = py_6[ 0 ];
            SimdVec<TF,1> R34{ R33 };
            auto R35 = pi_6[ 0 ];
            SimdVec<TC,1> R36{ R35 };
            auto R37 = px_7[ 0 ];
            SimdVec<TF,2> R38{ R37, R1 };
            SimdVec<TF,1> R39{ R37 };
            auto R40 = py_7[ 0 ];
            SimdVec<TF,2> R41{ R40, R3 };
            SimdVec<TF,1> R42{ R40 };
            auto R43 = pi_7[ 0 ];
            SimdVec<TC,1> R44{ R43 };
            auto R45 = px_0[ 0 ];
            SimdVec<TF,2> R46{ R45, R45 };
            auto R47 = R46 - R38;
            auto R48 = di_0[ 0 ];
            SimdVec<TF,2> R49{ R48, R48 };
            auto R50 = py_0[ 0 ];
            SimdVec<TF,2> R51{ R50, R50 };
            auto R52 = R51 - R41;
            auto R53 = di_1[ 0 ];
            auto R54 = di_7[ 0 ];
            SimdVec<TF,2> R55{ R54, R53 };
            auto R56 = R55 - R49;
            auto R57 = R49 / R56;
            auto R58 = R57 * R52;
            auto R59 = R51 + R58;
            auto R60 = R59[ 1 ];
            SimdVec<TF,1> R61{ R60 };
            auto R62 = R57 * R47;
            auto R63 = R46 + R62;
            auto R64 = R63[ 1 ];
            SimdVec<TF,1> R65{ R64 };
            auto R66 = R59[ 0 ];
            SimdVec<TF,1> R67{ R66 };
            auto R68 = R63[ 0 ];
            SimdVec<TF,1> R69{ R68 };
            px_7 = R69;
            py_7 = R67;
            px_8 = R65;
            py_8 = R61;
            pi_7 = R0;
            pi_6 = R44;
            py_6 = R42;
            px_6 = R39;
            pi_5 = R36;
            py_5 = R34;
            px_5 = R32;
            pi_4 = R30;
            py_4 = R28;
            px_4 = R26;
            pi_3 = R24;
            py_3 = R22;
            px_3 = R20;
            pi_2 = R18;
            py_2 = R16;
            px_2 = R14;
            pi_1 = R12;
            py_1 = R10;
            px_1 = R8;
            pi_0 = R6;
            py_0 = R4;
            px_0 = R2;
            pi_8 = R0;
            continue;
        }
        case_140: {
            nodes_size = 9;
            // mod=[7,0],0,1,2,3,4,5,6,[6,7], swith_cuts=1
            auto R0 = pi_6[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_6[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = px_7[ 0 ];
            SimdVec<TF,2> R5{ R2, R4 };
            auto R6 = pi_5[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = di_6[ 0 ];
            auto R9 = py_5[ 0 ];
            SimdVec<TF,1> R10{ R9 };
            auto R11 = di_7[ 0 ];
            SimdVec<TF,2> R12{ R8, R11 };
            auto R13 = px_5[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = di_0[ 0 ];
            SimdVec<TF,2> R16{ R11, R15 };
            auto R17 = R16 - R12;
            auto R18 = R12 / R17;
            auto R19 = pi_4[ 0 ];
            SimdVec<TC,1> R20{ R19 };
            auto R21 = px_0[ 0 ];
            SimdVec<TF,1> R22{ R21 };
            auto R23 = py_6[ 0 ];
            SimdVec<TF,1> R24{ R23 };
            auto R25 = py_7[ 0 ];
            SimdVec<TF,2> R26{ R23, R25 };
            SimdVec<TF,2> R27{ R4, R21 };
            auto R28 = R5 - R27;
            auto R29 = R18 * R28;
            auto R30 = R5 + R29;
            auto R31 = R30[ 0 ];
            SimdVec<TF,1> R32{ R31 };
            auto R33 = py_0[ 0 ];
            SimdVec<TF,1> R34{ R33 };
            SimdVec<TC,1> R35{ cut_i[num_cut] };
            auto R36 = pi_0[ 0 ];
            SimdVec<TC,1> R37{ R36 };
            auto R38 = px_1[ 0 ];
            SimdVec<TF,1> R39{ R38 };
            auto R40 = py_1[ 0 ];
            SimdVec<TF,1> R41{ R40 };
            auto R42 = pi_1[ 0 ];
            SimdVec<TC,1> R43{ R42 };
            auto R44 = px_2[ 0 ];
            SimdVec<TF,1> R45{ R44 };
            auto R46 = py_2[ 0 ];
            SimdVec<TF,1> R47{ R46 };
            auto R48 = pi_2[ 0 ];
            SimdVec<TC,1> R49{ R48 };
            auto R50 = px_3[ 0 ];
            SimdVec<TF,1> R51{ R50 };
            auto R52 = py_3[ 0 ];
            SimdVec<TF,1> R53{ R52 };
            auto R54 = pi_3[ 0 ];
            SimdVec<TC,1> R55{ R54 };
            auto R56 = px_4[ 0 ];
            SimdVec<TF,1> R57{ R56 };
            auto R58 = py_4[ 0 ];
            SimdVec<TF,1> R59{ R58 };
            auto R60 = R30[ 1 ];
            SimdVec<TF,1> R61{ R60 };
            SimdVec<TF,2> R62{ R25, R33 };
            auto R63 = R26 - R62;
            auto R64 = R18 * R63;
            auto R65 = R26 + R64;
            auto R66 = R65[ 0 ];
            SimdVec<TF,1> R67{ R66 };
            auto R68 = R65[ 1 ];
            SimdVec<TF,1> R69{ R68 };
            py_0 = R69;
            py_8 = R67;
            pi_0 = R35;
            px_0 = R61;
            py_5 = R59;
            px_5 = R57;
            pi_4 = R55;
            py_4 = R53;
            px_4 = R51;
            pi_3 = R49;
            py_3 = R47;
            px_3 = R45;
            pi_2 = R43;
            py_2 = R41;
            px_2 = R39;
            pi_1 = R37;
            pi_8 = R35;
            py_1 = R34;
            px_8 = R32;
            py_7 = R24;
            px_1 = R22;
            pi_5 = R20;
            px_6 = R14;
            py_6 = R10;
            pi_6 = R7;
            px_7 = R3;
            pi_7 = R1;
            continue;
        }
    }
    VF::store_aligned( px + 0, px_0 );
    VF::store_aligned( px + 1, px_1 );
    VF::store_aligned( px + 2, px_2 );
    VF::store_aligned( px + 3, px_3 );
    VF::store_aligned( px + 4, px_4 );
    VF::store_aligned( px + 5, px_5 );
    VF::store_aligned( px + 6, px_6 );
    VF::store_aligned( px + 7, px_7 );
    VF::store_aligned( px + 8, px_8 );
    VF::store_aligned( px + 9, px_9 );
    VF::store_aligned( py + 0, py_0 );
    VF::store_aligned( py + 1, py_1 );
    VF::store_aligned( py + 2, py_2 );
    VF::store_aligned( py + 3, py_3 );
    VF::store_aligned( py + 4, py_4 );
    VF::store_aligned( py + 5, py_5 );
    VF::store_aligned( py + 6, py_6 );
    VF::store_aligned( py + 7, py_7 );
    VF::store_aligned( py + 8, py_8 );
    VF::store_aligned( py + 9, py_9 );
    VC::store_aligned( pi + 0, pi_0 );
    VC::store_aligned( pi + 1, pi_1 );
    VC::store_aligned( pi + 2, pi_2 );
    VC::store_aligned( pi + 3, pi_3 );
    VC::store_aligned( pi + 4, pi_4 );
    VC::store_aligned( pi + 5, pi_5 );
    VC::store_aligned( pi + 6, pi_6 );
    VC::store_aligned( pi + 7, pi_7 );
    VC::store_aligned( pi + 8, pi_8 );
    VC::store_aligned( pi + 9, pi_9 );
    return true;
}
} // namespace internal
} // namespace sdot
