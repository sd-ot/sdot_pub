static void *dispatch_table[] = {
    &&case_1,
    &&case_1,
    &&case_1,
    &&case_1,
    &&case_1,
    &&case_1,
    &&case_0,
    &&case_0,
    &&case_2,
    &&case_9,
    &&case_23,
    &&case_53,
    &&case_115,
    &&case_241,
    &&case_0,
    &&case_0,
    &&case_3,
    &&case_10,
    &&case_24,
    &&case_54,
    &&case_116,
    &&case_242,
    &&case_0,
    &&case_0,
    &&case_4,
    &&case_11,
    &&case_25,
    &&case_55,
    &&case_117,
    &&case_243,
    &&case_0,
    &&case_0,
    &&case_5,
    &&case_12,
    &&case_26,
    &&case_56,
    &&case_118,
    &&case_244,
    &&case_0,
    &&case_0,
    &&case_6,
    &&case_13,
    &&case_27,
    &&case_57,
    &&case_119,
    &&case_245,
    &&case_0,
    &&case_0,
    &&case_7,
    &&case_14,
    &&case_28,
    &&case_58,
    &&case_120,
    &&case_246,
    &&case_0,
    &&case_0,
    &&case_8,
    &&case_15,
    &&case_29,
    &&case_59,
    &&case_121,
    &&case_247,
    &&case_0,
    &&case_0,
    &&case_1,
    &&case_16,
    &&case_30,
    &&case_60,
    &&case_122,
    &&case_248,
    &&case_0,
    &&case_0,
    &&case_2,
    &&case_17,
    &&case_31,
    &&case_61,
    &&case_123,
    &&case_249,
    &&case_0,
    &&case_0,
    &&case_3,
    &&case_18,
    &&case_32,
    &&case_62,
    &&case_124,
    &&case_250,
    &&case_0,
    &&case_0,
    &&case_4,
    &&case_19,
    &&case_33,
    &&case_63,
    &&case_125,
    &&case_251,
    &&case_0,
    &&case_0,
    &&case_5,
    &&case_20,
    &&case_34,
    &&case_64,
    &&case_126,
    &&case_252,
    &&case_0,
    &&case_0,
    &&case_6,
    &&case_21,
    &&case_35,
    &&case_65,
    &&case_127,
    &&case_253,
    &&case_0,
    &&case_0,
    &&case_7,
    &&case_22,
    &&case_36,
    &&case_66,
    &&case_128,
    &&case_254,
    &&case_0,
    &&case_0,
    &&case_8,
    &&case_8,
    &&case_37,
    &&case_67,
    &&case_129,
    &&case_255,
    &&case_0,
    &&case_0,
    &&case_1,
    &&case_1,
    &&case_38,
    &&case_68,
    &&case_130,
    &&case_256,
    &&case_0,
    &&case_0,
    &&case_2,
    &&case_9,
    &&case_39,
    &&case_69,
    &&case_131,
    &&case_257,
    &&case_0,
    &&case_0,
    &&case_3,
    &&case_10,
    &&case_40,
    &&case_70,
    &&case_132,
    &&case_258,
    &&case_0,
    &&case_0,
    &&case_4,
    &&case_11,
    &&case_41,
    &&case_71,
    &&case_133,
    &&case_259,
    &&case_0,
    &&case_0,
    &&case_5,
    &&case_12,
    &&case_42,
    &&case_72,
    &&case_134,
    &&case_260,
    &&case_0,
    &&case_0,
    &&case_6,
    &&case_13,
    &&case_43,
    &&case_73,
    &&case_135,
    &&case_261,
    &&case_0,
    &&case_0,
    &&case_7,
    &&case_14,
    &&case_44,
    &&case_74,
    &&case_136,
    &&case_262,
    &&case_0,
    &&case_0,
    &&case_8,
    &&case_15,
    &&case_45,
    &&case_75,
    &&case_137,
    &&case_263,
    &&case_0,
    &&case_0,
    &&case_1,
    &&case_16,
    &&case_46,
    &&case_76,
    &&case_138,
    &&case_264,
    &&case_0,
    &&case_0,
    &&case_2,
    &&case_17,
    &&case_47,
    &&case_77,
    &&case_139,
    &&case_265,
    &&case_0,
    &&case_0,
    &&case_3,
    &&case_18,
    &&case_48,
    &&case_78,
    &&case_140,
    &&case_266,
    &&case_0,
    &&case_0,
    &&case_4,
    &&case_19,
    &&case_49,
    &&case_79,
    &&case_141,
    &&case_267,
    &&case_0,
    &&case_0,
    &&case_5,
    &&case_20,
    &&case_50,
    &&case_80,
    &&case_142,
    &&case_268,
    &&case_0,
    &&case_0,
    &&case_6,
    &&case_21,
    &&case_51,
    &&case_81,
    &&case_143,
    &&case_269,
    &&case_0,
    &&case_0,
    &&case_7,
    &&case_22,
    &&case_52,
    &&case_82,
    &&case_144,
    &&case_270,
    &&case_0,
    &&case_0,
    &&case_8,
    &&case_8,
    &&case_8,
    &&case_83,
    &&case_145,
    &&case_271,
    &&case_0,
    &&case_0,
    &&case_1,
    &&case_1,
    &&case_1,
    &&case_84,
    &&case_146,
    &&case_272,
    &&case_0,
    &&case_0,
    &&case_2,
    &&case_9,
    &&case_23,
    &&case_85,
    &&case_147,
    &&case_273,
    &&case_0,
    &&case_0,
    &&case_3,
    &&case_10,
    &&case_24,
    &&case_86,
    &&case_148,
    &&case_274,
    &&case_0,
    &&case_0,
    &&case_4,
    &&case_11,
    &&case_25,
    &&case_87,
    &&case_149,
    &&case_275,
    &&case_0,
    &&case_0,
    &&case_5,
    &&case_12,
    &&case_26,
    &&case_88,
    &&case_150,
    &&case_276,
    &&case_0,
    &&case_0,
    &&case_6,
    &&case_13,
    &&case_27,
    &&case_89,
    &&case_151,
    &&case_277,
    &&case_0,
    &&case_0,
    &&case_7,
    &&case_14,
    &&case_28,
    &&case_90,
    &&case_152,
    &&case_278,
    &&case_0,
    &&case_0,
    &&case_8,
    &&case_15,
    &&case_29,
    &&case_91,
    &&case_153,
    &&case_279,
    &&case_0,
    &&case_0,
    &&case_1,
    &&case_16,
    &&case_30,
    &&case_92,
    &&case_154,
    &&case_280,
    &&case_0,
    &&case_0,
    &&case_2,
    &&case_17,
    &&case_31,
    &&case_93,
    &&case_155,
    &&case_281,
    &&case_0,
    &&case_0,
    &&case_3,
    &&case_18,
    &&case_32,
    &&case_94,
    &&case_156,
    &&case_282,
    &&case_0,
    &&case_0,
    &&case_4,
    &&case_19,
    &&case_33,
    &&case_95,
    &&case_157,
    &&case_283,
    &&case_0,
    &&case_0,
    &&case_5,
    &&case_20,
    &&case_34,
    &&case_96,
    &&case_158,
    &&case_284,
    &&case_0,
    &&case_0,
    &&case_6,
    &&case_21,
    &&case_35,
    &&case_97,
    &&case_159,
    &&case_285,
    &&case_0,
    &&case_0,
    &&case_7,
    &&case_22,
    &&case_36,
    &&case_98,
    &&case_160,
    &&case_286,
    &&case_0,
    &&case_0,
    &&case_8,
    &&case_8,
    &&case_37,
    &&case_99,
    &&case_161,
    &&case_287,
    &&case_0,
    &&case_0,
    &&case_1,
    &&case_1,
    &&case_38,
    &&case_100,
    &&case_162,
    &&case_288,
    &&case_0,
    &&case_0,
    &&case_2,
    &&case_9,
    &&case_39,
    &&case_101,
    &&case_163,
    &&case_289,
    &&case_0,
    &&case_0,
    &&case_3,
    &&case_10,
    &&case_40,
    &&case_102,
    &&case_164,
    &&case_290,
    &&case_0,
    &&case_0,
    &&case_4,
    &&case_11,
    &&case_41,
    &&case_103,
    &&case_165,
    &&case_291,
    &&case_0,
    &&case_0,
    &&case_5,
    &&case_12,
    &&case_42,
    &&case_104,
    &&case_166,
    &&case_292,
    &&case_0,
    &&case_0,
    &&case_6,
    &&case_13,
    &&case_43,
    &&case_105,
    &&case_167,
    &&case_293,
    &&case_0,
    &&case_0,
    &&case_7,
    &&case_14,
    &&case_44,
    &&case_106,
    &&case_168,
    &&case_294,
    &&case_0,
    &&case_0,
    &&case_8,
    &&case_15,
    &&case_45,
    &&case_107,
    &&case_169,
    &&case_295,
    &&case_0,
    &&case_0,
    &&case_1,
    &&case_16,
    &&case_46,
    &&case_108,
    &&case_170,
    &&case_296,
    &&case_0,
    &&case_0,
    &&case_2,
    &&case_17,
    &&case_47,
    &&case_109,
    &&case_171,
    &&case_297,
    &&case_0,
    &&case_0,
    &&case_3,
    &&case_18,
    &&case_48,
    &&case_110,
    &&case_172,
    &&case_298,
    &&case_0,
    &&case_0,
    &&case_4,
    &&case_19,
    &&case_49,
    &&case_111,
    &&case_173,
    &&case_299,
    &&case_0,
    &&case_0,
    &&case_5,
    &&case_20,
    &&case_50,
    &&case_112,
    &&case_174,
    &&case_300,
    &&case_0,
    &&case_0,
    &&case_6,
    &&case_21,
    &&case_51,
    &&case_113,
    &&case_175,
    &&case_301,
    &&case_0,
    &&case_0,
    &&case_7,
    &&case_22,
    &&case_52,
    &&case_114,
    &&case_176,
    &&case_302,
    &&case_0,
    &&case_0,
    &&case_8,
    &&case_8,
    &&case_8,
    &&case_8,
    &&case_177,
    &&case_303,
    &&case_0,
    &&case_0,
    &&case_1,
    &&case_1,
    &&case_1,
    &&case_1,
    &&case_178,
    &&case_304,
    &&case_0,
    &&case_0,
    &&case_2,
    &&case_9,
    &&case_23,
    &&case_53,
    &&case_179,
    &&case_305,
    &&case_0,
    &&case_0,
    &&case_3,
    &&case_10,
    &&case_24,
    &&case_54,
    &&case_180,
    &&case_306,
    &&case_0,
    &&case_0,
    &&case_4,
    &&case_11,
    &&case_25,
    &&case_55,
    &&case_181,
    &&case_307,
    &&case_0,
    &&case_0,
    &&case_5,
    &&case_12,
    &&case_26,
    &&case_56,
    &&case_182,
    &&case_308,
    &&case_0,
    &&case_0,
    &&case_6,
    &&case_13,
    &&case_27,
    &&case_57,
    &&case_183,
    &&case_309,
    &&case_0,
    &&case_0,
    &&case_7,
    &&case_14,
    &&case_28,
    &&case_58,
    &&case_184,
    &&case_310,
    &&case_0,
    &&case_0,
    &&case_8,
    &&case_15,
    &&case_29,
    &&case_59,
    &&case_185,
    &&case_311,
    &&case_0,
    &&case_0,
    &&case_1,
    &&case_16,
    &&case_30,
    &&case_60,
    &&case_186,
    &&case_312,
    &&case_0,
    &&case_0,
    &&case_2,
    &&case_17,
    &&case_31,
    &&case_61,
    &&case_187,
    &&case_313,
    &&case_0,
    &&case_0,
    &&case_3,
    &&case_18,
    &&case_32,
    &&case_62,
    &&case_188,
    &&case_314,
    &&case_0,
    &&case_0,
    &&case_4,
    &&case_19,
    &&case_33,
    &&case_63,
    &&case_189,
    &&case_315,
    &&case_0,
    &&case_0,
    &&case_5,
    &&case_20,
    &&case_34,
    &&case_64,
    &&case_190,
    &&case_316,
    &&case_0,
    &&case_0,
    &&case_6,
    &&case_21,
    &&case_35,
    &&case_65,
    &&case_191,
    &&case_317,
    &&case_0,
    &&case_0,
    &&case_7,
    &&case_22,
    &&case_36,
    &&case_66,
    &&case_192,
    &&case_318,
    &&case_0,
    &&case_0,
    &&case_8,
    &&case_8,
    &&case_37,
    &&case_67,
    &&case_193,
    &&case_319,
    &&case_0,
    &&case_0,
    &&case_1,
    &&case_1,
    &&case_38,
    &&case_68,
    &&case_194,
    &&case_320,
    &&case_0,
    &&case_0,
    &&case_2,
    &&case_9,
    &&case_39,
    &&case_69,
    &&case_195,
    &&case_321,
    &&case_0,
    &&case_0,
    &&case_3,
    &&case_10,
    &&case_40,
    &&case_70,
    &&case_196,
    &&case_322,
    &&case_0,
    &&case_0,
    &&case_4,
    &&case_11,
    &&case_41,
    &&case_71,
    &&case_197,
    &&case_323,
    &&case_0,
    &&case_0,
    &&case_5,
    &&case_12,
    &&case_42,
    &&case_72,
    &&case_198,
    &&case_324,
    &&case_0,
    &&case_0,
    &&case_6,
    &&case_13,
    &&case_43,
    &&case_73,
    &&case_199,
    &&case_325,
    &&case_0,
    &&case_0,
    &&case_7,
    &&case_14,
    &&case_44,
    &&case_74,
    &&case_200,
    &&case_326,
    &&case_0,
    &&case_0,
    &&case_8,
    &&case_15,
    &&case_45,
    &&case_75,
    &&case_201,
    &&case_327,
    &&case_0,
    &&case_0,
    &&case_1,
    &&case_16,
    &&case_46,
    &&case_76,
    &&case_202,
    &&case_328,
    &&case_0,
    &&case_0,
    &&case_2,
    &&case_17,
    &&case_47,
    &&case_77,
    &&case_203,
    &&case_329,
    &&case_0,
    &&case_0,
    &&case_3,
    &&case_18,
    &&case_48,
    &&case_78,
    &&case_204,
    &&case_330,
    &&case_0,
    &&case_0,
    &&case_4,
    &&case_19,
    &&case_49,
    &&case_79,
    &&case_205,
    &&case_331,
    &&case_0,
    &&case_0,
    &&case_5,
    &&case_20,
    &&case_50,
    &&case_80,
    &&case_206,
    &&case_332,
    &&case_0,
    &&case_0,
    &&case_6,
    &&case_21,
    &&case_51,
    &&case_81,
    &&case_207,
    &&case_333,
    &&case_0,
    &&case_0,
    &&case_7,
    &&case_22,
    &&case_52,
    &&case_82,
    &&case_208,
    &&case_334,
    &&case_0,
    &&case_0,
    &&case_8,
    &&case_8,
    &&case_8,
    &&case_83,
    &&case_209,
    &&case_335,
    &&case_0,
    &&case_0,
    &&case_1,
    &&case_1,
    &&case_1,
    &&case_84,
    &&case_210,
    &&case_336,
    &&case_0,
    &&case_0,
    &&case_2,
    &&case_9,
    &&case_23,
    &&case_85,
    &&case_211,
    &&case_337,
    &&case_0,
    &&case_0,
    &&case_3,
    &&case_10,
    &&case_24,
    &&case_86,
    &&case_212,
    &&case_338,
    &&case_0,
    &&case_0,
    &&case_4,
    &&case_11,
    &&case_25,
    &&case_87,
    &&case_213,
    &&case_339,
    &&case_0,
    &&case_0,
    &&case_5,
    &&case_12,
    &&case_26,
    &&case_88,
    &&case_214,
    &&case_340,
    &&case_0,
    &&case_0,
    &&case_6,
    &&case_13,
    &&case_27,
    &&case_89,
    &&case_215,
    &&case_341,
    &&case_0,
    &&case_0,
    &&case_7,
    &&case_14,
    &&case_28,
    &&case_90,
    &&case_216,
    &&case_342,
    &&case_0,
    &&case_0,
    &&case_8,
    &&case_15,
    &&case_29,
    &&case_91,
    &&case_217,
    &&case_343,
    &&case_0,
    &&case_0,
    &&case_1,
    &&case_16,
    &&case_30,
    &&case_92,
    &&case_218,
    &&case_344,
    &&case_0,
    &&case_0,
    &&case_2,
    &&case_17,
    &&case_31,
    &&case_93,
    &&case_219,
    &&case_345,
    &&case_0,
    &&case_0,
    &&case_3,
    &&case_18,
    &&case_32,
    &&case_94,
    &&case_220,
    &&case_346,
    &&case_0,
    &&case_0,
    &&case_4,
    &&case_19,
    &&case_33,
    &&case_95,
    &&case_221,
    &&case_347,
    &&case_0,
    &&case_0,
    &&case_5,
    &&case_20,
    &&case_34,
    &&case_96,
    &&case_222,
    &&case_348,
    &&case_0,
    &&case_0,
    &&case_6,
    &&case_21,
    &&case_35,
    &&case_97,
    &&case_223,
    &&case_349,
    &&case_0,
    &&case_0,
    &&case_7,
    &&case_22,
    &&case_36,
    &&case_98,
    &&case_224,
    &&case_350,
    &&case_0,
    &&case_0,
    &&case_8,
    &&case_8,
    &&case_37,
    &&case_99,
    &&case_225,
    &&case_351,
    &&case_0,
    &&case_0,
    &&case_1,
    &&case_1,
    &&case_38,
    &&case_100,
    &&case_226,
    &&case_352,
    &&case_0,
    &&case_0,
    &&case_2,
    &&case_9,
    &&case_39,
    &&case_101,
    &&case_227,
    &&case_353,
    &&case_0,
    &&case_0,
    &&case_3,
    &&case_10,
    &&case_40,
    &&case_102,
    &&case_228,
    &&case_354,
    &&case_0,
    &&case_0,
    &&case_4,
    &&case_11,
    &&case_41,
    &&case_103,
    &&case_229,
    &&case_355,
    &&case_0,
    &&case_0,
    &&case_5,
    &&case_12,
    &&case_42,
    &&case_104,
    &&case_230,
    &&case_356,
    &&case_0,
    &&case_0,
    &&case_6,
    &&case_13,
    &&case_43,
    &&case_105,
    &&case_231,
    &&case_357,
    &&case_0,
    &&case_0,
    &&case_7,
    &&case_14,
    &&case_44,
    &&case_106,
    &&case_232,
    &&case_358,
    &&case_0,
    &&case_0,
    &&case_8,
    &&case_15,
    &&case_45,
    &&case_107,
    &&case_233,
    &&case_359,
    &&case_0,
    &&case_0,
    &&case_1,
    &&case_16,
    &&case_46,
    &&case_108,
    &&case_234,
    &&case_360,
    &&case_0,
    &&case_0,
    &&case_2,
    &&case_17,
    &&case_47,
    &&case_109,
    &&case_235,
    &&case_361,
    &&case_0,
    &&case_0,
    &&case_3,
    &&case_18,
    &&case_48,
    &&case_110,
    &&case_236,
    &&case_362,
    &&case_0,
    &&case_0,
    &&case_4,
    &&case_19,
    &&case_49,
    &&case_111,
    &&case_237,
    &&case_363,
    &&case_0,
    &&case_0,
    &&case_5,
    &&case_20,
    &&case_50,
    &&case_112,
    &&case_238,
    &&case_364,
    &&case_0,
    &&case_0,
    &&case_6,
    &&case_21,
    &&case_51,
    &&case_113,
    &&case_239,
    &&case_365,
    &&case_0,
    &&case_0,
    &&case_7,
    &&case_22,
    &&case_52,
    &&case_114,
    &&case_240,
    &&case_366,
    &&case_0,
    &&case_0,
    &&case_8,
    &&case_8,
    &&case_8,
    &&case_8,
    &&case_8,
    &&case_367,
    &&case_0,
    &&case_0,
    &&case_1,
    &&case_1,
    &&case_1,
    &&case_1,
    &&case_1,
    &&case_368,
    &&case_0,
    &&case_0,
    &&case_2,
    &&case_9,
    &&case_23,
    &&case_53,
    &&case_115,
    &&case_369,
    &&case_0,
    &&case_0,
    &&case_3,
    &&case_10,
    &&case_24,
    &&case_54,
    &&case_116,
    &&case_370,
    &&case_0,
    &&case_0,
    &&case_4,
    &&case_11,
    &&case_25,
    &&case_55,
    &&case_117,
    &&case_371,
    &&case_0,
    &&case_0,
    &&case_5,
    &&case_12,
    &&case_26,
    &&case_56,
    &&case_118,
    &&case_372,
    &&case_0,
    &&case_0,
    &&case_6,
    &&case_13,
    &&case_27,
    &&case_57,
    &&case_119,
    &&case_373,
    &&case_0,
    &&case_0,
    &&case_7,
    &&case_14,
    &&case_28,
    &&case_58,
    &&case_120,
    &&case_374,
    &&case_0,
    &&case_0,
    &&case_8,
    &&case_15,
    &&case_29,
    &&case_59,
    &&case_121,
    &&case_375,
    &&case_0,
    &&case_0,
    &&case_1,
    &&case_16,
    &&case_30,
    &&case_60,
    &&case_122,
    &&case_376,
    &&case_0,
    &&case_0,
    &&case_2,
    &&case_17,
    &&case_31,
    &&case_61,
    &&case_123,
    &&case_377,
    &&case_0,
    &&case_0,
    &&case_3,
    &&case_18,
    &&case_32,
    &&case_62,
    &&case_124,
    &&case_378,
    &&case_0,
    &&case_0,
    &&case_4,
    &&case_19,
    &&case_33,
    &&case_63,
    &&case_125,
    &&case_379,
    &&case_0,
    &&case_0,
    &&case_5,
    &&case_20,
    &&case_34,
    &&case_64,
    &&case_126,
    &&case_380,
    &&case_0,
    &&case_0,
    &&case_6,
    &&case_21,
    &&case_35,
    &&case_65,
    &&case_127,
    &&case_381,
    &&case_0,
    &&case_0,
    &&case_7,
    &&case_22,
    &&case_36,
    &&case_66,
    &&case_128,
    &&case_382,
    &&case_0,
    &&case_0,
    &&case_8,
    &&case_8,
    &&case_37,
    &&case_67,
    &&case_129,
    &&case_383,
    &&case_0,
    &&case_0,
    &&case_1,
    &&case_1,
    &&case_38,
    &&case_68,
    &&case_130,
    &&case_384,
    &&case_0,
    &&case_0,
    &&case_2,
    &&case_9,
    &&case_39,
    &&case_69,
    &&case_131,
    &&case_385,
    &&case_0,
    &&case_0,
    &&case_3,
    &&case_10,
    &&case_40,
    &&case_70,
    &&case_132,
    &&case_386,
    &&case_0,
    &&case_0,
    &&case_4,
    &&case_11,
    &&case_41,
    &&case_71,
    &&case_133,
    &&case_387,
    &&case_0,
    &&case_0,
    &&case_5,
    &&case_12,
    &&case_42,
    &&case_72,
    &&case_134,
    &&case_388,
    &&case_0,
    &&case_0,
    &&case_6,
    &&case_13,
    &&case_43,
    &&case_73,
    &&case_135,
    &&case_389,
    &&case_0,
    &&case_0,
    &&case_7,
    &&case_14,
    &&case_44,
    &&case_74,
    &&case_136,
    &&case_390,
    &&case_0,
    &&case_0,
    &&case_8,
    &&case_15,
    &&case_45,
    &&case_75,
    &&case_137,
    &&case_391,
    &&case_0,
    &&case_0,
    &&case_1,
    &&case_16,
    &&case_46,
    &&case_76,
    &&case_138,
    &&case_392,
    &&case_0,
    &&case_0,
    &&case_2,
    &&case_17,
    &&case_47,
    &&case_77,
    &&case_139,
    &&case_393,
    &&case_0,
    &&case_0,
    &&case_3,
    &&case_18,
    &&case_48,
    &&case_78,
    &&case_140,
    &&case_394,
    &&case_0,
    &&case_0,
    &&case_4,
    &&case_19,
    &&case_49,
    &&case_79,
    &&case_141,
    &&case_395,
    &&case_0,
    &&case_0,
    &&case_5,
    &&case_20,
    &&case_50,
    &&case_80,
    &&case_142,
    &&case_396,
    &&case_0,
    &&case_0,
    &&case_6,
    &&case_21,
    &&case_51,
    &&case_81,
    &&case_143,
    &&case_397,
    &&case_0,
    &&case_0,
    &&case_7,
    &&case_22,
    &&case_52,
    &&case_82,
    &&case_144,
    &&case_398,
    &&case_0,
    &&case_0,
    &&case_8,
    &&case_8,
    &&case_8,
    &&case_83,
    &&case_145,
    &&case_399,
    &&case_0,
    &&case_0,
    &&case_1,
    &&case_1,
    &&case_1,
    &&case_84,
    &&case_146,
    &&case_400,
    &&case_0,
    &&case_0,
    &&case_2,
    &&case_9,
    &&case_23,
    &&case_85,
    &&case_147,
    &&case_401,
    &&case_0,
    &&case_0,
    &&case_3,
    &&case_10,
    &&case_24,
    &&case_86,
    &&case_148,
    &&case_402,
    &&case_0,
    &&case_0,
    &&case_4,
    &&case_11,
    &&case_25,
    &&case_87,
    &&case_149,
    &&case_403,
    &&case_0,
    &&case_0,
    &&case_5,
    &&case_12,
    &&case_26,
    &&case_88,
    &&case_150,
    &&case_404,
    &&case_0,
    &&case_0,
    &&case_6,
    &&case_13,
    &&case_27,
    &&case_89,
    &&case_151,
    &&case_405,
    &&case_0,
    &&case_0,
    &&case_7,
    &&case_14,
    &&case_28,
    &&case_90,
    &&case_152,
    &&case_406,
    &&case_0,
    &&case_0,
    &&case_8,
    &&case_15,
    &&case_29,
    &&case_91,
    &&case_153,
    &&case_407,
    &&case_0,
    &&case_0,
    &&case_1,
    &&case_16,
    &&case_30,
    &&case_92,
    &&case_154,
    &&case_408,
    &&case_0,
    &&case_0,
    &&case_2,
    &&case_17,
    &&case_31,
    &&case_93,
    &&case_155,
    &&case_409,
    &&case_0,
    &&case_0,
    &&case_3,
    &&case_18,
    &&case_32,
    &&case_94,
    &&case_156,
    &&case_410,
    &&case_0,
    &&case_0,
    &&case_4,
    &&case_19,
    &&case_33,
    &&case_95,
    &&case_157,
    &&case_411,
    &&case_0,
    &&case_0,
    &&case_5,
    &&case_20,
    &&case_34,
    &&case_96,
    &&case_158,
    &&case_412,
    &&case_0,
    &&case_0,
    &&case_6,
    &&case_21,
    &&case_35,
    &&case_97,
    &&case_159,
    &&case_413,
    &&case_0,
    &&case_0,
    &&case_7,
    &&case_22,
    &&case_36,
    &&case_98,
    &&case_160,
    &&case_414,
    &&case_0,
    &&case_0,
    &&case_8,
    &&case_8,
    &&case_37,
    &&case_99,
    &&case_161,
    &&case_415,
    &&case_0,
    &&case_0,
    &&case_1,
    &&case_1,
    &&case_38,
    &&case_100,
    &&case_162,
    &&case_416,
    &&case_0,
    &&case_0,
    &&case_2,
    &&case_9,
    &&case_39,
    &&case_101,
    &&case_163,
    &&case_417,
    &&case_0,
    &&case_0,
    &&case_3,
    &&case_10,
    &&case_40,
    &&case_102,
    &&case_164,
    &&case_418,
    &&case_0,
    &&case_0,
    &&case_4,
    &&case_11,
    &&case_41,
    &&case_103,
    &&case_165,
    &&case_419,
    &&case_0,
    &&case_0,
    &&case_5,
    &&case_12,
    &&case_42,
    &&case_104,
    &&case_166,
    &&case_420,
    &&case_0,
    &&case_0,
    &&case_6,
    &&case_13,
    &&case_43,
    &&case_105,
    &&case_167,
    &&case_421,
    &&case_0,
    &&case_0,
    &&case_7,
    &&case_14,
    &&case_44,
    &&case_106,
    &&case_168,
    &&case_422,
    &&case_0,
    &&case_0,
    &&case_8,
    &&case_15,
    &&case_45,
    &&case_107,
    &&case_169,
    &&case_423,
    &&case_0,
    &&case_0,
    &&case_1,
    &&case_16,
    &&case_46,
    &&case_108,
    &&case_170,
    &&case_424,
    &&case_0,
    &&case_0,
    &&case_2,
    &&case_17,
    &&case_47,
    &&case_109,
    &&case_171,
    &&case_425,
    &&case_0,
    &&case_0,
    &&case_3,
    &&case_18,
    &&case_48,
    &&case_110,
    &&case_172,
    &&case_426,
    &&case_0,
    &&case_0,
    &&case_4,
    &&case_19,
    &&case_49,
    &&case_111,
    &&case_173,
    &&case_427,
    &&case_0,
    &&case_0,
    &&case_5,
    &&case_20,
    &&case_50,
    &&case_112,
    &&case_174,
    &&case_428,
    &&case_0,
    &&case_0,
    &&case_6,
    &&case_21,
    &&case_51,
    &&case_113,
    &&case_175,
    &&case_429,
    &&case_0,
    &&case_0,
    &&case_7,
    &&case_22,
    &&case_52,
    &&case_114,
    &&case_176,
    &&case_430,
    &&case_0,
    &&case_0,
    &&case_8,
    &&case_8,
    &&case_8,
    &&case_8,
    &&case_177,
    &&case_431,
    &&case_0,
    &&case_0,
    &&case_1,
    &&case_1,
    &&case_1,
    &&case_1,
    &&case_178,
    &&case_432,
    &&case_0,
    &&case_0,
    &&case_2,
    &&case_9,
    &&case_23,
    &&case_53,
    &&case_179,
    &&case_433,
    &&case_0,
    &&case_0,
    &&case_3,
    &&case_10,
    &&case_24,
    &&case_54,
    &&case_180,
    &&case_434,
    &&case_0,
    &&case_0,
    &&case_4,
    &&case_11,
    &&case_25,
    &&case_55,
    &&case_181,
    &&case_435,
    &&case_0,
    &&case_0,
    &&case_5,
    &&case_12,
    &&case_26,
    &&case_56,
    &&case_182,
    &&case_436,
    &&case_0,
    &&case_0,
    &&case_6,
    &&case_13,
    &&case_27,
    &&case_57,
    &&case_183,
    &&case_437,
    &&case_0,
    &&case_0,
    &&case_7,
    &&case_14,
    &&case_28,
    &&case_58,
    &&case_184,
    &&case_438,
    &&case_0,
    &&case_0,
    &&case_8,
    &&case_15,
    &&case_29,
    &&case_59,
    &&case_185,
    &&case_439,
    &&case_0,
    &&case_0,
    &&case_1,
    &&case_16,
    &&case_30,
    &&case_60,
    &&case_186,
    &&case_440,
    &&case_0,
    &&case_0,
    &&case_2,
    &&case_17,
    &&case_31,
    &&case_61,
    &&case_187,
    &&case_441,
    &&case_0,
    &&case_0,
    &&case_3,
    &&case_18,
    &&case_32,
    &&case_62,
    &&case_188,
    &&case_442,
    &&case_0,
    &&case_0,
    &&case_4,
    &&case_19,
    &&case_33,
    &&case_63,
    &&case_189,
    &&case_443,
    &&case_0,
    &&case_0,
    &&case_5,
    &&case_20,
    &&case_34,
    &&case_64,
    &&case_190,
    &&case_444,
    &&case_0,
    &&case_0,
    &&case_6,
    &&case_21,
    &&case_35,
    &&case_65,
    &&case_191,
    &&case_445,
    &&case_0,
    &&case_0,
    &&case_7,
    &&case_22,
    &&case_36,
    &&case_66,
    &&case_192,
    &&case_446,
    &&case_0,
    &&case_0,
    &&case_8,
    &&case_8,
    &&case_37,
    &&case_67,
    &&case_193,
    &&case_447,
    &&case_0,
    &&case_0,
    &&case_1,
    &&case_1,
    &&case_38,
    &&case_68,
    &&case_194,
    &&case_448,
    &&case_0,
    &&case_0,
    &&case_2,
    &&case_9,
    &&case_39,
    &&case_69,
    &&case_195,
    &&case_449,
    &&case_0,
    &&case_0,
    &&case_3,
    &&case_10,
    &&case_40,
    &&case_70,
    &&case_196,
    &&case_450,
    &&case_0,
    &&case_0,
    &&case_4,
    &&case_11,
    &&case_41,
    &&case_71,
    &&case_197,
    &&case_451,
    &&case_0,
    &&case_0,
    &&case_5,
    &&case_12,
    &&case_42,
    &&case_72,
    &&case_198,
    &&case_452,
    &&case_0,
    &&case_0,
    &&case_6,
    &&case_13,
    &&case_43,
    &&case_73,
    &&case_199,
    &&case_453,
    &&case_0,
    &&case_0,
    &&case_7,
    &&case_14,
    &&case_44,
    &&case_74,
    &&case_200,
    &&case_454,
    &&case_0,
    &&case_0,
    &&case_8,
    &&case_15,
    &&case_45,
    &&case_75,
    &&case_201,
    &&case_455,
    &&case_0,
    &&case_0,
    &&case_1,
    &&case_16,
    &&case_46,
    &&case_76,
    &&case_202,
    &&case_456,
    &&case_0,
    &&case_0,
    &&case_2,
    &&case_17,
    &&case_47,
    &&case_77,
    &&case_203,
    &&case_457,
    &&case_0,
    &&case_0,
    &&case_3,
    &&case_18,
    &&case_48,
    &&case_78,
    &&case_204,
    &&case_458,
    &&case_0,
    &&case_0,
    &&case_4,
    &&case_19,
    &&case_49,
    &&case_79,
    &&case_205,
    &&case_459,
    &&case_0,
    &&case_0,
    &&case_5,
    &&case_20,
    &&case_50,
    &&case_80,
    &&case_206,
    &&case_460,
    &&case_0,
    &&case_0,
    &&case_6,
    &&case_21,
    &&case_51,
    &&case_81,
    &&case_207,
    &&case_461,
    &&case_0,
    &&case_0,
    &&case_7,
    &&case_22,
    &&case_52,
    &&case_82,
    &&case_208,
    &&case_462,
    &&case_0,
    &&case_0,
    &&case_8,
    &&case_8,
    &&case_8,
    &&case_83,
    &&case_209,
    &&case_463,
    &&case_0,
    &&case_0,
    &&case_1,
    &&case_1,
    &&case_1,
    &&case_84,
    &&case_210,
    &&case_464,
    &&case_0,
    &&case_0,
    &&case_2,
    &&case_9,
    &&case_23,
    &&case_85,
    &&case_211,
    &&case_465,
    &&case_0,
    &&case_0,
    &&case_3,
    &&case_10,
    &&case_24,
    &&case_86,
    &&case_212,
    &&case_466,
    &&case_0,
    &&case_0,
    &&case_4,
    &&case_11,
    &&case_25,
    &&case_87,
    &&case_213,
    &&case_467,
    &&case_0,
    &&case_0,
    &&case_5,
    &&case_12,
    &&case_26,
    &&case_88,
    &&case_214,
    &&case_468,
    &&case_0,
    &&case_0,
    &&case_6,
    &&case_13,
    &&case_27,
    &&case_89,
    &&case_215,
    &&case_469,
    &&case_0,
    &&case_0,
    &&case_7,
    &&case_14,
    &&case_28,
    &&case_90,
    &&case_216,
    &&case_470,
    &&case_0,
    &&case_0,
    &&case_8,
    &&case_15,
    &&case_29,
    &&case_91,
    &&case_217,
    &&case_471,
    &&case_0,
    &&case_0,
    &&case_1,
    &&case_16,
    &&case_30,
    &&case_92,
    &&case_218,
    &&case_472,
    &&case_0,
    &&case_0,
    &&case_2,
    &&case_17,
    &&case_31,
    &&case_93,
    &&case_219,
    &&case_473,
    &&case_0,
    &&case_0,
    &&case_3,
    &&case_18,
    &&case_32,
    &&case_94,
    &&case_220,
    &&case_474,
    &&case_0,
    &&case_0,
    &&case_4,
    &&case_19,
    &&case_33,
    &&case_95,
    &&case_221,
    &&case_475,
    &&case_0,
    &&case_0,
    &&case_5,
    &&case_20,
    &&case_34,
    &&case_96,
    &&case_222,
    &&case_476,
    &&case_0,
    &&case_0,
    &&case_6,
    &&case_21,
    &&case_35,
    &&case_97,
    &&case_223,
    &&case_477,
    &&case_0,
    &&case_0,
    &&case_7,
    &&case_22,
    &&case_36,
    &&case_98,
    &&case_224,
    &&case_478,
    &&case_0,
    &&case_0,
    &&case_8,
    &&case_8,
    &&case_37,
    &&case_99,
    &&case_225,
    &&case_479,
    &&case_0,
    &&case_0,
    &&case_1,
    &&case_1,
    &&case_38,
    &&case_100,
    &&case_226,
    &&case_480,
    &&case_0,
    &&case_0,
    &&case_2,
    &&case_9,
    &&case_39,
    &&case_101,
    &&case_227,
    &&case_481,
    &&case_0,
    &&case_0,
    &&case_3,
    &&case_10,
    &&case_40,
    &&case_102,
    &&case_228,
    &&case_482,
    &&case_0,
    &&case_0,
    &&case_4,
    &&case_11,
    &&case_41,
    &&case_103,
    &&case_229,
    &&case_483,
    &&case_0,
    &&case_0,
    &&case_5,
    &&case_12,
    &&case_42,
    &&case_104,
    &&case_230,
    &&case_484,
    &&case_0,
    &&case_0,
    &&case_6,
    &&case_13,
    &&case_43,
    &&case_105,
    &&case_231,
    &&case_485,
    &&case_0,
    &&case_0,
    &&case_7,
    &&case_14,
    &&case_44,
    &&case_106,
    &&case_232,
    &&case_486,
    &&case_0,
    &&case_0,
    &&case_8,
    &&case_15,
    &&case_45,
    &&case_107,
    &&case_233,
    &&case_487,
    &&case_0,
    &&case_0,
    &&case_1,
    &&case_16,
    &&case_46,
    &&case_108,
    &&case_234,
    &&case_488,
    &&case_0,
    &&case_0,
    &&case_2,
    &&case_17,
    &&case_47,
    &&case_109,
    &&case_235,
    &&case_489,
    &&case_0,
    &&case_0,
    &&case_3,
    &&case_18,
    &&case_48,
    &&case_110,
    &&case_236,
    &&case_490,
    &&case_0,
    &&case_0,
    &&case_4,
    &&case_19,
    &&case_49,
    &&case_111,
    &&case_237,
    &&case_491,
    &&case_0,
    &&case_0,
    &&case_5,
    &&case_20,
    &&case_50,
    &&case_112,
    &&case_238,
    &&case_492,
    &&case_0,
    &&case_0,
    &&case_6,
    &&case_21,
    &&case_51,
    &&case_113,
    &&case_239,
    &&case_493,
    &&case_0,
    &&case_0,
    &&case_7,
    &&case_22,
    &&case_52,
    &&case_114,
    &&case_240,
    &&case_494,
    &&case_0,
    &&case_0,
    &&case_8,
    &&case_8,
    &&case_8,
    &&case_8,
    &&case_8,
    &&case_8,
    &&case_0,
    &&case_0,
    &&case_0,
    &&case_0,
    &&case_0,
    &&case_0,
    &&case_0,
    &&case_0,
    &&case_0,
    &&case_0,
};
using std::min;
using std::max;
goto *dispatch_table[ ouf ];
case_1: {
    // all_inside
    break;
}
case_8: {
    // remove face
    faces_to_rem[ nb_faces_to_rem++ ] = num_face;
    faces.node_masks[ num_face ] = 0;
    break;
}
case_410: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_346: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_314: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_442: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_330: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_458: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_394: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_322: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_450: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_386: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_418: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_326: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_454: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_390: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_422: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_406: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_342: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_325: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_452: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_389: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_388: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_421: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_420: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_293: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_405: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_404: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_277: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_341: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_413: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_412: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_285: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_349: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_317: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_444: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_409: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_281: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_283: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_345: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_347: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_313: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_315: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_329: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_331: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_393: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_323: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_291: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_156: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_220: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_0 = min( num_node_6, num_node_0 );
    std::size_t max_node_6_0 = max( num_node_6, num_node_0 );
    std::size_t num_edge_6_0 = max_node_6_0 * ( max_node_6_0 + 1 ) / 2 + min_node_6_0;
    if ( edge_num_cuts[ num_edge_6_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_0 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_6_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_188: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_0 = min( num_node_6, num_node_0 );
    std::size_t max_node_6_0 = max( num_node_6, num_node_0 );
    std::size_t num_edge_6_0 = max_node_6_0 * ( max_node_6_0 + 1 ) / 2 + min_node_6_0;
    if ( edge_num_cuts[ num_edge_6_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_0 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_6_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_204: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_0 = min( num_node_6, num_node_0 );
    std::size_t max_node_6_0 = max( num_node_6, num_node_0 );
    std::size_t num_edge_6_0 = max_node_6_0 * ( max_node_6_0 + 1 ) / 2 + min_node_6_0;
    if ( edge_num_cuts[ num_edge_6_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_0 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_6_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_196: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_0 = min( num_node_6, num_node_0 );
    std::size_t max_node_6_0 = max( num_node_6, num_node_0 );
    std::size_t num_edge_6_0 = max_node_6_0 * ( max_node_6_0 + 1 ) / 2 + min_node_6_0;
    if ( edge_num_cuts[ num_edge_6_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_0 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_6_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_164: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_200: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_0 = min( num_node_6, num_node_0 );
    std::size_t max_node_6_0 = max( num_node_6, num_node_0 );
    std::size_t num_edge_6_0 = max_node_6_0 * ( max_node_6_0 + 1 ) / 2 + min_node_6_0;
    if ( edge_num_cuts[ num_edge_6_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_0 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_6_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_168: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_152: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_216: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_0 = min( num_node_6, num_node_0 );
    std::size_t max_node_6_0 = max( num_node_6, num_node_0 );
    std::size_t num_edge_6_0 = max_node_6_0 * ( max_node_6_0 + 1 ) / 2 + min_node_6_0;
    if ( edge_num_cuts[ num_edge_6_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_0 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_6_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_282: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_290: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_294: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_278: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_199: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_198: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_0 = min( num_node_6, num_node_0 );
    std::size_t max_node_6_0 = max( num_node_6, num_node_0 );
    std::size_t num_edge_6_0 = max_node_6_0 * ( max_node_6_0 + 1 ) / 2 + min_node_6_0;
    if ( edge_num_cuts[ num_edge_6_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_0 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_6_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_135: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_0 = min( num_node_6, num_node_0 );
    std::size_t max_node_6_0 = max( num_node_6, num_node_0 );
    std::size_t num_edge_6_0 = max_node_6_0 * ( max_node_6_0 + 1 ) / 2 + min_node_6_0;
    if ( edge_num_cuts[ num_edge_6_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_0 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_6_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_167: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_0 = min( num_node_6, num_node_0 );
    std::size_t max_node_6_0 = max( num_node_6, num_node_0 );
    std::size_t num_edge_6_0 = max_node_6_0 * ( max_node_6_0 + 1 ) / 2 + min_node_6_0;
    if ( edge_num_cuts[ num_edge_6_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_0 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_6_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_151: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_0 = min( num_node_6, num_node_0 );
    std::size_t max_node_6_0 = max( num_node_6, num_node_0 );
    std::size_t num_edge_6_0 = max_node_6_0 * ( max_node_6_0 + 1 ) / 2 + min_node_6_0;
    if ( edge_num_cuts[ num_edge_6_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_0 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_6_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_214: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_0 = min( num_node_6, num_node_0 );
    std::size_t max_node_6_0 = max( num_node_6, num_node_0 );
    std::size_t num_edge_6_0 = max_node_6_0 * ( max_node_6_0 + 1 ) / 2 + min_node_6_0;
    if ( edge_num_cuts[ num_edge_6_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_0 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_6_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_159: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_0 = min( num_node_6, num_node_0 );
    std::size_t max_node_6_0 = max( num_node_6, num_node_0 );
    std::size_t num_edge_6_0 = max_node_6_0 * ( max_node_6_0 + 1 ) / 2 + min_node_6_0;
    if ( edge_num_cuts[ num_edge_6_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_0 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_6_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_222: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_0 = min( num_node_6, num_node_0 );
    std::size_t max_node_6_0 = max( num_node_6, num_node_0 );
    std::size_t num_edge_6_0 = max_node_6_0 * ( max_node_6_0 + 1 ) / 2 + min_node_6_0;
    if ( edge_num_cuts[ num_edge_6_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_0 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_6_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_191: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_190: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_0 = min( num_node_6, num_node_0 );
    std::size_t max_node_6_0 = max( num_node_6, num_node_0 );
    std::size_t num_edge_6_0 = max_node_6_0 * ( max_node_6_0 + 1 ) / 2 + min_node_6_0;
    if ( edge_num_cuts[ num_edge_6_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_0 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_6_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_453: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_445: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_155: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_0 = min( num_node_6, num_node_0 );
    std::size_t max_node_6_0 = max( num_node_6, num_node_0 );
    std::size_t num_edge_6_0 = max_node_6_0 * ( max_node_6_0 + 1 ) / 2 + min_node_6_0;
    if ( edge_num_cuts[ num_edge_6_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_0 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_6_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_157: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_0 = min( num_node_6, num_node_0 );
    std::size_t max_node_6_0 = max( num_node_6, num_node_0 );
    std::size_t num_edge_6_0 = max_node_6_0 * ( max_node_6_0 + 1 ) / 2 + min_node_6_0;
    if ( edge_num_cuts[ num_edge_6_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_0 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_6_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_187: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_203: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_139: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_0 = min( num_node_6, num_node_0 );
    std::size_t max_node_6_0 = max( num_node_6, num_node_0 );
    std::size_t num_edge_6_0 = max_node_6_0 * ( max_node_6_0 + 1 ) / 2 + min_node_6_0;
    if ( edge_num_cuts[ num_edge_6_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_0 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_6_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_141: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_0 = min( num_node_6, num_node_0 );
    std::size_t max_node_6_0 = max( num_node_6, num_node_0 );
    std::size_t num_edge_6_0 = max_node_6_0 * ( max_node_6_0 + 1 ) / 2 + min_node_6_0;
    if ( edge_num_cuts[ num_edge_6_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_0 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_6_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_441: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_457: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_133: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_0 = min( num_node_6, num_node_0 );
    std::size_t max_node_6_0 = max( num_node_6, num_node_0 );
    std::size_t num_edge_6_0 = max_node_6_0 * ( max_node_6_0 + 1 ) / 2 + min_node_6_0;
    if ( edge_num_cuts[ num_edge_6_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_0 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_6_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_165: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_0 = min( num_node_6, num_node_0 );
    std::size_t max_node_6_0 = max( num_node_6, num_node_0 );
    std::size_t num_edge_6_0 = max_node_6_0 * ( max_node_6_0 + 1 ) / 2 + min_node_6_0;
    if ( edge_num_cuts[ num_edge_6_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_0 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_6_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_474: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_470: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_261: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_468: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_476: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_265: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_267: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_259: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_94: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_0 = min( num_node_5, num_node_0 );
    std::size_t max_node_5_0 = max( num_node_5, num_node_0 );
    std::size_t num_edge_5_0 = max_node_5_0 * ( max_node_5_0 + 1 ) / 2 + min_node_5_0;
    if ( edge_num_cuts[ num_edge_5_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_0 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_5_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_78: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_70: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_102: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_0 = min( num_node_5, num_node_0 );
    std::size_t max_node_5_0 = max( num_node_5, num_node_0 );
    std::size_t num_edge_5_0 = max_node_5_0 * ( max_node_5_0 + 1 ) / 2 + min_node_5_0;
    if ( edge_num_cuts[ num_edge_5_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_0 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_5_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_74: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_106: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_0 = min( num_node_5, num_node_0 );
    std::size_t max_node_5_0 = max( num_node_5, num_node_0 );
    std::size_t num_edge_5_0 = max_node_5_0 * ( max_node_5_0 + 1 ) / 2 + min_node_5_0;
    if ( edge_num_cuts[ num_edge_5_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_0 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_5_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_90: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_0 = min( num_node_5, num_node_0 );
    std::size_t max_node_5_0 = max( num_node_5, num_node_0 );
    std::size_t num_edge_5_0 = max_node_5_0 * ( max_node_5_0 + 1 ) / 2 + min_node_5_0;
    if ( edge_num_cuts[ num_edge_5_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_0 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_5_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_140: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_132: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_136: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_266: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_258: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_262: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_73: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_0 = min( num_node_5, num_node_0 );
    std::size_t max_node_5_0 = max( num_node_5, num_node_0 );
    std::size_t num_edge_5_0 = max_node_5_0 * ( max_node_5_0 + 1 ) / 2 + min_node_5_0;
    if ( edge_num_cuts[ num_edge_5_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_0 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_5_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_104: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_0 = min( num_node_5, num_node_0 );
    std::size_t max_node_5_0 = max( num_node_5, num_node_0 );
    std::size_t num_edge_5_0 = max_node_5_0 * ( max_node_5_0 + 1 ) / 2 + min_node_5_0;
    if ( edge_num_cuts[ num_edge_5_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_0 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_5_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_89: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_88: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_0 = min( num_node_5, num_node_0 );
    std::size_t max_node_5_0 = max( num_node_5, num_node_0 );
    std::size_t num_edge_5_0 = max_node_5_0 * ( max_node_5_0 + 1 ) / 2 + min_node_5_0;
    if ( edge_num_cuts[ num_edge_5_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_0 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_5_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_97: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_96: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_0 = min( num_node_5, num_node_0 );
    std::size_t max_node_5_0 = max( num_node_5, num_node_0 );
    std::size_t num_edge_5_0 = max_node_5_0 * ( max_node_5_0 + 1 ) / 2 + min_node_5_0;
    if ( edge_num_cuts[ num_edge_5_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_0 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_5_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_65: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_0 = min( num_node_5, num_node_0 );
    std::size_t max_node_5_0 = max( num_node_5, num_node_0 );
    std::size_t num_edge_5_0 = max_node_5_0 * ( max_node_5_0 + 1 ) / 2 + min_node_5_0;
    if ( edge_num_cuts[ num_edge_5_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_0 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_5_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_215: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_223: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_469: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_477: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_93: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_61: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_0 = min( num_node_5, num_node_0 );
    std::size_t max_node_5_0 = max( num_node_5, num_node_0 );
    std::size_t num_edge_5_0 = max_node_5_0 * ( max_node_5_0 + 1 ) / 2 + min_node_5_0;
    if ( edge_num_cuts[ num_edge_5_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_0 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_5_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_63: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_0 = min( num_node_5, num_node_0 );
    std::size_t max_node_5_0 = max( num_node_5, num_node_0 );
    std::size_t num_edge_5_0 = max_node_5_0 * ( max_node_5_0 + 1 ) / 2 + min_node_5_0;
    if ( edge_num_cuts[ num_edge_5_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_0 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_5_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_77: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_0 = min( num_node_5, num_node_0 );
    std::size_t max_node_5_0 = max( num_node_5, num_node_0 );
    std::size_t num_edge_5_0 = max_node_5_0 * ( max_node_5_0 + 1 ) / 2 + min_node_5_0;
    if ( edge_num_cuts[ num_edge_5_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_0 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_5_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_79: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_0 = min( num_node_5, num_node_0 );
    std::size_t max_node_5_0 = max( num_node_5, num_node_0 );
    std::size_t num_edge_5_0 = max_node_5_0 * ( max_node_5_0 + 1 ) / 2 + min_node_5_0;
    if ( edge_num_cuts[ num_edge_5_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_0 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_5_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_219: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_473: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_71: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_0 = min( num_node_5, num_node_0 );
    std::size_t max_node_5_0 = max( num_node_5, num_node_0 );
    std::size_t num_edge_5_0 = max_node_5_0 * ( max_node_5_0 + 1 ) / 2 + min_node_5_0;
    if ( edge_num_cuts[ num_edge_5_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_0 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_5_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_378: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_354: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_358: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_357: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_381: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_380: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_377: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_355: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_228: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_0 = min( num_node_6, num_node_0 );
    std::size_t max_node_6_0 = max( num_node_6, num_node_0 );
    std::size_t num_edge_6_0 = max_node_6_0 * ( max_node_6_0 + 1 ) / 2 + min_node_6_0;
    if ( edge_num_cuts[ num_edge_6_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_0 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_6_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_232: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_0 = min( num_node_6, num_node_0 );
    std::size_t max_node_6_0 = max( num_node_6, num_node_0 );
    std::size_t num_edge_6_0 = max_node_6_0 * ( max_node_6_0 + 1 ) / 2 + min_node_6_0;
    if ( edge_num_cuts[ num_edge_6_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_0 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_6_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_230: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_0 = min( num_node_6, num_node_0 );
    std::size_t max_node_6_0 = max( num_node_6, num_node_0 );
    std::size_t num_edge_6_0 = max_node_6_0 * ( max_node_6_0 + 1 ) / 2 + min_node_6_0;
    if ( edge_num_cuts[ num_edge_6_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_0 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_6_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_127: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_0 = min( num_node_6, num_node_0 );
    std::size_t max_node_6_0 = max( num_node_6, num_node_0 );
    std::size_t num_edge_6_0 = max_node_6_0 * ( max_node_6_0 + 1 ) / 2 + min_node_6_0;
    if ( edge_num_cuts[ num_edge_6_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_0 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_6_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_123: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_0 = min( num_node_6, num_node_0 );
    std::size_t max_node_6_0 = max( num_node_6, num_node_0 );
    std::size_t num_edge_6_0 = max_node_6_0 * ( max_node_6_0 + 1 ) / 2 + min_node_6_0;
    if ( edge_num_cuts[ num_edge_6_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_0 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_6_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_125: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_0 = min( num_node_6, num_node_0 );
    std::size_t max_node_6_0 = max( num_node_6, num_node_0 );
    std::size_t num_edge_6_0 = max_node_6_0 * ( max_node_6_0 + 1 ) / 2 + min_node_6_0;
    if ( edge_num_cuts[ num_edge_6_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_0 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_6_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_482: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_486: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_484: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_253: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_249: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_251: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_32: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_48: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_0 = min( num_node_4, num_node_0 );
    std::size_t max_node_4_0 = max( num_node_4, num_node_0 );
    std::size_t num_edge_4_0 = max_node_4_0 * ( max_node_4_0 + 1 ) / 2 + min_node_4_0;
    if ( edge_num_cuts[ num_edge_4_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_0 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_4_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_40: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_0 = min( num_node_4, num_node_0 );
    std::size_t max_node_4_0 = max( num_node_4, num_node_0 );
    std::size_t num_edge_4_0 = max_node_4_0 * ( max_node_4_0 + 1 ) / 2 + min_node_4_0;
    if ( edge_num_cuts[ num_edge_4_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_0 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_4_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_44: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_0 = min( num_node_4, num_node_0 );
    std::size_t max_node_4_0 = max( num_node_4, num_node_0 );
    std::size_t num_edge_4_0 = max_node_4_0 * ( max_node_4_0 + 1 ) / 2 + min_node_4_0;
    if ( edge_num_cuts[ num_edge_4_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_0 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_4_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_62: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_124: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_250: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_43: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_42: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_0 = min( num_node_4, num_node_0 );
    std::size_t max_node_4_0 = max( num_node_4, num_node_0 );
    std::size_t num_edge_4_0 = max_node_4_0 * ( max_node_4_0 + 1 ) / 2 + min_node_4_0;
    if ( edge_num_cuts[ num_edge_4_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_0 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_4_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_27: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_0 = min( num_node_4, num_node_0 );
    std::size_t max_node_4_0 = max( num_node_4, num_node_0 );
    std::size_t num_edge_4_0 = max_node_4_0 * ( max_node_4_0 + 1 ) / 2 + min_node_4_0;
    if ( edge_num_cuts[ num_edge_4_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_0 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_4_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_35: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_0 = min( num_node_4, num_node_0 );
    std::size_t max_node_4_0 = max( num_node_4, num_node_0 );
    std::size_t num_edge_4_0 = max_node_4_0 * ( max_node_4_0 + 1 ) / 2 + min_node_4_0;
    if ( edge_num_cuts[ num_edge_4_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_0 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_4_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_105: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_231: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_485: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_31: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_0 = min( num_node_4, num_node_0 );
    std::size_t max_node_4_0 = max( num_node_4, num_node_0 );
    std::size_t num_edge_4_0 = max_node_4_0 * ( max_node_4_0 + 1 ) / 2 + min_node_4_0;
    if ( edge_num_cuts[ num_edge_4_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_0 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_4_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_33: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_0 = min( num_node_4, num_node_0 );
    std::size_t max_node_4_0 = max( num_node_4, num_node_0 );
    std::size_t num_edge_4_0 = max_node_4_0 * ( max_node_4_0 + 1 ) / 2 + min_node_4_0;
    if ( edge_num_cuts[ num_edge_4_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_0 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_4_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_426: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_310: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_438: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_309: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_436: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_425: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_297: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_299: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_172: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_184: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_0 = min( num_node_6, num_node_0 );
    std::size_t max_node_6_0 = max( num_node_6, num_node_0 );
    std::size_t num_edge_6_0 = max_node_6_0 * ( max_node_6_0 + 1 ) / 2 + min_node_6_0;
    if ( edge_num_cuts[ num_edge_6_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_0 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_6_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_298: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_183: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_182: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_0 = min( num_node_6, num_node_0 );
    std::size_t max_node_6_0 = max( num_node_6, num_node_0 );
    std::size_t num_edge_6_0 = max_node_6_0 * ( max_node_6_0 + 1 ) / 2 + min_node_6_0;
    if ( edge_num_cuts[ num_edge_6_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_0 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_6_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_437: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_171: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_0 = min( num_node_6, num_node_0 );
    std::size_t max_node_6_0 = max( num_node_6, num_node_0 );
    std::size_t num_edge_6_0 = max_node_6_0 * ( max_node_6_0 + 1 ) / 2 + min_node_6_0;
    if ( edge_num_cuts[ num_edge_6_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_0 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_6_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_173: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_0 = min( num_node_6, num_node_0 );
    std::size_t max_node_6_0 = max( num_node_6, num_node_0 );
    std::size_t num_edge_6_0 = max_node_6_0 * ( max_node_6_0 + 1 ) / 2 + min_node_6_0;
    if ( edge_num_cuts[ num_edge_6_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_0 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_6_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_110: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_0 = min( num_node_5, num_node_0 );
    std::size_t max_node_5_0 = max( num_node_5, num_node_0 );
    std::size_t num_edge_5_0 = max_node_5_0 * ( max_node_5_0 + 1 ) / 2 + min_node_5_0;
    if ( edge_num_cuts[ num_edge_5_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_0 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_5_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_57: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_0 = min( num_node_5, num_node_0 );
    std::size_t max_node_5_0 = max( num_node_5, num_node_0 );
    std::size_t num_edge_5_0 = max_node_5_0 * ( max_node_5_0 + 1 ) / 2 + min_node_5_0;
    if ( edge_num_cuts[ num_edge_5_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_0 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_5_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_362: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_374: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_373: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_372: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_361: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_363: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_236: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_0 = min( num_node_6, num_node_0 );
    std::size_t max_node_6_0 = max( num_node_6, num_node_0 );
    std::size_t num_edge_6_0 = max_node_6_0 * ( max_node_6_0 + 1 ) / 2 + min_node_6_0;
    if ( edge_num_cuts[ num_edge_6_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_0 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_6_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_119: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_0 = min( num_node_6, num_node_0 );
    std::size_t max_node_6_0 = max( num_node_6, num_node_0 );
    std::size_t num_edge_6_0 = max_node_6_0 * ( max_node_6_0 + 1 ) / 2 + min_node_6_0;
    if ( edge_num_cuts[ num_edge_6_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_0 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_6_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_490: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_245: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_18: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 4 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 4 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 4 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_0 = min( num_node_3, num_node_0 );
    std::size_t max_node_3_0 = max( num_node_3, num_node_0 );
    std::size_t num_edge_3_0 = max_node_3_0 * ( max_node_3_0 + 1 ) / 2 + min_node_3_0;
    if ( edge_num_cuts[ num_edge_3_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_0 ] = num_cut;
        Node *node = &nodes.local_at( 4 );
        edge_cuts[ num_edge_3_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_13: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 4 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 4 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_0 = min( num_node_3, num_node_0 );
    std::size_t max_node_3_0 = max( num_node_3, num_node_0 );
    std::size_t num_edge_3_0 = max_node_3_0 * ( max_node_3_0 + 1 ) / 2 + min_node_3_0;
    if ( edge_num_cuts[ num_edge_3_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_0 ] = num_cut;
        Node *node = &nodes.local_at( 4 );
        edge_cuts[ num_edge_3_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 4 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_402: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_338: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_333: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_460: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_397: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_396: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_275: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_339: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_148: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_212: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_0 = min( num_node_6, num_node_0 );
    std::size_t max_node_6_0 = max( num_node_6, num_node_0 );
    std::size_t num_edge_6_0 = max_node_6_0 * ( max_node_6_0 + 1 ) / 2 + min_node_6_0;
    if ( edge_num_cuts[ num_edge_6_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_0 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_6_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_274: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_207: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_206: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_0 = min( num_node_6, num_node_0 );
    std::size_t max_node_6_0 = max( num_node_6, num_node_0 );
    std::size_t num_edge_6_0 = max_node_6_0 * ( max_node_6_0 + 1 ) / 2 + min_node_6_0;
    if ( edge_num_cuts[ num_edge_6_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_0 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_6_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_143: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_0 = min( num_node_6, num_node_0 );
    std::size_t max_node_6_0 = max( num_node_6, num_node_0 );
    std::size_t num_edge_6_0 = max_node_6_0 * ( max_node_6_0 + 1 ) / 2 + min_node_6_0;
    if ( edge_num_cuts[ num_edge_6_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_0 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_6_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_461: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_149: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_0 = min( num_node_6, num_node_0 );
    std::size_t max_node_6_0 = max( num_node_6, num_node_0 );
    std::size_t num_edge_6_0 = max_node_6_0 * ( max_node_6_0 + 1 ) / 2 + min_node_6_0;
    if ( edge_num_cuts[ num_edge_6_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_0 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_6_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_466: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_269: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_86: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_0 = min( num_node_5, num_node_0 );
    std::size_t max_node_5_0 = max( num_node_5, num_node_0 );
    std::size_t num_edge_5_0 = max_node_5_0 * ( max_node_5_0 + 1 ) / 2 + min_node_5_0;
    if ( edge_num_cuts[ num_edge_5_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_0 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_5_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_81: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_0 = min( num_node_5, num_node_0 );
    std::size_t max_node_5_0 = max( num_node_5, num_node_0 );
    std::size_t num_edge_5_0 = max_node_5_0 * ( max_node_5_0 + 1 ) / 2 + min_node_5_0;
    if ( edge_num_cuts[ num_edge_5_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_0 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_5_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_306: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_434: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_429: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_428: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_301: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_307: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_180: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_0 = min( num_node_6, num_node_0 );
    std::size_t max_node_6_0 = max( num_node_6, num_node_0 );
    std::size_t num_edge_6_0 = max_node_6_0 * ( max_node_6_0 + 1 ) / 2 + min_node_6_0;
    if ( edge_num_cuts[ num_edge_6_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_0 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_6_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_175: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_0 = min( num_node_6, num_node_0 );
    std::size_t max_node_6_0 = max( num_node_6, num_node_0 );
    std::size_t num_edge_6_0 = max_node_6_0 * ( max_node_6_0 + 1 ) / 2 + min_node_6_0;
    if ( edge_num_cuts[ num_edge_6_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_0 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_6_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_370: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_365: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_414: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_350: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_318: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_446: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_321: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_385: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_417: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_289: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_160: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_224: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_0 = min( num_node_6, num_node_0 );
    std::size_t max_node_6_0 = max( num_node_6, num_node_0 );
    std::size_t num_edge_6_0 = max_node_6_0 * ( max_node_6_0 + 1 ) / 2 + min_node_6_0;
    if ( edge_num_cuts[ num_edge_6_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_0 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_6_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_192: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_0 = min( num_node_6, num_node_0 );
    std::size_t max_node_6_0 = max( num_node_6, num_node_0 );
    std::size_t num_edge_6_0 = max_node_6_0 * ( max_node_6_0 + 1 ) / 2 + min_node_6_0;
    if ( edge_num_cuts[ num_edge_6_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_0 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_6_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_286: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_195: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_131: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_0 = min( num_node_6, num_node_0 );
    std::size_t max_node_6_0 = max( num_node_6, num_node_0 );
    std::size_t num_edge_6_0 = max_node_6_0 * ( max_node_6_0 + 1 ) / 2 + min_node_6_0;
    if ( edge_num_cuts[ num_edge_6_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_0 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_6_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_163: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_0 = min( num_node_6, num_node_0 );
    std::size_t max_node_6_0 = max( num_node_6, num_node_0 );
    std::size_t num_edge_6_0 = max_node_6_0 * ( max_node_6_0 + 1 ) / 2 + min_node_6_0;
    if ( edge_num_cuts[ num_edge_6_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_0 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_6_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_449: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_478: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_257: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_98: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_0 = min( num_node_5, num_node_0 );
    std::size_t max_node_5_0 = max( num_node_5, num_node_0 );
    std::size_t num_edge_5_0 = max_node_5_0 * ( max_node_5_0 + 1 ) / 2 + min_node_5_0;
    if ( edge_num_cuts[ num_edge_5_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_0 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_5_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_69: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_0 = min( num_node_5, num_node_0 );
    std::size_t max_node_5_0 = max( num_node_5, num_node_0 );
    std::size_t num_edge_5_0 = max_node_5_0 * ( max_node_5_0 + 1 ) / 2 + min_node_5_0;
    if ( edge_num_cuts[ num_edge_5_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_0 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_5_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_382: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_353: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_334: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_462: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_398: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_401: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_273: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_337: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_208: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_0 = min( num_node_6, num_node_0 );
    std::size_t max_node_6_0 = max( num_node_6, num_node_0 );
    std::size_t num_edge_6_0 = max_node_6_0 * ( max_node_6_0 + 1 ) / 2 + min_node_6_0;
    if ( edge_num_cuts[ num_edge_6_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_0 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_6_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_147: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_0 = min( num_node_6, num_node_0 );
    std::size_t max_node_6_0 = max( num_node_6, num_node_0 );
    std::size_t num_edge_6_0 = max_node_6_0 * ( max_node_6_0 + 1 ) / 2 + min_node_6_0;
    if ( edge_num_cuts[ num_edge_6_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_0 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_6_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_430: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_305: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_408: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_440: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_456: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_392: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_327: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_295: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_279: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_343: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_218: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_0 = min( num_node_6, num_node_0 );
    std::size_t max_node_6_0 = max( num_node_6, num_node_0 );
    std::size_t num_edge_6_0 = max_node_6_0 * ( max_node_6_0 + 1 ) / 2 + min_node_6_0;
    if ( edge_num_cuts[ num_edge_6_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_0 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_6_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_186: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_0 = min( num_node_6, num_node_0 );
    std::size_t max_node_6_0 = max( num_node_6, num_node_0 );
    std::size_t num_edge_6_0 = max_node_6_0 * ( max_node_6_0 + 1 ) / 2 + min_node_6_0;
    if ( edge_num_cuts[ num_edge_6_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_0 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_6_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_202: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_0 = min( num_node_6, num_node_0 );
    std::size_t max_node_6_0 = max( num_node_6, num_node_0 );
    std::size_t num_edge_6_0 = max_node_6_0 * ( max_node_6_0 + 1 ) / 2 + min_node_6_0;
    if ( edge_num_cuts[ num_edge_6_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_0 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_6_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_137: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_0 = min( num_node_6, num_node_0 );
    std::size_t max_node_6_0 = max( num_node_6, num_node_0 );
    std::size_t num_edge_6_0 = max_node_6_0 * ( max_node_6_0 + 1 ) / 2 + min_node_6_0;
    if ( edge_num_cuts[ num_edge_6_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_0 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_6_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_169: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_0 = min( num_node_6, num_node_0 );
    std::size_t max_node_6_0 = max( num_node_6, num_node_0 );
    std::size_t num_edge_6_0 = max_node_6_0 * ( max_node_6_0 + 1 ) / 2 + min_node_6_0;
    if ( edge_num_cuts[ num_edge_6_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_0 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_6_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_153: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_0 = min( num_node_6, num_node_0 );
    std::size_t max_node_6_0 = max( num_node_6, num_node_0 );
    std::size_t num_edge_6_0 = max_node_6_0 * ( max_node_6_0 + 1 ) / 2 + min_node_6_0;
    if ( edge_num_cuts[ num_edge_6_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_0 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_6_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_472: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_263: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_92: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_0 = min( num_node_5, num_node_0 );
    std::size_t max_node_5_0 = max( num_node_5, num_node_0 );
    std::size_t num_edge_5_0 = max_node_5_0 * ( max_node_5_0 + 1 ) / 2 + min_node_5_0;
    if ( edge_num_cuts[ num_edge_5_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_0 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_5_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_75: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_0 = min( num_node_5, num_node_0 );
    std::size_t max_node_5_0 = max( num_node_5, num_node_0 );
    std::size_t num_edge_5_0 = max_node_5_0 * ( max_node_5_0 + 1 ) / 2 + min_node_5_0;
    if ( edge_num_cuts[ num_edge_5_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_0 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_5_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_376: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_359: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_424: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_311: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_448: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_384: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_416: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_287: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_351: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_319: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_194: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_0 = min( num_node_6, num_node_0 );
    std::size_t max_node_6_0 = max( num_node_6, num_node_0 );
    std::size_t num_edge_6_0 = max_node_6_0 * ( max_node_6_0 + 1 ) / 2 + min_node_6_0;
    if ( edge_num_cuts[ num_edge_6_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_0 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_6_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_161: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_0 = min( num_node_6, num_node_0 );
    std::size_t max_node_6_0 = max( num_node_6, num_node_0 );
    std::size_t num_edge_6_0 = max_node_6_0 * ( max_node_6_0 + 1 ) / 2 + min_node_6_0;
    if ( edge_num_cuts[ num_edge_6_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_0 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_6_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_400: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_335: {
    TODO; // several in_outs ou out_ins
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_324: {
    TODO; // several in_outs ou out_ins
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_340: {
    TODO; // several in_outs ou out_ins
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_348: {
    TODO; // several in_outs ou out_ins
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_316: {
    TODO; // several in_outs ou out_ins
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_411: {
    TODO; // several in_outs ou out_ins
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_395: {
    TODO; // several in_outs ou out_ins
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_387: {
    TODO; // several in_outs ou out_ins
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_419: {
    TODO; // several in_outs ou out_ins
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_166: {
    TODO; // several in_outs ou out_ins
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_150: {
    TODO; // several in_outs ou out_ins
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_158: {
    TODO; // several in_outs ou out_ins
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_292: {
    TODO; // several in_outs ou out_ins
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_276: {
    TODO; // several in_outs ou out_ins
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_284: {
    TODO; // several in_outs ou out_ins
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_189: {
    TODO; // several in_outs ou out_ins
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_205: {
    TODO; // several in_outs ou out_ins
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_443: {
    TODO; // several in_outs ou out_ins
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_459: {
    TODO; // several in_outs ou out_ins
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_197: {
    TODO; // several in_outs ou out_ins
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_451: {
    TODO; // several in_outs ou out_ins
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_72: {
    TODO; // several in_outs ou out_ins
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_134: {
    TODO; // several in_outs ou out_ins
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_260: {
    TODO; // several in_outs ou out_ins
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_95: {
    TODO; // several in_outs ou out_ins
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_221: {
    TODO; // several in_outs ou out_ins
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_475: {
    TODO; // several in_outs ou out_ins
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_356: {
    TODO; // several in_outs ou out_ins
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_379: {
    TODO; // several in_outs ou out_ins
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_308: {
    TODO; // several in_outs ou out_ins
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_427: {
    TODO; // several in_outs ou out_ins
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_332: {
    TODO; // several in_outs ou out_ins
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_403: {
    TODO; // several in_outs ou out_ins
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_344: {
    TODO; // several in_outs ou out_ins
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_312: {
    TODO; // several in_outs ou out_ins
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_328: {
    TODO; // several in_outs ou out_ins
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_391: {
    TODO; // several in_outs ou out_ins
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_423: {
    TODO; // several in_outs ou out_ins
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_407: {
    TODO; // several in_outs ou out_ins
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_154: {
    TODO; // several in_outs ou out_ins
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_280: {
    TODO; // several in_outs ou out_ins
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_201: {
    TODO; // several in_outs ou out_ins
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_455: {
    TODO; // several in_outs ou out_ins
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_320: {
    TODO; // several in_outs ou out_ins
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_415: {
    TODO; // several in_outs ou out_ins
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_14: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 4 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 4 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_28: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_58: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_120: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_246: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_20: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 4 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_0 = min( num_node_3, num_node_0 );
    std::size_t max_node_3_0 = max( num_node_3, num_node_0 );
    std::size_t num_edge_3_0 = max_node_3_0 * ( max_node_3_0 + 1 ) / 2 + min_node_3_0;
    if ( edge_num_cuts[ num_edge_3_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_0 ] = num_cut;
        Node *node = &nodes.local_at( 4 );
        edge_cuts[ num_edge_3_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_17: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 4 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 4 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_47: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_109: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_235: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_489: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_11: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    std::size_t min_node_3_0 = min( num_node_3, num_node_0 );
    std::size_t max_node_3_0 = max( num_node_3, num_node_0 );
    std::size_t num_edge_3_0 = max_node_3_0 * ( max_node_3_0 + 1 ) / 2 + min_node_3_0;
    if ( edge_num_cuts[ num_edge_3_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_0 ] = num_cut;
        Node *node = &nodes.local_at( 4 );
        edge_cuts[ num_edge_3_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 4 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_50: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_0 = min( num_node_4, num_node_0 );
    std::size_t max_node_4_0 = max( num_node_4, num_node_0 );
    std::size_t num_edge_4_0 = max_node_4_0 * ( max_node_4_0 + 1 ) / 2 + min_node_4_0;
    if ( edge_num_cuts[ num_edge_4_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_0 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_4_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_25: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    std::size_t min_node_4_0 = min( num_node_4, num_node_0 );
    std::size_t max_node_4_0 = max( num_node_4, num_node_0 );
    std::size_t num_edge_4_0 = max_node_4_0 * ( max_node_4_0 + 1 ) / 2 + min_node_4_0;
    if ( edge_num_cuts[ num_edge_4_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_0 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_4_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_112: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_0 = min( num_node_5, num_node_0 );
    std::size_t max_node_5_0 = max( num_node_5, num_node_0 );
    std::size_t num_edge_5_0 = max_node_5_0 * ( max_node_5_0 + 1 ) / 2 + min_node_5_0;
    if ( edge_num_cuts[ num_edge_5_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_0 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_5_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_55: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_5_0 = min( num_node_5, num_node_0 );
    std::size_t max_node_5_0 = max( num_node_5, num_node_0 );
    std::size_t num_edge_5_0 = max_node_5_0 * ( max_node_5_0 + 1 ) / 2 + min_node_5_0;
    if ( edge_num_cuts[ num_edge_5_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_0 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_5_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_238: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_0 = min( num_node_6, num_node_0 );
    std::size_t max_node_6_0 = max( num_node_6, num_node_0 );
    std::size_t num_edge_6_0 = max_node_6_0 * ( max_node_6_0 + 1 ) / 2 + min_node_6_0;
    if ( edge_num_cuts[ num_edge_6_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_0 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_6_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_117: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_6_0 = min( num_node_6, num_node_0 );
    std::size_t max_node_6_0 = max( num_node_6, num_node_0 );
    std::size_t num_edge_6_0 = max_node_6_0 * ( max_node_6_0 + 1 ) / 2 + min_node_6_0;
    if ( edge_num_cuts[ num_edge_6_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_0 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_6_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_492: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_243: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_3: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 3 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 3 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_7: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 3 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_0 = min( num_node_2, num_node_0 );
    std::size_t max_node_2_0 = max( num_node_2, num_node_0 );
    std::size_t num_edge_2_0 = max_node_2_0 * ( max_node_2_0 + 1 ) / 2 + min_node_2_0;
    if ( edge_num_cuts[ num_edge_2_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_0 ] = num_cut;
        Node *node = &nodes.local_at( 3 );
        edge_cuts[ num_edge_2_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_10: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 4 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 4 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_24: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_54: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_116: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_242: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_6: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 3 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 3 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_5: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 3 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_0 = min( num_node_2, num_node_0 );
    std::size_t max_node_2_0 = max( num_node_2, num_node_0 );
    std::size_t num_edge_2_0 = max_node_2_0 * ( max_node_2_0 + 1 ) / 2 + min_node_2_0;
    if ( edge_num_cuts[ num_edge_2_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_0 ] = num_cut;
        Node *node = &nodes.local_at( 3 );
        edge_cuts[ num_edge_2_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_21: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 4 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 4 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_51: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_113: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_239: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_493: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_2: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    std::size_t min_node_2_0 = min( num_node_2, num_node_0 );
    std::size_t max_node_2_0 = max( num_node_2, num_node_0 );
    std::size_t num_edge_2_0 = max_node_2_0 * ( max_node_2_0 + 1 ) / 2 + min_node_2_0;
    if ( edge_num_cuts[ num_edge_2_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_0 ] = num_cut;
        Node *node = &nodes.local_at( 3 );
        edge_cuts[ num_edge_2_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 3 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_4: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    std::size_t min_node_2_0 = min( num_node_2, num_node_0 );
    std::size_t max_node_2_0 = max( num_node_2, num_node_0 );
    std::size_t num_edge_2_0 = max_node_2_0 * ( max_node_2_0 + 1 ) / 2 + min_node_2_0;
    if ( edge_num_cuts[ num_edge_2_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_0 ] = num_cut;
        Node *node = &nodes.local_at( 3 );
        edge_cuts[ num_edge_2_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 3 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_36: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_66: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_128: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_254: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_39: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_101: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_227: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_481: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_22: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 4 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_0 = min( num_node_3, num_node_0 );
    std::size_t max_node_3_0 = max( num_node_3, num_node_0 );
    std::size_t num_edge_3_0 = max_node_3_0 * ( max_node_3_0 + 1 ) / 2 + min_node_3_0;
    if ( edge_num_cuts[ num_edge_3_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_0 ] = num_cut;
        Node *node = &nodes.local_at( 4 );
        edge_cuts[ num_edge_3_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_9: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    std::size_t min_node_3_0 = min( num_node_3, num_node_0 );
    std::size_t max_node_3_0 = max( num_node_3, num_node_0 );
    std::size_t num_edge_3_0 = max_node_3_0 * ( max_node_3_0 + 1 ) / 2 + min_node_3_0;
    if ( edge_num_cuts[ num_edge_3_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_0 ] = num_cut;
        Node *node = &nodes.local_at( 4 );
        edge_cuts[ num_edge_3_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 4 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_82: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_144: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_270: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_85: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_211: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_465: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_52: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_0 = min( num_node_4, num_node_0 );
    std::size_t max_node_4_0 = max( num_node_4, num_node_0 );
    std::size_t num_edge_4_0 = max_node_4_0 * ( max_node_4_0 + 1 ) / 2 + min_node_4_0;
    if ( edge_num_cuts[ num_edge_4_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_0 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_4_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_23: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    std::size_t min_node_4_0 = min( num_node_4, num_node_0 );
    std::size_t max_node_4_0 = max( num_node_4, num_node_0 );
    std::size_t num_edge_4_0 = max_node_4_0 * ( max_node_4_0 + 1 ) / 2 + min_node_4_0;
    if ( edge_num_cuts[ num_edge_4_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_0 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_4_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_176: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_302: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_179: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_433: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_114: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_0 = min( num_node_5, num_node_0 );
    std::size_t max_node_5_0 = max( num_node_5, num_node_0 );
    std::size_t num_edge_5_0 = max_node_5_0 * ( max_node_5_0 + 1 ) / 2 + min_node_5_0;
    if ( edge_num_cuts[ num_edge_5_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_0 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_5_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_53: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_5_0 = min( num_node_5, num_node_0 );
    std::size_t max_node_5_0 = max( num_node_5, num_node_0 );
    std::size_t num_edge_5_0 = max_node_5_0 * ( max_node_5_0 + 1 ) / 2 + min_node_5_0;
    if ( edge_num_cuts[ num_edge_5_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_0 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_5_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_366: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_369: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_240: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_0 = min( num_node_6, num_node_0 );
    std::size_t max_node_6_0 = max( num_node_6, num_node_0 );
    std::size_t num_edge_6_0 = max_node_6_0 * ( max_node_6_0 + 1 ) / 2 + min_node_6_0;
    if ( edge_num_cuts[ num_edge_6_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_0 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_6_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_115: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_6_0 = min( num_node_6, num_node_0 );
    std::size_t max_node_6_0 = max( num_node_6, num_node_0 );
    std::size_t num_edge_6_0 = max_node_6_0 * ( max_node_6_0 + 1 ) / 2 + min_node_6_0;
    if ( edge_num_cuts[ num_edge_6_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_0 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_6_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_494: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_241: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_0_1 = min( num_node_0, num_node_1 );
    std::size_t max_node_0_1 = max( num_node_0, num_node_1 );
    std::size_t num_edge_0_1 = max_node_0_1 * ( max_node_0_1 + 1 ) / 2 + min_node_0_1;
    if ( edge_num_cuts[ num_edge_0_1 ] != num_cut ) {
        edge_num_cuts[ num_edge_0_1 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_0_1 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_0 );
        const Node &n1 = nodes.local_at( num_node_1 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_46: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_0 = min( num_node_4, num_node_0 );
    std::size_t max_node_4_0 = max( num_node_4, num_node_0 );
    std::size_t num_edge_4_0 = max_node_4_0 * ( max_node_4_0 + 1 ) / 2 + min_node_4_0;
    if ( edge_num_cuts[ num_edge_4_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_0 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_4_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_29: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    std::size_t min_node_4_0 = min( num_node_4, num_node_0 );
    std::size_t max_node_4_0 = max( num_node_4, num_node_0 );
    std::size_t num_edge_4_0 = max_node_4_0 * ( max_node_4_0 + 1 ) / 2 + min_node_4_0;
    if ( edge_num_cuts[ num_edge_4_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_0 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_4_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_108: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_0 = min( num_node_5, num_node_0 );
    std::size_t max_node_5_0 = max( num_node_5, num_node_0 );
    std::size_t num_edge_5_0 = max_node_5_0 * ( max_node_5_0 + 1 ) / 2 + min_node_5_0;
    if ( edge_num_cuts[ num_edge_5_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_0 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_5_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_59: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_5_0 = min( num_node_5, num_node_0 );
    std::size_t max_node_5_0 = max( num_node_5, num_node_0 );
    std::size_t num_edge_5_0 = max_node_5_0 * ( max_node_5_0 + 1 ) / 2 + min_node_5_0;
    if ( edge_num_cuts[ num_edge_5_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_0 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_5_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_234: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_0 = min( num_node_6, num_node_0 );
    std::size_t max_node_6_0 = max( num_node_6, num_node_0 );
    std::size_t num_edge_6_0 = max_node_6_0 * ( max_node_6_0 + 1 ) / 2 + min_node_6_0;
    if ( edge_num_cuts[ num_edge_6_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_0 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_6_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_121: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_6_0 = min( num_node_6, num_node_0 );
    std::size_t max_node_6_0 = max( num_node_6, num_node_0 );
    std::size_t num_edge_6_0 = max_node_6_0 * ( max_node_6_0 + 1 ) / 2 + min_node_6_0;
    if ( edge_num_cuts[ num_edge_6_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_0 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_6_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_488: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_247: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_16: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 4 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_0 = min( num_node_3, num_node_0 );
    std::size_t max_node_3_0 = max( num_node_3, num_node_0 );
    std::size_t num_edge_3_0 = max_node_3_0 * ( max_node_3_0 + 1 ) / 2 + min_node_3_0;
    if ( edge_num_cuts[ num_edge_3_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_0 ] = num_cut;
        Node *node = &nodes.local_at( 4 );
        edge_cuts[ num_edge_3_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_15: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    std::size_t min_node_3_0 = min( num_node_3, num_node_0 );
    std::size_t max_node_3_0 = max( num_node_3, num_node_0 );
    std::size_t num_edge_3_0 = max_node_3_0 * ( max_node_3_0 + 1 ) / 2 + min_node_3_0;
    if ( edge_num_cuts[ num_edge_3_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_0 ] = num_cut;
        Node *node = &nodes.local_at( 4 );
        edge_cuts[ num_edge_3_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 4 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_100: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_0 = min( num_node_5, num_node_0 );
    std::size_t max_node_5_0 = max( num_node_5, num_node_0 );
    std::size_t num_edge_5_0 = max_node_5_0 * ( max_node_5_0 + 1 ) / 2 + min_node_5_0;
    if ( edge_num_cuts[ num_edge_5_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_0 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_5_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_67: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_5_0 = min( num_node_5, num_node_0 );
    std::size_t max_node_5_0 = max( num_node_5, num_node_0 );
    std::size_t num_edge_5_0 = max_node_5_0 * ( max_node_5_0 + 1 ) / 2 + min_node_5_0;
    if ( edge_num_cuts[ num_edge_5_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_0 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_5_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_226: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_0 = min( num_node_6, num_node_0 );
    std::size_t max_node_6_0 = max( num_node_6, num_node_0 );
    std::size_t num_edge_6_0 = max_node_6_0 * ( max_node_6_0 + 1 ) / 2 + min_node_6_0;
    if ( edge_num_cuts[ num_edge_6_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_0 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_6_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_129: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_6_0 = min( num_node_6, num_node_0 );
    std::size_t max_node_6_0 = max( num_node_6, num_node_0 );
    std::size_t num_edge_6_0 = max_node_6_0 * ( max_node_6_0 + 1 ) / 2 + min_node_6_0;
    if ( edge_num_cuts[ num_edge_6_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_0 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_6_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_480: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_255: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_38: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_0 = min( num_node_4, num_node_0 );
    std::size_t max_node_4_0 = max( num_node_4, num_node_0 );
    std::size_t num_edge_4_0 = max_node_4_0 * ( max_node_4_0 + 1 ) / 2 + min_node_4_0;
    if ( edge_num_cuts[ num_edge_4_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_0 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_4_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_37: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    std::size_t min_node_4_0 = min( num_node_4, num_node_0 );
    std::size_t max_node_4_0 = max( num_node_4, num_node_0 );
    std::size_t num_edge_4_0 = max_node_4_0 * ( max_node_4_0 + 1 ) / 2 + min_node_4_0;
    if ( edge_num_cuts[ num_edge_4_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_0 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_4_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_210: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_0 = min( num_node_6, num_node_0 );
    std::size_t max_node_6_0 = max( num_node_6, num_node_0 );
    std::size_t num_edge_6_0 = max_node_6_0 * ( max_node_6_0 + 1 ) / 2 + min_node_6_0;
    if ( edge_num_cuts[ num_edge_6_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_0 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_6_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_145: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_6_0 = min( num_node_6, num_node_0 );
    std::size_t max_node_6_0 = max( num_node_6, num_node_0 );
    std::size_t num_edge_6_0 = max_node_6_0 * ( max_node_6_0 + 1 ) / 2 + min_node_6_0;
    if ( edge_num_cuts[ num_edge_6_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_0 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_6_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_464: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_271: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_84: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_0 = min( num_node_5, num_node_0 );
    std::size_t max_node_5_0 = max( num_node_5, num_node_0 );
    std::size_t num_edge_5_0 = max_node_5_0 * ( max_node_5_0 + 1 ) / 2 + min_node_5_0;
    if ( edge_num_cuts[ num_edge_5_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_0 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_5_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_83: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_5_0 = min( num_node_5, num_node_0 );
    std::size_t max_node_5_0 = max( num_node_5, num_node_0 );
    std::size_t num_edge_5_0 = max_node_5_0 * ( max_node_5_0 + 1 ) / 2 + min_node_5_0;
    if ( edge_num_cuts[ num_edge_5_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_0 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_5_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_432: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_303: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_178: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_0 = min( num_node_6, num_node_0 );
    std::size_t max_node_6_0 = max( num_node_6, num_node_0 );
    std::size_t num_edge_6_0 = max_node_6_0 * ( max_node_6_0 + 1 ) / 2 + min_node_6_0;
    if ( edge_num_cuts[ num_edge_6_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_0 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_6_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_177: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_6_0 = min( num_node_6, num_node_0 );
    std::size_t max_node_6_0 = max( num_node_6, num_node_0 );
    std::size_t num_edge_6_0 = max_node_6_0 * ( max_node_6_0 + 1 ) / 2 + min_node_6_0;
    if ( edge_num_cuts[ num_edge_6_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_0 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_6_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_368: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_367: {
    int num_node_0 = faces.node_lists[ num_face ][ 0 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_7_0 = min( num_node_7, num_node_0 );
    std::size_t max_node_7_0 = max( num_node_7, num_node_0 );
    std::size_t num_edge_7_0 = max_node_7_0 * ( max_node_7_0 + 1 ) / 2 + min_node_7_0;
    if ( edge_num_cuts[ num_edge_7_0 ] != num_cut ) {
        edge_num_cuts[ num_edge_7_0 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_7_0 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_7 );
        const Node &n1 = nodes.local_at( num_node_0 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_34: {
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_64: {
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_126: {
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_252: {
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_41: {
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_103: {
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_229: {
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_483: {
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_12: {
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 4 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 4 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_26: {
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_56: {
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_118: {
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_244: {
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_19: {
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 4 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 4 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_49: {
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_111: {
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_237: {
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_491: {
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_80: {
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_142: {
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_268: {
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_87: {
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_213: {
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_467: {
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_174: {
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_300: {
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_181: {
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_435: {
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_364: {
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_371: {
    int num_node_1 = faces.node_lists[ num_face ][ 1 ];
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_1_2 = min( num_node_1, num_node_2 );
    std::size_t max_node_1_2 = max( num_node_1, num_node_2 );
    std::size_t num_edge_1_2 = max_node_1_2 * ( max_node_1_2 + 1 ) / 2 + min_node_1_2;
    if ( edge_num_cuts[ num_edge_1_2 ] != num_cut ) {
        edge_num_cuts[ num_edge_1_2 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_1_2 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_1 );
        const Node &n1 = nodes.local_at( num_node_2 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_76: {
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_138: {
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_264: {
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_91: {
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_217: {
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_471: {
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_30: {
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_60: {
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_122: {
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_248: {
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_45: {
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 5 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_107: {
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_233: {
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_487: {
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_170: {
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_296: {
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_185: {
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_439: {
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_360: {
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_375: {
    int num_node_2 = faces.node_lists[ num_face ][ 2 ];
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_2_3 = min( num_node_2, num_node_3 );
    std::size_t max_node_2_3 = max( num_node_2, num_node_3 );
    std::size_t num_edge_2_3 = max_node_2_3 * ( max_node_2_3 + 1 ) / 2 + min_node_2_3;
    if ( edge_num_cuts[ num_edge_2_3 ] != num_cut ) {
        edge_num_cuts[ num_edge_2_3 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_2_3 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_2 );
        const Node &n1 = nodes.local_at( num_node_3 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_162: {
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_288: {
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_193: {
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_447: {
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_68: {
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_130: {
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_256: {
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_99: {
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 6 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_225: {
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_479: {
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_352: {
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_383: {
    int num_node_3 = faces.node_lists[ num_face ][ 3 ];
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_3_4 = min( num_node_3, num_node_4 );
    std::size_t max_node_3_4 = max( num_node_3, num_node_4 );
    std::size_t num_edge_3_4 = max_node_3_4 * ( max_node_3_4 + 1 ) / 2 + min_node_3_4;
    if ( edge_num_cuts[ num_edge_3_4 ] != num_cut ) {
        edge_num_cuts[ num_edge_3_4 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_3_4 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_3 );
        const Node &n1 = nodes.local_at( num_node_4 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_336: {
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_399: {
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_146: {
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_272: {
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_209: {
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 7 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_463: {
    int num_node_4 = faces.node_lists[ num_face ][ 4 ];
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_4_5 = min( num_node_4, num_node_5 );
    std::size_t max_node_4_5 = max( num_node_4, num_node_5 );
    std::size_t num_edge_4_5 = max_node_4_5 * ( max_node_4_5 + 1 ) / 2 + min_node_4_5;
    if ( edge_num_cuts[ num_edge_4_5 ] != num_cut ) {
        edge_num_cuts[ num_edge_4_5 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_4_5 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_4 );
        const Node &n1 = nodes.local_at( num_node_5 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_304: {
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_431: {
    int num_node_5 = faces.node_lists[ num_face ][ 5 ];
    int num_node_6 = faces.node_lists[ num_face ][ 6 ];
    int num_node_7 = faces.node_lists[ num_face ][ 7 ];
    std::size_t min_node_6_7 = min( num_node_6, num_node_7 );
    std::size_t max_node_6_7 = max( num_node_6, num_node_7 );
    std::size_t num_edge_6_7 = max_node_6_7 * ( max_node_6_7 + 1 ) / 2 + min_node_6_7;
    if ( edge_num_cuts[ num_edge_6_7 ] != num_cut ) {
        edge_num_cuts[ num_edge_6_7 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_6_7 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_6 );
        const Node &n1 = nodes.local_at( num_node_7 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    std::size_t min_node_5_6 = min( num_node_5, num_node_6 );
    std::size_t max_node_5_6 = max( num_node_5, num_node_6 );
    std::size_t num_edge_5_6 = max_node_5_6 * ( max_node_5_6 + 1 ) / 2 + min_node_5_6;
    if ( edge_num_cuts[ num_edge_5_6 ] != num_cut ) {
        edge_num_cuts[ num_edge_5_6 ] = num_cut;
        Node *node = &nodes.local_at( 8 );
        edge_cuts[ num_edge_5_6 ] = node;
        
        const Node &n0 = nodes.local_at( num_node_5 );
        const Node &n1 = nodes.local_at( num_node_6 );
        node->set_pos( n0.pos() + n0.d / ( n0.d - n1.d ) * ( n1.pos() - n0.pos() ) );
    }
    break;
}
case_0:
    ;
