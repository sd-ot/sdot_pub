#include "../../Support/SimdVec.h"
#include <functional>
namespace sdot {
namespace internal {
template<class TF>
void ConvexPolyhedron2dLt64_cut( TF *px, TF *py, std::size_t *pi, int &nodes_size, const TF *cut_x, const TF *cut_y, const TF *cut_s, const std::size_t *cut_i, int cut_n, const std::function<void(void)> &too_small_cb ) {
    using namespace sdot;
    using TC = std::size_t;
    using VF = SimdVec<TF,1>;
    using VC = SimdVec<TC,1>;
    VF px_0 = VF::load_aligned( px + 0 );
    VF px_1 = VF::load_aligned( px + 1 );
    VF px_2 = VF::load_aligned( px + 2 );
    VF px_3 = VF::load_aligned( px + 3 );
    VF px_4 = VF::load_aligned( px + 4 );
    VF py_0 = VF::load_aligned( py + 0 );
    VF py_1 = VF::load_aligned( py + 1 );
    VF py_2 = VF::load_aligned( py + 2 );
    VF py_3 = VF::load_aligned( py + 3 );
    VF py_4 = VF::load_aligned( py + 4 );
    VC pi_0 = VC::load_aligned( pi + 0 );
    VC pi_1 = VC::load_aligned( pi + 1 );
    VC pi_2 = VC::load_aligned( pi + 2 );
    VC pi_3 = VC::load_aligned( pi + 3 );
    VC pi_4 = VC::load_aligned( pi + 4 );
    for( int num_cut = 0; num_cut < cut_n; ++num_cut ) {
        int nmsk = 1 << nodes_size;
        VF cx = cut_x[ num_cut ];
        VF cy = cut_y[ num_cut ];
        VF cs = cut_s[ num_cut ];
        
        VF bi_0 = px_0 * cx + py_0 * cy;
        VF bi_1 = px_1 * cx + py_1 * cy;
        VF bi_2 = px_2 * cx + py_2 * cy;
        VF bi_3 = px_3 * cx + py_3 * cy;
        int outside_nodes = ( ( bi_0 > cs ) << 0 ) | ( ( bi_1 > cs ) << 1 ) | ( ( bi_2 > cs ) << 2 ) | ( ( bi_3 > cs ) << 3 );
        int case_code = ( outside_nodes & ( nmsk - 1 ) ) | nmsk;
        VF di_0 = bi_0 - cs;
        VF di_1 = bi_1 - cs;
        VF di_2 = bi_2 - cs;
        VF di_3 = bi_3 - cs;
        
        // if nothing has changed => go to the next cut
        if ( outside_nodes == 0 )
            continue;
        static void *dispatch_table[] = { &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_not_handled, &&case_1, &&case_2, &&case_3, &&case_4, &&case_5, &&case_6, &&case_7, &&case_8, &&case_1, &&case_9, &&case_10, &&case_11, &&case_12, &&case_not_handled, &&case_13, &&case_14, &&case_15, &&case_16, &&case_not_handled, &&case_17, &&case_18, &&case_19, &&case_20, &&case_8,  };
        goto *dispatch_table[ case_code ];
        case_not_handled: {
            break;
        }
        case_1: {
            // everything is inside
            continue;
        }
        case_8: {
            // everything is outside
            nodes_size = 0;
            return too_small_cb();
        }
        case_16: {
            // mod=1,2,[2,3],[0,1], swith_cuts=1
            SimdVec<TC,1> R0{ cut_i[num_cut] };
            auto R1 = px_1[ 0 ];
            SimdVec<TF,1> R2{ R1 };
            auto R3 = py_1[ 0 ];
            SimdVec<TF,1> R4{ R3 };
            auto R5 = pi_1[ 0 ];
            SimdVec<TC,1> R6{ R5 };
            auto R7 = px_2[ 0 ];
            SimdVec<TF,2> R8{ R1, R7 };
            SimdVec<TF,1> R9{ R7 };
            auto R10 = py_2[ 0 ];
            SimdVec<TF,2> R11{ R3, R10 };
            SimdVec<TF,1> R12{ R10 };
            auto R13 = pi_2[ 0 ];
            SimdVec<TC,1> R14{ R13 };
            auto R15 = di_1[ 0 ];
            auto R16 = di_2[ 0 ];
            SimdVec<TF,2> R17{ R15, R16 };
            auto R18 = py_3[ 0 ];
            auto R19 = py_0[ 0 ];
            SimdVec<TF,2> R20{ R19, R18 };
            auto R21 = R11 - R20;
            auto R22 = px_3[ 0 ];
            auto R23 = px_0[ 0 ];
            SimdVec<TF,2> R24{ R23, R22 };
            auto R25 = R8 - R24;
            auto R26 = di_3[ 0 ];
            auto R27 = di_0[ 0 ];
            SimdVec<TF,2> R28{ R27, R26 };
            auto R29 = R28 - R17;
            auto R30 = R17 / R29;
            auto R31 = R30 * R21;
            auto R32 = R11 + R31;
            auto R33 = R32[ 0 ];
            SimdVec<TF,1> R34{ R33 };
            auto R35 = R30 * R25;
            auto R36 = R8 + R35;
            auto R37 = R36[ 0 ];
            SimdVec<TF,1> R38{ R37 };
            auto R39 = R32[ 1 ];
            SimdVec<TF,1> R40{ R39 };
            auto R41 = R36[ 1 ];
            SimdVec<TF,1> R42{ R41 };
            px_2 = R42;
            py_2 = R40;
            px_3 = R38;
            py_3 = R34;
            pi_2 = R0;
            pi_1 = R14;
            py_1 = R12;
            px_1 = R9;
            pi_0 = R6;
            py_0 = R4;
            px_0 = R2;
            pi_3 = R0;
            continue;
        }
        case_6: {
            // mod=1,[1,2],[0,1], swith_cuts=0
            SimdVec<TC,1> R0{ cut_i[num_cut] };
            auto R1 = px_1[ 0 ];
            SimdVec<TF,2> R2{ R1, R1 };
            SimdVec<TF,1> R3{ R1 };
            auto R4 = py_1[ 0 ];
            SimdVec<TF,2> R5{ R4, R4 };
            SimdVec<TF,1> R6{ R4 };
            auto R7 = pi_1[ 0 ];
            SimdVec<TC,1> R8{ R7 };
            auto R9 = di_1[ 0 ];
            SimdVec<TF,2> R10{ R9, R9 };
            auto R11 = di_2[ 0 ];
            auto R12 = py_0[ 0 ];
            auto R13 = py_2[ 0 ];
            SimdVec<TF,2> R14{ R13, R12 };
            auto R15 = R5 - R14;
            auto R16 = px_0[ 0 ];
            auto R17 = px_2[ 0 ];
            SimdVec<TF,2> R18{ R17, R16 };
            auto R19 = R2 - R18;
            auto R20 = di_0[ 0 ];
            SimdVec<TF,2> R21{ R11, R20 };
            auto R22 = R21 - R10;
            auto R23 = R10 / R22;
            auto R24 = R23 * R15;
            auto R25 = R5 + R24;
            auto R26 = R25[ 1 ];
            SimdVec<TF,1> R27{ R26 };
            auto R28 = R23 * R19;
            auto R29 = R2 + R28;
            auto R30 = R29[ 1 ];
            SimdVec<TF,1> R31{ R30 };
            auto R32 = R25[ 0 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = R29[ 0 ];
            SimdVec<TF,1> R35{ R34 };
            px_1 = R35;
            py_1 = R33;
            px_2 = R31;
            py_2 = R27;
            pi_1 = R0;
            pi_0 = R8;
            py_0 = R6;
            px_0 = R3;
            pi_2 = R0;
            continue;
        }
        case_18: {
            // mod=1,[1,2],[3,0],0, swith_cuts=0
            auto R0 = pi_0[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_1[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_1[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_1[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_0[ 0 ];
            SimdVec<TF,1> R9{ R8 };
            auto R10 = di_1[ 0 ];
            SimdVec<TF,2> R11{ R2, R8 };
            SimdVec<TC,1> R12{ cut_i[num_cut] };
            auto R13 = di_0[ 0 ];
            SimdVec<TF,2> R14{ R10, R13 };
            auto R15 = di_2[ 0 ];
            auto R16 = py_3[ 0 ];
            auto R17 = py_2[ 0 ];
            SimdVec<TF,2> R18{ R17, R16 };
            auto R19 = py_0[ 0 ];
            SimdVec<TF,1> R20{ R19 };
            auto R21 = di_3[ 0 ];
            SimdVec<TF,2> R22{ R15, R21 };
            auto R23 = R22 - R14;
            auto R24 = R14 / R23;
            SimdVec<TF,2> R25{ R4, R19 };
            auto R26 = R25 - R18;
            auto R27 = R24 * R26;
            auto R28 = R25 + R27;
            auto R29 = R28[ 1 ];
            SimdVec<TF,1> R30{ R29 };
            auto R31 = px_2[ 0 ];
            auto R32 = R28[ 0 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = px_3[ 0 ];
            SimdVec<TF,2> R35{ R31, R34 };
            auto R36 = R11 - R35;
            auto R37 = R24 * R36;
            auto R38 = R11 + R37;
            auto R39 = R38[ 1 ];
            SimdVec<TF,1> R40{ R39 };
            auto R41 = R38[ 0 ];
            SimdVec<TF,1> R42{ R41 };
            px_1 = R42;
            px_2 = R40;
            py_1 = R33;
            py_2 = R30;
            py_3 = R20;
            pi_1 = R12;
            pi_2 = R12;
            px_3 = R9;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_3 = R1;
            continue;
        }
        case_11: {
            // mod=2,3,[3,0],[1,2], swith_cuts=0
            SimdVec<TC,1> R0{ cut_i[num_cut] };
            auto R1 = px_2[ 0 ];
            SimdVec<TF,1> R2{ R1 };
            auto R3 = py_2[ 0 ];
            SimdVec<TF,1> R4{ R3 };
            auto R5 = pi_2[ 0 ];
            SimdVec<TC,1> R6{ R5 };
            auto R7 = px_3[ 0 ];
            SimdVec<TF,1> R8{ R7 };
            auto R9 = py_3[ 0 ];
            SimdVec<TF,1> R10{ R9 };
            auto R11 = pi_3[ 0 ];
            SimdVec<TC,1> R12{ R11 };
            auto R13 = px_0[ 0 ];
            SimdVec<TF,2> R14{ R13, R1 };
            auto R15 = di_0[ 0 ];
            auto R16 = py_1[ 0 ];
            SimdVec<TF,2> R17{ R9, R16 };
            auto R18 = py_0[ 0 ];
            SimdVec<TF,2> R19{ R18, R3 };
            auto R20 = R19 - R17;
            auto R21 = px_1[ 0 ];
            SimdVec<TF,2> R22{ R7, R21 };
            auto R23 = R14 - R22;
            auto R24 = di_1[ 0 ];
            auto R25 = di_3[ 0 ];
            SimdVec<TF,2> R26{ R25, R24 };
            auto R27 = di_2[ 0 ];
            SimdVec<TF,2> R28{ R15, R27 };
            auto R29 = R26 - R28;
            auto R30 = R28 / R29;
            auto R31 = R30 * R20;
            auto R32 = R19 + R31;
            auto R33 = R32[ 1 ];
            SimdVec<TF,1> R34{ R33 };
            auto R35 = R30 * R23;
            auto R36 = R14 + R35;
            auto R37 = R36[ 1 ];
            SimdVec<TF,1> R38{ R37 };
            auto R39 = R32[ 0 ];
            SimdVec<TF,1> R40{ R39 };
            auto R41 = R36[ 0 ];
            SimdVec<TF,1> R42{ R41 };
            px_2 = R42;
            py_2 = R40;
            px_3 = R38;
            py_3 = R34;
            pi_2 = R0;
            pi_1 = R12;
            py_1 = R10;
            px_1 = R8;
            pi_0 = R6;
            py_0 = R4;
            px_0 = R2;
            pi_3 = R0;
            continue;
        }
        case_4: {
            // mod=2,[2,0],[1,2], swith_cuts=0
            SimdVec<TC,1> R0{ cut_i[num_cut] };
            auto R1 = px_2[ 0 ];
            SimdVec<TF,2> R2{ R1, R1 };
            SimdVec<TF,1> R3{ R1 };
            auto R4 = py_2[ 0 ];
            SimdVec<TF,2> R5{ R4, R4 };
            SimdVec<TF,1> R6{ R4 };
            auto R7 = pi_2[ 0 ];
            SimdVec<TC,1> R8{ R7 };
            auto R9 = px_0[ 0 ];
            auto R10 = px_1[ 0 ];
            SimdVec<TF,2> R11{ R9, R10 };
            auto R12 = R11 - R2;
            auto R13 = py_1[ 0 ];
            auto R14 = py_0[ 0 ];
            SimdVec<TF,2> R15{ R14, R13 };
            auto R16 = R15 - R5;
            auto R17 = di_2[ 0 ];
            SimdVec<TF,2> R18{ R17, R17 };
            auto R19 = di_1[ 0 ];
            auto R20 = di_0[ 0 ];
            SimdVec<TF,2> R21{ R20, R19 };
            auto R22 = R18 - R21;
            auto R23 = R21 / R22;
            auto R24 = R23 * R16;
            auto R25 = R15 + R24;
            auto R26 = R25[ 1 ];
            SimdVec<TF,1> R27{ R26 };
            auto R28 = R23 * R12;
            auto R29 = R11 + R28;
            auto R30 = R29[ 1 ];
            SimdVec<TF,1> R31{ R30 };
            auto R32 = R25[ 0 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = R29[ 0 ];
            SimdVec<TF,1> R35{ R34 };
            px_1 = R35;
            py_1 = R33;
            px_2 = R31;
            py_2 = R27;
            pi_1 = R0;
            pi_0 = R8;
            py_0 = R6;
            px_0 = R3;
            pi_2 = R0;
            continue;
        }
        case_7: {
            // mod=[2,0],0,[0,1], swith_cuts=0
            auto R0 = pi_0[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_0[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = di_0[ 0 ];
            SimdVec<TF,2> R5{ R4, R4 };
            SimdVec<TF,2> R6{ R2, R2 };
            SimdVec<TC,1> R7{ cut_i[num_cut] };
            auto R8 = di_2[ 0 ];
            auto R9 = di_1[ 0 ];
            SimdVec<TF,2> R10{ R8, R9 };
            auto R11 = R10 - R5;
            auto R12 = R5 / R11;
            auto R13 = py_1[ 0 ];
            auto R14 = py_2[ 0 ];
            SimdVec<TF,2> R15{ R14, R13 };
            auto R16 = py_0[ 0 ];
            SimdVec<TF,1> R17{ R16 };
            auto R18 = px_2[ 0 ];
            SimdVec<TF,2> R19{ R16, R16 };
            auto R20 = R19 - R15;
            auto R21 = R12 * R20;
            auto R22 = R19 + R21;
            auto R23 = R22[ 1 ];
            SimdVec<TF,1> R24{ R23 };
            auto R25 = px_1[ 0 ];
            SimdVec<TF,2> R26{ R18, R25 };
            auto R27 = R6 - R26;
            auto R28 = R12 * R27;
            auto R29 = R6 + R28;
            auto R30 = R29[ 1 ];
            SimdVec<TF,1> R31{ R30 };
            auto R32 = R29[ 0 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = R22[ 0 ];
            SimdVec<TF,1> R35{ R34 };
            py_0 = R35;
            px_0 = R33;
            px_2 = R31;
            py_2 = R24;
            py_1 = R17;
            pi_0 = R7;
            pi_2 = R7;
            px_1 = R3;
            pi_1 = R1;
            continue;
        }
        case_13: {
            // mod=[2,3],3,0,[0,1], swith_cuts=0
            auto R0 = pi_0[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_3[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = px_0[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = di_3[ 0 ];
            SimdVec<TF,2> R7{ R2, R4 };
            auto R8 = pi_3[ 0 ];
            SimdVec<TC,1> R9{ R8 };
            auto R10 = di_0[ 0 ];
            SimdVec<TF,2> R11{ R6, R10 };
            SimdVec<TC,1> R12{ cut_i[num_cut] };
            auto R13 = di_2[ 0 ];
            auto R14 = di_1[ 0 ];
            SimdVec<TF,2> R15{ R13, R14 };
            auto R16 = R15 - R11;
            auto R17 = R11 / R16;
            auto R18 = py_1[ 0 ];
            auto R19 = py_2[ 0 ];
            SimdVec<TF,2> R20{ R19, R18 };
            auto R21 = py_0[ 0 ];
            SimdVec<TF,1> R22{ R21 };
            auto R23 = px_2[ 0 ];
            auto R24 = py_3[ 0 ];
            SimdVec<TF,1> R25{ R24 };
            auto R26 = px_1[ 0 ];
            SimdVec<TF,2> R27{ R23, R26 };
            auto R28 = R7 - R27;
            auto R29 = R17 * R28;
            auto R30 = R7 + R29;
            auto R31 = R30[ 1 ];
            SimdVec<TF,1> R32{ R31 };
            SimdVec<TF,2> R33{ R24, R21 };
            auto R34 = R33 - R20;
            auto R35 = R17 * R34;
            auto R36 = R33 + R35;
            auto R37 = R36[ 1 ];
            SimdVec<TF,1> R38{ R37 };
            auto R39 = R30[ 0 ];
            SimdVec<TF,1> R40{ R39 };
            auto R41 = R36[ 0 ];
            SimdVec<TF,1> R42{ R41 };
            py_0 = R42;
            px_0 = R40;
            py_3 = R38;
            px_3 = R32;
            py_1 = R25;
            py_2 = R22;
            pi_0 = R12;
            pi_3 = R12;
            pi_1 = R9;
            px_2 = R5;
            px_1 = R3;
            pi_2 = R1;
            continue;
        }
        case_19: {
            nodes_size = 3;
            // mod=1,[1,2],[0,1], swith_cuts=0
            SimdVec<TC,1> R0{ cut_i[num_cut] };
            auto R1 = px_1[ 0 ];
            SimdVec<TF,1> R2{ R1 };
            auto R3 = py_1[ 0 ];
            SimdVec<TF,1> R4{ R3 };
            auto R5 = pi_1[ 0 ];
            SimdVec<TC,1> R6{ R5 };
            auto R7 = px_0[ 0 ];
            SimdVec<TF,2> R8{ R1, R7 };
            auto R9 = di_1[ 0 ];
            auto R10 = py_2[ 0 ];
            SimdVec<TF,2> R11{ R10, R3 };
            auto R12 = py_0[ 0 ];
            SimdVec<TF,2> R13{ R3, R12 };
            auto R14 = R13 - R11;
            auto R15 = px_2[ 0 ];
            SimdVec<TF,2> R16{ R15, R1 };
            auto R17 = R8 - R16;
            auto R18 = di_2[ 0 ];
            SimdVec<TF,2> R19{ R18, R9 };
            auto R20 = di_0[ 0 ];
            SimdVec<TF,2> R21{ R9, R20 };
            auto R22 = R19 - R21;
            auto R23 = R21 / R22;
            auto R24 = R23 * R14;
            auto R25 = R13 + R24;
            auto R26 = R25[ 1 ];
            SimdVec<TF,1> R27{ R26 };
            auto R28 = R23 * R17;
            auto R29 = R8 + R28;
            auto R30 = R29[ 1 ];
            SimdVec<TF,1> R31{ R30 };
            auto R32 = R25[ 0 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = R29[ 0 ];
            SimdVec<TF,1> R35{ R34 };
            px_1 = R35;
            py_1 = R33;
            px_2 = R31;
            py_2 = R27;
            pi_1 = R0;
            pi_0 = R6;
            py_0 = R4;
            px_0 = R2;
            pi_2 = R0;
            continue;
        }
        case_17: {
            nodes_size = 3;
            // mod=[1,2],2,[2,3], swith_cuts=0
            auto R0 = pi_2[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_1[ 0 ];
            SimdVec<TC,1> R3{ cut_i[num_cut] };
            auto R4 = px_2[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = di_1[ 0 ];
            SimdVec<TF,2> R7{ R2, R4 };
            auto R8 = di_2[ 0 ];
            SimdVec<TF,2> R9{ R6, R8 };
            auto R10 = py_3[ 0 ];
            auto R11 = py_2[ 0 ];
            SimdVec<TF,1> R12{ R11 };
            auto R13 = di_3[ 0 ];
            SimdVec<TF,2> R14{ R8, R13 };
            auto R15 = R14 - R9;
            auto R16 = R9 / R15;
            SimdVec<TF,2> R17{ R11, R10 };
            auto R18 = py_1[ 0 ];
            SimdVec<TF,2> R19{ R18, R11 };
            auto R20 = R19 - R17;
            auto R21 = R16 * R20;
            auto R22 = R19 + R21;
            auto R23 = R22[ 1 ];
            SimdVec<TF,1> R24{ R23 };
            auto R25 = px_3[ 0 ];
            SimdVec<TF,2> R26{ R4, R25 };
            auto R27 = R7 - R26;
            auto R28 = R16 * R27;
            auto R29 = R7 + R28;
            auto R30 = R29[ 1 ];
            SimdVec<TF,1> R31{ R30 };
            auto R32 = R22[ 0 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = R29[ 0 ];
            SimdVec<TF,1> R35{ R34 };
            px_0 = R35;
            py_0 = R33;
            px_2 = R31;
            py_2 = R24;
            py_1 = R12;
            pi_0 = R3;
            px_1 = R5;
            pi_2 = R3;
            pi_1 = R1;
            continue;
        }
        case_14: {
            nodes_size = 3;
            // mod=[2,3],3,[3,0], swith_cuts=0
            auto R0 = pi_3[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_2[ 0 ];
            SimdVec<TC,1> R3{ cut_i[num_cut] };
            auto R4 = px_0[ 0 ];
            SimdVec<TF,2> R5{ R2, R4 };
            auto R6 = di_2[ 0 ];
            auto R7 = py_3[ 0 ];
            SimdVec<TF,1> R8{ R7 };
            auto R9 = di_0[ 0 ];
            SimdVec<TF,2> R10{ R6, R9 };
            SimdVec<TF,2> R11{ R7, R7 };
            auto R12 = py_0[ 0 ];
            auto R13 = py_2[ 0 ];
            SimdVec<TF,2> R14{ R13, R12 };
            auto R15 = R14 - R11;
            auto R16 = px_3[ 0 ];
            SimdVec<TF,1> R17{ R16 };
            auto R18 = di_3[ 0 ];
            SimdVec<TF,2> R19{ R18, R18 };
            auto R20 = R19 - R10;
            auto R21 = R10 / R20;
            auto R22 = R21 * R15;
            auto R23 = R14 + R22;
            auto R24 = R23[ 1 ];
            SimdVec<TF,1> R25{ R24 };
            SimdVec<TF,2> R26{ R16, R16 };
            auto R27 = R5 - R26;
            auto R28 = R21 * R27;
            auto R29 = R5 + R28;
            auto R30 = R29[ 1 ];
            SimdVec<TF,1> R31{ R30 };
            auto R32 = R29[ 0 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = R23[ 0 ];
            SimdVec<TF,1> R35{ R34 };
            py_0 = R35;
            px_0 = R33;
            px_2 = R31;
            py_2 = R25;
            px_1 = R17;
            py_1 = R8;
            pi_0 = R3;
            pi_2 = R3;
            pi_1 = R1;
            continue;
        }
        case_20: {
            nodes_size = 3;
            // mod=[3,0],0,[0,1], swith_cuts=0
            auto R0 = pi_0[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_3[ 0 ];
            SimdVec<TC,1> R3{ cut_i[num_cut] };
            auto R4 = px_0[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = di_3[ 0 ];
            SimdVec<TF,2> R7{ R2, R4 };
            auto R8 = di_0[ 0 ];
            SimdVec<TF,2> R9{ R6, R8 };
            auto R10 = py_1[ 0 ];
            auto R11 = py_0[ 0 ];
            SimdVec<TF,1> R12{ R11 };
            auto R13 = di_1[ 0 ];
            SimdVec<TF,2> R14{ R8, R13 };
            auto R15 = R14 - R9;
            auto R16 = R9 / R15;
            SimdVec<TF,2> R17{ R11, R10 };
            auto R18 = py_3[ 0 ];
            SimdVec<TF,2> R19{ R18, R11 };
            auto R20 = R19 - R17;
            auto R21 = R16 * R20;
            auto R22 = R19 + R21;
            auto R23 = R22[ 1 ];
            SimdVec<TF,1> R24{ R23 };
            auto R25 = px_1[ 0 ];
            SimdVec<TF,2> R26{ R4, R25 };
            auto R27 = R7 - R26;
            auto R28 = R16 * R27;
            auto R29 = R7 + R28;
            auto R30 = R29[ 1 ];
            SimdVec<TF,1> R31{ R30 };
            auto R32 = R22[ 0 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = R29[ 0 ];
            SimdVec<TF,1> R35{ R34 };
            px_0 = R35;
            py_0 = R33;
            px_2 = R31;
            py_2 = R24;
            py_1 = R12;
            pi_0 = R3;
            px_1 = R5;
            pi_2 = R3;
            pi_1 = R1;
            continue;
        }
        case_3: {
            nodes_size = 4;
            // mod=0,[0,1],[1,2],2, swith_cuts=0
            auto R0 = pi_2[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_0[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_0[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_0[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_1[ 0 ];
            SimdVec<TF,2> R9{ R2, R8 };
            SimdVec<TC,1> R10{ cut_i[num_cut] };
            auto R11 = di_0[ 0 ];
            auto R12 = di_1[ 0 ];
            SimdVec<TF,2> R13{ R11, R12 };
            auto R14 = py_2[ 0 ];
            SimdVec<TF,1> R15{ R14 };
            auto R16 = di_2[ 0 ];
            SimdVec<TF,2> R17{ R12, R16 };
            auto R18 = R17 - R13;
            auto R19 = R13 / R18;
            auto R20 = py_1[ 0 ];
            SimdVec<TF,2> R21{ R20, R14 };
            SimdVec<TF,2> R22{ R4, R20 };
            auto R23 = R22 - R21;
            auto R24 = R19 * R23;
            auto R25 = R22 + R24;
            auto R26 = R25[ 1 ];
            SimdVec<TF,1> R27{ R26 };
            auto R28 = px_2[ 0 ];
            SimdVec<TF,1> R29{ R28 };
            auto R30 = R25[ 0 ];
            SimdVec<TF,1> R31{ R30 };
            SimdVec<TF,2> R32{ R8, R28 };
            auto R33 = R9 - R32;
            auto R34 = R19 * R33;
            auto R35 = R9 + R34;
            auto R36 = R35[ 1 ];
            SimdVec<TF,1> R37{ R36 };
            auto R38 = R35[ 0 ];
            SimdVec<TF,1> R39{ R38 };
            px_1 = R39;
            px_2 = R37;
            py_1 = R31;
            px_3 = R29;
            py_2 = R27;
            py_3 = R15;
            pi_1 = R10;
            pi_2 = R10;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_3 = R1;
            continue;
        }
        case_2: {
            nodes_size = 4;
            // mod=1,2,[2,0],[0,1], swith_cuts=1
            SimdVec<TC,1> R0{ cut_i[num_cut] };
            auto R1 = px_1[ 0 ];
            SimdVec<TF,1> R2{ R1 };
            auto R3 = py_1[ 0 ];
            SimdVec<TF,1> R4{ R3 };
            auto R5 = pi_1[ 0 ];
            SimdVec<TC,1> R6{ R5 };
            auto R7 = px_2[ 0 ];
            SimdVec<TF,2> R8{ R1, R7 };
            SimdVec<TF,1> R9{ R7 };
            auto R10 = py_2[ 0 ];
            SimdVec<TF,2> R11{ R3, R10 };
            SimdVec<TF,1> R12{ R10 };
            auto R13 = pi_2[ 0 ];
            SimdVec<TC,1> R14{ R13 };
            auto R15 = px_0[ 0 ];
            SimdVec<TF,2> R16{ R15, R15 };
            auto R17 = R16 - R8;
            auto R18 = di_0[ 0 ];
            SimdVec<TF,2> R19{ R18, R18 };
            auto R20 = py_0[ 0 ];
            SimdVec<TF,2> R21{ R20, R20 };
            auto R22 = R21 - R11;
            auto R23 = di_2[ 0 ];
            auto R24 = di_1[ 0 ];
            SimdVec<TF,2> R25{ R24, R23 };
            auto R26 = R25 - R19;
            auto R27 = R19 / R26;
            auto R28 = R27 * R22;
            auto R29 = R21 + R28;
            auto R30 = R29[ 0 ];
            SimdVec<TF,1> R31{ R30 };
            auto R32 = R27 * R17;
            auto R33 = R16 + R32;
            auto R34 = R33[ 0 ];
            SimdVec<TF,1> R35{ R34 };
            auto R36 = R29[ 1 ];
            SimdVec<TF,1> R37{ R36 };
            auto R38 = R33[ 1 ];
            SimdVec<TF,1> R39{ R38 };
            px_2 = R39;
            py_2 = R37;
            px_3 = R35;
            py_3 = R31;
            pi_2 = R0;
            pi_1 = R14;
            py_1 = R12;
            px_1 = R9;
            pi_0 = R6;
            py_0 = R4;
            px_0 = R2;
            pi_3 = R0;
            continue;
        }
        case_5: {
            nodes_size = 4;
            // mod=1,[1,2],[2,0],0, swith_cuts=1
            auto R0 = pi_0[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_1[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_1[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_1[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_2[ 0 ];
            SimdVec<TF,2> R9{ R8, R2 };
            SimdVec<TC,1> R10{ cut_i[num_cut] };
            auto R11 = di_2[ 0 ];
            auto R12 = di_1[ 0 ];
            SimdVec<TF,2> R13{ R11, R12 };
            auto R14 = py_0[ 0 ];
            SimdVec<TF,1> R15{ R14 };
            auto R16 = di_0[ 0 ];
            SimdVec<TF,2> R17{ R16, R11 };
            auto R18 = R17 - R13;
            auto R19 = R13 / R18;
            auto R20 = py_2[ 0 ];
            SimdVec<TF,2> R21{ R14, R20 };
            SimdVec<TF,2> R22{ R20, R4 };
            auto R23 = R22 - R21;
            auto R24 = R19 * R23;
            auto R25 = R22 + R24;
            auto R26 = R25[ 0 ];
            SimdVec<TF,1> R27{ R26 };
            auto R28 = px_0[ 0 ];
            SimdVec<TF,1> R29{ R28 };
            auto R30 = R25[ 1 ];
            SimdVec<TF,1> R31{ R30 };
            SimdVec<TF,2> R32{ R28, R8 };
            auto R33 = R9 - R32;
            auto R34 = R19 * R33;
            auto R35 = R9 + R34;
            auto R36 = R35[ 0 ];
            SimdVec<TF,1> R37{ R36 };
            auto R38 = R35[ 1 ];
            SimdVec<TF,1> R39{ R38 };
            px_1 = R39;
            px_2 = R37;
            py_1 = R31;
            px_3 = R29;
            py_2 = R27;
            py_3 = R15;
            pi_1 = R10;
            pi_2 = R10;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_3 = R1;
            continue;
        }
        case_15: {
            nodes_size = 5;
            // mod=0,1,2,[2,3],[3,0], swith_cuts=1
            SimdVec<TC,1> R0{ cut_i[num_cut] };
            auto R1 = px_0[ 0 ];
            SimdVec<TF,1> R2{ R1 };
            auto R3 = py_0[ 0 ];
            SimdVec<TF,1> R4{ R3 };
            auto R5 = pi_0[ 0 ];
            SimdVec<TC,1> R6{ R5 };
            auto R7 = px_1[ 0 ];
            SimdVec<TF,1> R8{ R7 };
            auto R9 = py_1[ 0 ];
            SimdVec<TF,1> R10{ R9 };
            auto R11 = pi_1[ 0 ];
            SimdVec<TC,1> R12{ R11 };
            auto R13 = px_2[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = py_2[ 0 ];
            SimdVec<TF,1> R16{ R15 };
            auto R17 = pi_2[ 0 ];
            SimdVec<TC,1> R18{ R17 };
            auto R19 = px_3[ 0 ];
            SimdVec<TF,2> R20{ R1, R19 };
            SimdVec<TF,2> R21{ R19, R13 };
            auto R22 = R21 - R20;
            auto R23 = di_3[ 0 ];
            auto R24 = py_3[ 0 ];
            SimdVec<TF,2> R25{ R3, R24 };
            SimdVec<TF,2> R26{ R24, R15 };
            auto R27 = R26 - R25;
            auto R28 = di_0[ 0 ];
            SimdVec<TF,2> R29{ R28, R23 };
            auto R30 = di_2[ 0 ];
            SimdVec<TF,2> R31{ R23, R30 };
            auto R32 = R29 - R31;
            auto R33 = R31 / R32;
            auto R34 = R33 * R27;
            auto R35 = R26 + R34;
            auto R36 = R35[ 0 ];
            SimdVec<TF,1> R37{ R36 };
            auto R38 = R33 * R22;
            auto R39 = R21 + R38;
            auto R40 = R39[ 0 ];
            SimdVec<TF,1> R41{ R40 };
            auto R42 = R35[ 1 ];
            SimdVec<TF,1> R43{ R42 };
            auto R44 = R39[ 1 ];
            SimdVec<TF,1> R45{ R44 };
            px_3 = R45;
            py_3 = R43;
            px_4 = R41;
            py_4 = R37;
            pi_3 = R0;
            pi_2 = R18;
            py_2 = R16;
            px_2 = R14;
            pi_1 = R12;
            py_1 = R10;
            px_1 = R8;
            pi_0 = R6;
            py_0 = R4;
            px_0 = R2;
            pi_4 = R0;
            continue;
        }
        case_12: {
            nodes_size = 5;
            // mod=1,[1,2],[2,3],3,0, swith_cuts=0
            auto R0 = pi_0[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_1[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_1[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_1[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_2[ 0 ];
            SimdVec<TF,2> R9{ R2, R8 };
            auto R10 = py_0[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = di_1[ 0 ];
            auto R13 = px_0[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = di_2[ 0 ];
            SimdVec<TF,2> R16{ R12, R15 };
            auto R17 = pi_3[ 0 ];
            SimdVec<TC,1> R18{ R17 };
            auto R19 = di_3[ 0 ];
            SimdVec<TF,2> R20{ R15, R19 };
            auto R21 = R20 - R16;
            auto R22 = R16 / R21;
            SimdVec<TC,1> R23{ cut_i[num_cut] };
            auto R24 = px_3[ 0 ];
            SimdVec<TF,1> R25{ R24 };
            auto R26 = py_2[ 0 ];
            SimdVec<TF,2> R27{ R4, R26 };
            SimdVec<TF,2> R28{ R8, R24 };
            auto R29 = R9 - R28;
            auto R30 = R22 * R29;
            auto R31 = R9 + R30;
            auto R32 = R31[ 1 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = py_3[ 0 ];
            SimdVec<TF,1> R35{ R34 };
            auto R36 = R31[ 0 ];
            SimdVec<TF,1> R37{ R36 };
            SimdVec<TF,2> R38{ R26, R34 };
            auto R39 = R27 - R38;
            auto R40 = R22 * R39;
            auto R41 = R27 + R40;
            auto R42 = R41[ 1 ];
            SimdVec<TF,1> R43{ R42 };
            auto R44 = R41[ 0 ];
            SimdVec<TF,1> R45{ R44 };
            py_1 = R45;
            py_2 = R43;
            px_1 = R37;
            py_3 = R35;
            pi_1 = R23;
            px_2 = R33;
            px_3 = R25;
            pi_2 = R23;
            pi_3 = R18;
            px_4 = R14;
            py_4 = R11;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_4 = R1;
            continue;
        }
        case_9: {
            nodes_size = 5;
            // mod=3,[3,0],[0,1],1,2, swith_cuts=0
            auto R0 = pi_2[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_3[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = py_3[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = pi_3[ 0 ];
            SimdVec<TC,1> R7{ R6 };
            auto R8 = px_0[ 0 ];
            SimdVec<TF,2> R9{ R2, R8 };
            auto R10 = py_2[ 0 ];
            SimdVec<TF,1> R11{ R10 };
            auto R12 = di_3[ 0 ];
            auto R13 = px_2[ 0 ];
            SimdVec<TF,1> R14{ R13 };
            auto R15 = di_0[ 0 ];
            SimdVec<TF,2> R16{ R12, R15 };
            auto R17 = pi_1[ 0 ];
            SimdVec<TC,1> R18{ R17 };
            auto R19 = di_1[ 0 ];
            SimdVec<TF,2> R20{ R15, R19 };
            auto R21 = R20 - R16;
            auto R22 = R16 / R21;
            SimdVec<TC,1> R23{ cut_i[num_cut] };
            auto R24 = px_1[ 0 ];
            SimdVec<TF,1> R25{ R24 };
            auto R26 = py_0[ 0 ];
            SimdVec<TF,2> R27{ R4, R26 };
            SimdVec<TF,2> R28{ R8, R24 };
            auto R29 = R9 - R28;
            auto R30 = R22 * R29;
            auto R31 = R9 + R30;
            auto R32 = R31[ 1 ];
            SimdVec<TF,1> R33{ R32 };
            auto R34 = py_1[ 0 ];
            SimdVec<TF,1> R35{ R34 };
            auto R36 = R31[ 0 ];
            SimdVec<TF,1> R37{ R36 };
            SimdVec<TF,2> R38{ R26, R34 };
            auto R39 = R27 - R38;
            auto R40 = R22 * R39;
            auto R41 = R27 + R40;
            auto R42 = R41[ 1 ];
            SimdVec<TF,1> R43{ R42 };
            auto R44 = R41[ 0 ];
            SimdVec<TF,1> R45{ R44 };
            py_1 = R45;
            py_2 = R43;
            px_1 = R37;
            py_3 = R35;
            pi_1 = R23;
            px_2 = R33;
            px_3 = R25;
            pi_2 = R23;
            pi_3 = R18;
            px_4 = R14;
            py_4 = R11;
            pi_0 = R7;
            py_0 = R5;
            px_0 = R3;
            pi_4 = R1;
            continue;
        }
        case_10: {
            nodes_size = 5;
            // mod=[0,1],[1,2],2,3,0, swith_cuts=0
            auto R0 = pi_0[ 0 ];
            SimdVec<TC,1> R1{ R0 };
            auto R2 = px_0[ 0 ];
            SimdVec<TF,1> R3{ R2 };
            auto R4 = px_2[ 0 ];
            SimdVec<TF,1> R5{ R4 };
            auto R6 = di_0[ 0 ];
            SimdVec<TF,2> R7{ R2, R4 };
            auto R8 = pi_3[ 0 ];
            SimdVec<TC,1> R9{ R8 };
            auto R10 = di_2[ 0 ];
            SimdVec<TF,2> R11{ R6, R10 };
            auto R12 = py_3[ 0 ];
            SimdVec<TF,1> R13{ R12 };
            auto R14 = di_1[ 0 ];
            SimdVec<TF,2> R15{ R14, R14 };
            auto R16 = R15 - R11;
            auto R17 = R11 / R16;
            auto R18 = px_3[ 0 ];
            SimdVec<TF,1> R19{ R18 };
            auto R20 = px_1[ 0 ];
            SimdVec<TF,2> R21{ R20, R20 };
            auto R22 = R7 - R21;
            auto R23 = R17 * R22;
            auto R24 = R7 + R23;
            auto R25 = R24[ 1 ];
            SimdVec<TF,1> R26{ R25 };
            auto R27 = py_0[ 0 ];
            SimdVec<TF,1> R28{ R27 };
            auto R29 = py_2[ 0 ];
            SimdVec<TF,1> R30{ R29 };
            auto R31 = py_1[ 0 ];
            SimdVec<TF,2> R32{ R31, R31 };
            SimdVec<TF,2> R33{ R27, R29 };
            auto R34 = R33 - R32;
            auto R35 = R17 * R34;
            auto R36 = R33 + R35;
            auto R37 = R36[ 1 ];
            SimdVec<TF,1> R38{ R37 };
            SimdVec<TC,1> R39{ cut_i[num_cut] };
            auto R40 = pi_2[ 0 ];
            SimdVec<TC,1> R41{ R40 };
            auto R42 = R24[ 0 ];
            SimdVec<TF,1> R43{ R42 };
            auto R44 = R36[ 0 ];
            SimdVec<TF,1> R45{ R44 };
            py_0 = R45;
            px_0 = R43;
            pi_0 = R39;
            pi_2 = R41;
            pi_1 = R39;
            py_1 = R38;
            py_2 = R30;
            py_4 = R28;
            px_1 = R26;
            px_3 = R19;
            py_3 = R13;
            pi_3 = R9;
            px_2 = R5;
            px_4 = R3;
            pi_4 = R1;
            continue;
        }
    }
    VF::store_aligned( px + 0, px_0 );
    VF::store_aligned( px + 1, px_1 );
    VF::store_aligned( px + 2, px_2 );
    VF::store_aligned( px + 3, px_3 );
    VF::store_aligned( px + 4, px_4 );
    VF::store_aligned( py + 0, py_0 );
    VF::store_aligned( py + 1, py_1 );
    VF::store_aligned( py + 2, py_2 );
    VF::store_aligned( py + 3, py_3 );
    VF::store_aligned( py + 4, py_4 );
    VC::store_aligned( pi + 0, pi_0 );
    VC::store_aligned( pi + 1, pi_1 );
    VC::store_aligned( pi + 2, pi_2 );
    VC::store_aligned( pi + 3, pi_3 );
    VC::store_aligned( pi + 4, pi_4 );
}
} // namespace internal
} // namespace sdot
